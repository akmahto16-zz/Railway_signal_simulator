   1              		.file	"main.c"
   2              		.section	.rodata.str1.1,"aMS",@progbits,1
   3              	.LC0:
   4 0000 646F5772 		.string	"doWrite()"
   4      69746528 
   4      2900
   5              		.section	.text.unlikely,"ax",@progbits
   6              	.LCOLDB1:
   7              	.LHOTB1:
   9              	doWrite:
  10              	.LFB68:
  11              		.cfi_startproc
  12 0000 4157     		pushq	%r15
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 15, -16
  15 0002 4156     		pushq	%r14
  16              		.cfi_def_cfa_offset 24
  17              		.cfi_offset 14, -24
  18 0004 4D89C7   		movq	%r8, %r15
  19 0007 4155     		pushq	%r13
  20              		.cfi_def_cfa_offset 32
  21              		.cfi_offset 13, -32
  22 0009 4154     		pushq	%r12
  23              		.cfi_def_cfa_offset 40
  24              		.cfi_offset 12, -40
  25 000b 4989FD   		movq	%rdi, %r13
  26 000e 55       		pushq	%rbp
  27              		.cfi_def_cfa_offset 48
  28              		.cfi_offset 6, -48
  29 000f 53       		pushq	%rbx
  30              		.cfi_def_cfa_offset 56
  31              		.cfi_offset 3, -56
  32 0010 4989CE   		movq	%rcx, %r14
  33 0013 4D89CC   		movq	%r9, %r12
  34 0016 31DB     		xorl	%ebx, %ebx
  35 0018 31ED     		xorl	%ebp, %ebp
  36 001a 4881EC38 		subq	$65592, %rsp
  36      000100
  37              		.cfi_def_cfa_offset 65648
  38 0021 64488B04 		movq	%fs:40, %rax
  38      25280000 
  38      00
  39 002a 48898424 		movq	%rax, 65576(%rsp)
  39      28000100 
  40 0032 31C0     		xorl	%eax, %eax
  41 0034 400FB6C6 		movzbl	%sil, %eax
  42 0038 48895424 		movq	%rdx, 8(%rsp)
  42      08
  43 003d 89442414 		movl	%eax, 20(%rsp)
  44              	.L7:
  45 0041 488B4C24 		movq	8(%rsp), %rcx
  45      08
  46 0046 488D7C24 		leaq	32(%rsp), %rdi
  46      20
  47 004b BAFBFF00 		movl	$65531, %edx
  47      00
  48 0050 BE010000 		movl	$1, %esi
  48      00
  49 0055 E8000000 		call	fread
  49      00
  50 005a 4885C0   		testq	%rax, %rax
  51 005d 7460     		je	.L2
  52 005f 8B742414 		movl	20(%rsp), %esi
  53 0063 488D4C24 		leaq	32(%rsp), %rcx
  53      20
  54 0068 4D89E0   		movq	%r12, %r8
  55 006b 4889C2   		movq	%rax, %rdx
  56 006e 4C89EF   		movq	%r13, %rdi
  57 0071 4801C3   		addq	%rax, %rbx
  58 0074 48894424 		movq	%rax, 24(%rsp)
  58      18
  59 0079 E8000000 		call	flWriteChannelAsync
  59      00
  60 007e 85C0     		testl	%eax, %eax
  61 0080 7510     		jne	.L3
  62 0082 4C8B4C24 		movq	24(%rsp), %r9
  62      18
  63 0087 488D4424 		leaq	32(%rsp), %rax
  63      20
  64 008c 4A8D1408 		leaq	(%rax,%r9), %rdx
  65 0090 EB14     		jmp	.L4
  66              	.L3:
  67 0092 BE000000 		movl	$.LC0, %esi
  67      00
  68 0097 4C89E7   		movq	%r12, %rdi
  69 009a E8000000 		call	errPrefix
  69      00
  70 009f B8010000 		movl	$1, %eax
  70      00
  71 00a4 EB2F     		jmp	.L5
  72              	.L4:
  73 00a6 4839D0   		cmpq	%rdx, %rax
  74 00a9 740B     		je	.L16
  75 00ab 48FFC0   		incq	%rax
  76 00ae 0FB648FF 		movzbl	-1(%rax), %ecx
  77 00b2 01CD     		addl	%ecx, %ebp
  78 00b4 EBF0     		jmp	.L4
  79              	.L16:
  80 00b6 4981F9FB 		cmpq	$65531, %r9
  80      FF0000
  81 00bd 7482     		je	.L7
  82              	.L2:
  83 00bf 4C89E6   		movq	%r12, %rsi
  84 00c2 4C89EF   		movq	%r13, %rdi
  85 00c5 E8000000 		call	flAwaitAsyncWrites
  85      00
  86 00ca 85C0     		testl	%eax, %eax
  87 00cc 75C4     		jne	.L3
  88 00ce 6641892F 		movw	%bp, (%r15)
  89 00d2 49891E   		movq	%rbx, (%r14)
  90              	.L5:
  91 00d5 488B9C24 		movq	65576(%rsp), %rbx
  91      28000100 
  92 00dd 6448331C 		xorq	%fs:40, %rbx
  92      25280000 
  92      00
  93 00e6 7405     		je	.L8
  94 00e8 E8000000 		call	__stack_chk_fail
  94      00
  95              	.L8:
  96 00ed 4881C438 		addq	$65592, %rsp
  96      000100
  97              		.cfi_def_cfa_offset 56
  98 00f4 5B       		popq	%rbx
  99              		.cfi_def_cfa_offset 48
 100 00f5 5D       		popq	%rbp
 101              		.cfi_def_cfa_offset 40
 102 00f6 415C     		popq	%r12
 103              		.cfi_def_cfa_offset 32
 104 00f8 415D     		popq	%r13
 105              		.cfi_def_cfa_offset 24
 106 00fa 415E     		popq	%r14
 107              		.cfi_def_cfa_offset 16
 108 00fc 415F     		popq	%r15
 109              		.cfi_def_cfa_offset 8
 110 00fe C3       		ret
 111              		.cfi_endproc
 112              	.LFE68:
 114              	.LCOLDE1:
 115              	.LHOTE1:
 116              		.section	.rodata.str1.1
 117              	.LC2:
 118 000a 776200   		.string	"wb"
 119              	.LC3:
 120 000d 646F5265 		.string	"doRead()"
 120      61642829 
 120      00
 121              		.section	.rodata.str1.8,"aMS",@progbits,1
 122              		.align 8
 123              	.LC6:
 124 0000 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 124      20256420 
 124      62797465 
 124      73202863 
 124      6865636B 
 125              		.section	.rodata.str1.1
 126              	.LC7:
 127 0016 66666625 		.string	"fff%d\n"
 127      640A00
 128              	.LC8:
 129 001d 726200   		.string	"rb"
 130              		.section	.rodata.str1.8
 131 003d 000000   		.align 8
 132              	.LC9:
 133 0040 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 133      6520257A 
 133      75206279 
 133      74657320 
 133      28636865 
 134              		.section	.rodata.str1.1
 135              	.LC10:
 136 0020 25732061 		.string	"%s at column %d\n  %s\n  "
 136      7420636F 
 136      6C756D6E 
 136      2025640A 
 136      20202573 
 137              	.LC11:
 138 0038 2000     		.string	" "
 139              	.LC12:
 140 003a 5E0A00   		.string	"^\n"
 141              		.section	.text.unlikely
 142              	.LCOLDB13:
 143              	.LHOTB13:
 145              	parseLine:
 146              	.LFB69:
 147              		.cfi_startproc
 148 00ff 4157     		pushq	%r15
 149              		.cfi_def_cfa_offset 16
 150              		.cfi_offset 15, -16
 151 0101 4156     		pushq	%r14
 152              		.cfi_def_cfa_offset 24
 153              		.cfi_offset 14, -24
 154 0103 B9080000 		movl	$8, %ecx
 154      00
 155 0108 4155     		pushq	%r13
 156              		.cfi_def_cfa_offset 32
 157              		.cfi_offset 13, -32
 158 010a 4154     		pushq	%r12
 159              		.cfi_def_cfa_offset 40
 160              		.cfi_offset 12, -40
 161 010c 55       		pushq	%rbp
 162              		.cfi_def_cfa_offset 48
 163              		.cfi_offset 6, -48
 164 010d 53       		pushq	%rbx
 165              		.cfi_def_cfa_offset 56
 166              		.cfi_offset 3, -56
 167 010e 4881ECB8 		subq	$184, %rsp
 167      000000
 168              		.cfi_def_cfa_offset 240
 169 0115 64488B04 		movq	%fs:40, %rax
 169      25280000 
 169      00
 170 011e 48898424 		movq	%rax, 168(%rsp)
 170      A8000000 
 171 0126 31C0     		xorl	%eax, %eax
 172 0128 48897C24 		movq	%rdi, 8(%rsp)
 172      08
 173 012d 488DBC24 		leaq	128(%rsp), %rdi
 173      80000000 
 174 0135 48897424 		movq	%rsi, 16(%rsp)
 174      10
 175 013a 48891424 		movq	%rdx, (%rsp)
 176 013e BE000400 		movl	$1024, %esi
 176      00
 177 0143 F3AB     		rep stosl
 178 0145 488DBC24 		leaq	128(%rsp), %rdi
 178      80000000 
 179 014d 4889D1   		movq	%rdx, %rcx
 180 0150 31D2     		xorl	%edx, %edx
 181 0152 E8000000 		call	bufInitialise
 181      00
 182 0157 85C0     		testl	%eax, %eax
 183 0159 0F85DD08 		jne	.L98
 183      0000
 184 015f 488B4424 		movq	16(%rsp), %rax
 184      10
 185 0164 48890500 		movq	%rax, ptr(%rip)
 185      000000
 186              	.L19:
 187 016b 488B3D00 		movq	ptr(%rip), %rdi
 187      000000
 188 0172 8A07     		movb	(%rdi), %al
 189 0174 3C3B     		cmpb	$59, %al
 190 0176 750C     		jne	.L161
 191 0178 48FFC7   		incq	%rdi
 192 017b 48893D00 		movq	%rdi, ptr(%rip)
 192      000000
 193 0182 EBE7     		jmp	.L19
 194              	.L161:
 195 0184 3C72     		cmpb	$114, %al
 196 0186 7415     		je	.L21
 197 0188 3C77     		cmpb	$119, %al
 198 018a 0F847603 		je	.L22
 198      0000
 199 0190 3C2B     		cmpb	$43, %al
 200 0192 0F85B508 		jne	.L119
 200      0000
 201 0198 E96E0700 		jmp	.L162
 201      00
 202              	.L21:
 203 019d 488D5F01 		leaq	1(%rdi), %rbx
 204 01a1 48891D00 		movq	%rbx, ptr(%rip)
 204      000000
 205 01a8 E8000000 		call	__errno_location
 205      00
 206 01ad 488D7424 		leaq	80(%rsp), %rsi
 206      50
 207 01b2 4989C6   		movq	%rax, %r14
 208 01b5 C7000000 		movl	$0, (%rax)
 208      0000
 209 01bb BA100000 		movl	$16, %edx
 209      00
 210 01c0 4889DF   		movq	%rbx, %rdi
 211 01c3 E8000000 		call	strtoul
 211      00
 212 01c8 41833E00 		cmpl	$0, (%r14)
 213 01cc 4989C4   		movq	%rax, %r12
 214 01cf 7411     		je	.L24
 215              	.L28:
 216 01d1 4531FF   		xorl	%r15d, %r15d
 217 01d4 4531F6   		xorl	%r14d, %r14d
 218 01d7 41BD0200 		movl	$2, %r13d
 218      0000
 219 01dd E9380500 		jmp	.L64
 219      00
 220              	.L24:
 221 01e2 83F87F   		cmpl	$127, %eax
 222 01e5 0F87FF02 		ja	.L100
 222      0000
 223 01eb 488B7C24 		movq	80(%rsp), %rdi
 223      50
 224 01f0 8A07     		movb	(%rdi), %al
 225 01f2 48893D00 		movq	%rdi, ptr(%rip)
 225      000000
 226 01f9 A8DF     		testb	$-33, %al
 227 01fb 7415     		je	.L26
 228 01fd 3C3B     		cmpb	$59, %al
 229 01ff 7411     		je	.L26
 230              	.L29:
 231 0201 4531FF   		xorl	%r15d, %r15d
 232 0204 4531F6   		xorl	%r14d, %r14d
 233 0207 41BD0500 		movl	$5, %r13d
 233      0000
 234 020d E9080500 		jmp	.L64
 234      00
 235              	.L26:
 236 0212 3C20     		cmpb	$32, %al
 237 0214 41BD0100 		movl	$1, %r13d
 237      0000
 238 021a 0F85FC08 		jne	.L27
 238      0000
 239 0220 488D7424 		leaq	80(%rsp), %rsi
 239      50
 240 0225 48FFC7   		incq	%rdi
 241 0228 41C70600 		movl	$0, (%r14)
 241      000000
 242 022f BA100000 		movl	$16, %edx
 242      00
 243 0234 48893D00 		movq	%rdi, ptr(%rip)
 243      000000
 244 023b E8000000 		call	strtoul
 244      00
 245 0240 41833E00 		cmpl	$0, (%r14)
 246 0244 4889C5   		movq	%rax, %rbp
 247 0247 4189C5   		movl	%eax, %r13d
 248 024a 7585     		jne	.L28
 249 024c 488B7424 		movq	80(%rsp), %rsi
 249      50
 250 0251 8A06     		movb	(%rsi), %al
 251 0253 48893500 		movq	%rsi, ptr(%rip)
 251      000000
 252 025a A8DF     		testb	$-33, %al
 253 025c 7404     		je	.L120
 254 025e 3C3B     		cmpb	$59, %al
 255 0260 759F     		jne	.L29
 256              	.L120:
 257 0262 3C20     		cmpb	$32, %al
 258 0264 0F85B208 		jne	.L27
 258      0000
 259 026a 488D4601 		leaq	1(%rsi), %rax
 260 026e 48890500 		movq	%rax, ptr(%rip)
 260      000000
 261 0275 8A4601   		movb	1(%rsi), %al
 262 0278 3C22     		cmpb	$34, %al
 263 027a 7404     		je	.L121
 264 027c 3C27     		cmpb	$39, %al
 265 027e 7581     		jne	.L29
 266              	.L121:
 267 0280 4C8D6E02 		leaq	2(%rsi), %r13
 268 0284 4C892D00 		movq	%r13, ptr(%rip)
 268      000000
 269 028b 4D89EF   		movq	%r13, %r15
 270              	.L32:
 271 028e 418A17   		movb	(%r15), %dl
 272 0291 38D0     		cmpb	%dl, %al
 273 0293 740D     		je	.L33
 274 0295 84D2     		testb	%dl, %dl
 275 0297 0F844E04 		je	.L109
 275      0000
 276 029d 49FFC7   		incq	%r15
 277 02a0 EBEC     		jmp	.L32
 278              	.L33:
 279 02a2 84C0     		testb	%al, %al
 280 02a4 0F844104 		je	.L109
 280      0000
 281 02aa 4C89FB   		movq	%r15, %rbx
 282 02ad 4C29EB   		subq	%r13, %rbx
 283 02b0 488D7B01 		leaq	1(%rbx), %rdi
 284 02b4 E8000000 		call	malloc
 284      00
 285 02b9 4885C0   		testq	%rax, %rax
 286 02bc 4989C6   		movq	%rax, %r14
 287 02bf 0F843404 		je	.L110
 287      0000
 288 02c5 4D39EF   		cmpq	%r13, %r15
 289 02c8 0F843604 		je	.L111
 289      0000
 290 02ce 4889DA   		movq	%rbx, %rdx
 291 02d1 4C89EE   		movq	%r13, %rsi
 292 02d4 4889C7   		movq	%rax, %rdi
 293 02d7 E8000000 		call	strncpy
 293      00
 294 02dc 49FFC7   		incq	%r15
 295 02df 41C6041E 		movb	$0, (%r14,%rbx)
 295      00
 296 02e4 BE000000 		movl	$.LC2, %esi
 296      00
 297 02e9 4C89F7   		movq	%r14, %rdi
 298 02ec 4C893D00 		movq	%r15, ptr(%rip)
 298      000000
 299 02f3 E8000000 		call	fopen
 299      00
 300 02f8 4885C0   		testq	%rax, %rax
 301 02fb 4989C7   		movq	%rax, %r15
 302 02fe 0F84F701 		je	.L105
 302      0000
 303 0304 4C89F7   		movq	%r14, %rdi
 304 0307 BB000001 		movl	$65536, %ebx
 304      00
 305 030c 450FB6F4 		movzbl	%r12b, %r14d
 306 0310 E8000000 		call	free
 306      00
 307 0315 488D7C24 		leaq	96(%rsp), %rdi
 307      60
 308 031a 31F6     		xorl	%esi, %esi
 309 031c E8000000 		call	gettimeofday
 309      00
 310 0321 81FD0000 		cmpl	$65536, %ebp
 310      0100
 311 0327 4C8B0424 		movq	(%rsp), %r8
 312 032b 488B7C24 		movq	8(%rsp), %rdi
 312      08
 313 0330 0F46DD   		cmovbe	%ebp, %ebx
 314 0333 4489F6   		movl	%r14d, %esi
 315 0336 31C9     		xorl	%ecx, %ecx
 316 0338 89DA     		movl	%ebx, %edx
 317 033a E8000000 		call	flReadChannelAsyncSubmit
 317      00
 318 033f 85C0     		testl	%eax, %eax
 319 0341 741B     		je	.L35
 320              	.L38:
 321 0343 488B3C24 		movq	(%rsp), %rdi
 322 0347 BE000000 		movl	$.LC3, %esi
 322      00
 323 034c 31DB     		xorl	%ebx, %ebx
 324 034e 41BD0100 		movl	$1, %r13d
 324      0000
 325 0354 E8000000 		call	errPrefix
 325      00
 326 0359 E9160100 		jmp	.L36
 326      00
 327              	.L35:
 328 035e 4189ED   		movl	%ebp, %r13d
 329 0361 4129DD   		subl	%ebx, %r13d
 330 0364 31DB     		xorl	%ebx, %ebx
 331              	.L37:
 332 0366 4585ED   		testl	%r13d, %r13d
 333 0369 0F84AB00 		je	.L163
 333      0000
 334 036f 4181FD00 		cmpl	$65536, %r13d
 334      000100
 335 0376 41B90000 		movl	$65536, %r9d
 335      0100
 336 037c 4C8B0424 		movq	(%rsp), %r8
 337 0380 488B7C24 		movq	8(%rsp), %rdi
 337      08
 338 0385 450F46CD 		cmovbe	%r13d, %r9d
 339 0389 4489F6   		movl	%r14d, %esi
 340 038c 31C9     		xorl	%ecx, %ecx
 341 038e 4489CA   		movl	%r9d, %edx
 342 0391 44894C24 		movl	%r9d, 24(%rsp)
 342      18
 343 0396 E8000000 		call	flReadChannelAsyncSubmit
 343      00
 344 039b 85C0     		testl	%eax, %eax
 345 039d 75A4     		jne	.L38
 346 039f 448B4C24 		movl	24(%rsp), %r9d
 346      18
 347 03a4 488D4C24 		leaq	76(%rsp), %rcx
 347      4C
 348 03a9 4C8B0424 		movq	(%rsp), %r8
 349 03ad 488B7C24 		movq	8(%rsp), %rdi
 349      08
 350 03b2 488D7424 		leaq	88(%rsp), %rsi
 350      58
 351 03b7 4889CA   		movq	%rcx, %rdx
 352 03ba 4529CD   		subl	%r9d, %r13d
 353 03bd E8000000 		call	flReadChannelAsyncAwait
 353      00
 354 03c2 85C0     		testl	%eax, %eax
 355 03c4 0F8579FF 		jne	.L38
 355      FFFF
 356 03ca 8B54244C 		movl	76(%rsp), %edx
 357 03ce 488B7C24 		movq	88(%rsp), %rdi
 357      58
 358 03d3 4C89F9   		movq	%r15, %rcx
 359 03d6 BE010000 		movl	$1, %esi
 359      00
 360 03db E8000000 		call	fwrite
 360      00
 361 03e0 3B44244C 		cmpl	76(%rsp), %eax
 362 03e4 89C2     		movl	%eax, %edx
 363 03e6 7418     		je	.L39
 364              	.L43:
 365 03e8 488B3C24 		movq	(%rsp), %rdi
 366 03ec BE000000 		movl	$.LC3, %esi
 366      00
 367 03f1 31DB     		xorl	%ebx, %ebx
 368 03f3 41BD0B00 		movl	$11, %r13d
 368      0000
 369 03f9 E8000000 		call	errPrefix
 369      00
 370 03fe EB74     		jmp	.L36
 371              	.L39:
 372 0400 488B4424 		movq	88(%rsp), %rax
 372      58
 373              	.L40:
 374 0405 FFCA     		decl	%edx
 375 0407 83FAFF   		cmpl	$-1, %edx
 376 040a 0F8456FF 		je	.L37
 376      FFFF
 377 0410 0FB608   		movzbl	(%rax), %ecx
 378 0413 48FFC0   		incq	%rax
 379 0416 01CB     		addl	%ecx, %ebx
 380 0418 EBEB     		jmp	.L40
 381              	.L163:
 382 041a 488D4C24 		leaq	76(%rsp), %rcx
 382      4C
 383 041f 4C8B0424 		movq	(%rsp), %r8
 384 0423 488B7C24 		movq	8(%rsp), %rdi
 384      08
 385 0428 488D7424 		leaq	88(%rsp), %rsi
 385      58
 386 042d 4889CA   		movq	%rcx, %rdx
 387 0430 E8000000 		call	flReadChannelAsyncAwait
 387      00
 388 0435 85C0     		testl	%eax, %eax
 389 0437 0F8506FF 		jne	.L38
 389      FFFF
 390 043d 8B54244C 		movl	76(%rsp), %edx
 391 0441 488B7C24 		movq	88(%rsp), %rdi
 391      58
 392 0446 4C89F9   		movq	%r15, %rcx
 393 0449 BE010000 		movl	$1, %esi
 393      00
 394 044e E8000000 		call	fwrite
 394      00
 395 0453 3B44244C 		cmpl	76(%rsp), %eax
 396 0457 89C2     		movl	%eax, %edx
 397 0459 758D     		jne	.L43
 398 045b 488B4424 		movq	88(%rsp), %rax
 398      58
 399              	.L44:
 400 0460 FFCA     		decl	%edx
 401 0462 83FAFF   		cmpl	$-1, %edx
 402 0465 740A     		je	.L164
 403 0467 0FB608   		movzbl	(%rax), %ecx
 404 046a 48FFC0   		incq	%rax
 405 046d 01CB     		addl	%ecx, %ebx
 406 046f EBEF     		jmp	.L44
 407              	.L164:
 408 0471 4531ED   		xorl	%r13d, %r13d
 409              	.L36:
 410 0474 488D7C24 		leaq	112(%rsp), %rdi
 410      70
 411 0479 31F6     		xorl	%esi, %esi
 412 047b E8000000 		call	gettimeofday
 412      00
 413 0480 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 413      000000
 414 0487 0F844C02 		je	.L65
 414      0000
 415 048d 48694424 		imulq	$1000000, 112(%rsp), %rax
 415      7040420F 
 415      00
 416 0496 48695424 		imulq	$1000000, 96(%rsp), %rdx
 416      6040420F 
 416      00
 417 049f 0FB7CB   		movzwl	%bx, %ecx
 418 04a2 4589E0   		movl	%r12d, %r8d
 419 04a5 BE000000 		movl	$.LC6, %esi
 419      00
 420 04aa BF010000 		movl	$1, %edi
 420      00
 421 04af 48034424 		addq	120(%rsp), %rax
 421      78
 422 04b4 48035424 		addq	104(%rsp), %rdx
 422      68
 423 04b9 4829D0   		subq	%rdx, %rax
 424 04bc 89EA     		movl	%ebp, %edx
 425 04be F2480F2A 		cvtsi2sdq	%rax, %xmm1
 425      C8
 426 04c3 89E8     		movl	%ebp, %eax
 427 04c5 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 427      C0
 428 04ca B001     		movb	$1, %al
 429 04cc F20F5E0D 		divsd	.LC4(%rip), %xmm1
 429      00000000 
 430 04d4 F20F590D 		mulsd	.LC5(%rip), %xmm1
 430      00000000 
 431 04dc F20F5EC1 		divsd	%xmm1, %xmm0
 432 04e0 E8000000 		call	__printf_chk
 432      00
 433 04e5 E9EF0100 		jmp	.L65
 433      00
 434              	.L100:
 435 04ea 4531FF   		xorl	%r15d, %r15d
 436 04ed 4531F6   		xorl	%r14d, %r14d
 437 04f0 41BD0300 		movl	$3, %r13d
 437      0000
 438 04f6 E91F0200 		jmp	.L64
 438      00
 439              	.L105:
 440 04fb 41BD0B00 		movl	$11, %r13d
 440      0000
 441 0501 E9140200 		jmp	.L64
 441      00
 442              	.L22:
 443 0506 488D5F01 		leaq	1(%rdi), %rbx
 444 050a 48C74424 		movq	$1, 80(%rsp)
 444      50010000 
 444      00
 445 0513 48891D00 		movq	%rbx, ptr(%rip)
 445      000000
 446 051a E8000000 		call	__errno_location
 446      00
 447 051f 488D7424 		leaq	88(%rsp), %rsi
 447      58
 448 0524 4989C4   		movq	%rax, %r12
 449 0527 C7000000 		movl	$0, (%rax)
 449      0000
 450 052d BA100000 		movl	$16, %edx
 450      00
 451 0532 4889DF   		movq	%rbx, %rdi
 452 0535 E8000000 		call	strtoul
 452      00
 453 053a 41833C24 		cmpl	$0, (%r12)
 453      00
 454 053f 4889C5   		movq	%rax, %rbp
 455 0542 0F857603 		jne	.L107
 455      0000
 456 0548 4883F87F 		cmpq	$127, %rax
 457 054c 0F878003 		ja	.L108
 457      0000
 458 0552 488B7424 		movq	88(%rsp), %rsi
 458      58
 459 0557 803E20   		cmpb	$32, (%rsi)
 460 055a 48893500 		movq	%rsi, ptr(%rip)
 460      000000
 461 0561 0F85E604 		jne	.L119
 461      0000
 462 0567 8A4601   		movb	1(%rsi), %al
 463 056a 4C8D6E01 		leaq	1(%rsi), %r13
 464 056e 4C892D00 		movq	%r13, ptr(%rip)
 464      000000
 465 0575 3C22     		cmpb	$34, %al
 466 0577 410F94C6 		sete	%r14b
 467 057b 3C27     		cmpb	$39, %al
 468 057d 0F94C2   		sete	%dl
 469 0580 4108D6   		orb	%dl, %r14b
 470 0583 0F849901 		je	.L60
 470      0000
 471 0589 488D5E02 		leaq	2(%rsi), %rbx
 472 058d 66C74424 		movw	$0, 76(%rsp)
 472      4C0000
 473 0594 48891D00 		movq	%rbx, ptr(%rip)
 473      000000
 474 059b 4989DD   		movq	%rbx, %r13
 475              	.L61:
 476 059e 418A5500 		movb	0(%r13), %dl
 477 05a2 38D0     		cmpb	%dl, %al
 478 05a4 740D     		je	.L62
 479 05a6 84D2     		testb	%dl, %dl
 480 05a8 0F843D01 		je	.L109
 480      0000
 481 05ae 49FFC5   		incq	%r13
 482 05b1 EBEB     		jmp	.L61
 483              	.L62:
 484 05b3 84C0     		testb	%al, %al
 485 05b5 0F843001 		je	.L109
 485      0000
 486 05bb 4D89EC   		movq	%r13, %r12
 487 05be 4929DC   		subq	%rbx, %r12
 488 05c1 498D7C24 		leaq	1(%r12), %rdi
 488      01
 489 05c6 E8000000 		call	malloc
 489      00
 490 05cb 4885C0   		testq	%rax, %rax
 491 05ce 4989C6   		movq	%rax, %r14
 492 05d1 0F842201 		je	.L110
 492      0000
 493 05d7 4939DD   		cmpq	%rbx, %r13
 494 05da 0F842401 		je	.L111
 494      0000
 495 05e0 4C89E2   		movq	%r12, %rdx
 496 05e3 4889DE   		movq	%rbx, %rsi
 497 05e6 4889C7   		movq	%rax, %rdi
 498 05e9 E8000000 		call	strncpy
 498      00
 499 05ee 49FFC5   		incq	%r13
 500 05f1 43C60426 		movb	$0, (%r14,%r12)
 500      00
 501 05f6 BE000000 		movl	$.LC8, %esi
 501      00
 502 05fb 4C89F7   		movq	%r14, %rdi
 503 05fe 4C892D00 		movq	%r13, ptr(%rip)
 503      000000
 504 0605 E8000000 		call	fopen
 504      00
 505 060a 4885C0   		testq	%rax, %rax
 506 060d 4989C7   		movq	%rax, %r15
 507 0610 0F84F900 		je	.L112
 507      0000
 508 0616 4C89F7   		movq	%r14, %rdi
 509 0619 E8000000 		call	free
 509      00
 510 061e 488D7C24 		leaq	96(%rsp), %rdi
 510      60
 511 0623 31F6     		xorl	%esi, %esi
 512 0625 E8000000 		call	gettimeofday
 512      00
 513 062a 4C8B0C24 		movq	(%rsp), %r9
 514 062e 488B7C24 		movq	8(%rsp), %rdi
 514      08
 515 0633 4C8D4424 		leaq	76(%rsp), %r8
 515      4C
 516 0638 488D4C24 		leaq	80(%rsp), %rcx
 516      50
 517 063d 4C89FA   		movq	%r15, %rdx
 518 0640 89EE     		movl	%ebp, %esi
 519 0642 E8B9F9FF 		call	doWrite
 519      FF
 520 0647 488D7C24 		leaq	112(%rsp), %rdi
 520      70
 521 064c 31F6     		xorl	%esi, %esi
 522 064e 4189C5   		movl	%eax, %r13d
 523 0651 E8000000 		call	gettimeofday
 523      00
 524 0656 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 524      000000
 525 065d 747A     		je	.L65
 526 065f 48694424 		imulq	$1000000, 112(%rsp), %rax
 526      7040420F 
 526      00
 527 0668 48694C24 		imulq	$1000000, 96(%rsp), %rcx
 527      6040420F 
 527      00
 528 0671 488B5424 		movq	80(%rsp), %rdx
 528      50
 529 0676 48034424 		addq	120(%rsp), %rax
 529      78
 530 067b 48034C24 		addq	104(%rsp), %rcx
 530      68
 531 0680 4829C8   		subq	%rcx, %rax
 532 0683 4885D2   		testq	%rdx, %rdx
 533 0686 F2480F2A 		cvtsi2sdq	%rax, %xmm1
 533      C8
 534 068b 7807     		js	.L66
 535 068d F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 535      C2
 536 0692 EB18     		jmp	.L67
 537              	.L66:
 538 0694 4889D0   		movq	%rdx, %rax
 539 0697 4889D1   		movq	%rdx, %rcx
 540 069a 48D1E8   		shrq	%rax
 541 069d 83E101   		andl	$1, %ecx
 542 06a0 4809C8   		orq	%rcx, %rax
 543 06a3 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 543      C0
 544 06a8 F20F58C0 		addsd	%xmm0, %xmm0
 545              	.L67:
 546 06ac F20F5E0D 		divsd	.LC4(%rip), %xmm1
 546      00000000 
 547 06b4 0FB74C24 		movzwl	76(%rsp), %ecx
 547      4C
 548 06b9 4989E8   		movq	%rbp, %r8
 549 06bc BE000000 		movl	$.LC9, %esi
 549      00
 550 06c1 BF010000 		movl	$1, %edi
 550      00
 551 06c6 B001     		movb	$1, %al
 552 06c8 F20F590D 		mulsd	.LC5(%rip), %xmm1
 552      00000000 
 553 06d0 F20F5EC1 		divsd	%xmm1, %xmm0
 554 06d4 E8000000 		call	__printf_chk
 554      00
 555              	.L65:
 556 06d9 4585ED   		testl	%r13d, %r13d
 557 06dc 7539     		jne	.L113
 558 06de 4C89FF   		movq	%r15, %rdi
 559 06e1 E8000000 		call	fclose
 559      00
 560 06e6 E9170300 		jmp	.L57
 560      00
 561              	.L109:
 562 06eb 4531FF   		xorl	%r15d, %r15d
 563 06ee 4531F6   		xorl	%r14d, %r14d
 564 06f1 41BD0600 		movl	$6, %r13d
 564      0000
 565 06f7 EB21     		jmp	.L64
 566              	.L110:
 567 06f9 4531FF   		xorl	%r15d, %r15d
 568 06fc 41BD0700 		movl	$7, %r13d
 568      0000
 569 0702 EB16     		jmp	.L64
 570              	.L111:
 571 0704 4531FF   		xorl	%r15d, %r15d
 572 0707 41BD0800 		movl	$8, %r13d
 572      0000
 573 070d EB0B     		jmp	.L64
 574              	.L112:
 575 070f 41BD0A00 		movl	$10, %r13d
 575      0000
 576 0715 EB03     		jmp	.L64
 577              	.L113:
 578 0717 4531F6   		xorl	%r14d, %r14d
 579              	.L64:
 580 071a 4531E4   		xorl	%r12d, %r12d
 581 071d E93A0300 		jmp	.L18
 581      00
 582              	.L60:
 583 0722 8D50D0   		leal	-48(%rax), %edx
 584 0725 80FA09   		cmpb	$9, %dl
 585 0728 760E     		jbe	.L69
 586 072a 83E0DF   		andl	$-33, %eax
 587 072d 83E841   		subl	$65, %eax
 588 0730 3C05     		cmpb	$5, %al
 589 0732 0F871503 		ja	.L119
 589      0000
 590              	.L69:
 591 0738 4883C602 		addq	$2, %rsi
 592              	.L71:
 593 073c 8A06     		movb	(%rsi), %al
 594 073e 8D50D0   		leal	-48(%rax), %edx
 595 0741 80FA09   		cmpb	$9, %dl
 596 0744 7705     		ja	.L165
 597              	.L72:
 598 0746 48FFC6   		incq	%rsi
 599 0749 EBF1     		jmp	.L71
 600              	.L165:
 601 074b 83E0DF   		andl	$-33, %eax
 602 074e 83E841   		subl	$65, %eax
 603 0751 3C05     		cmpb	$5, %al
 604 0753 76F1     		jbe	.L72
 605 0755 4C29EE   		subq	%r13, %rsi
 606 0758 40F6C601 		testb	$1, %sil
 607 075c 0F858401 		jne	.L114
 607      0000
 608 0762 4889F3   		movq	%rsi, %rbx
 609 0765 48D1EB   		shrq	%rbx
 610 0768 4889DF   		movq	%rbx, %rdi
 611 076b 48895C24 		movq	%rbx, 80(%rsp)
 611      50
 612 0770 E8000000 		call	malloc
 612      00
 613 0775 31C9     		xorl	%ecx, %ecx
 614 0777 4989C4   		movq	%rax, %r12
 615              	.L73:
 616 077a 4839D9   		cmpq	%rbx, %rcx
 617 077d 7450     		je	.L166
 618 077f 418A444D 		movb	0(%r13,%rcx,2), %al
 618      00
 619 0784 8D50D0   		leal	-48(%rax), %edx
 620 0787 80FA09   		cmpb	$9, %dl
 621 078a 7618     		jbe	.L74
 622 078c 8D509F   		leal	-97(%rax), %edx
 623 078f 80FA05   		cmpb	$5, %dl
 624 0792 7705     		ja	.L75
 625 0794 8D50A9   		leal	-87(%rax), %edx
 626 0797 EB0B     		jmp	.L74
 627              	.L75:
 628 0799 8D50BF   		leal	-65(%rax), %edx
 629 079c 80FA05   		cmpb	$5, %dl
 630 079f 7726     		ja	.L76
 631 07a1 8D50C9   		leal	-55(%rax), %edx
 632              	.L74:
 633 07a4 418A744D 		movb	1(%r13,%rcx,2), %sil
 633      01
 634 07a9 8D46D0   		leal	-48(%rsi), %eax
 635 07ac 3C09     		cmpb	$9, %al
 636 07ae 760E     		jbe	.L78
 637 07b0 8D469F   		leal	-97(%rsi), %eax
 638 07b3 3C05     		cmpb	$5, %al
 639 07b5 0F876304 		ja	.L77
 639      0000
 640 07bb 8D46A9   		leal	-87(%rsi), %eax
 641              	.L78:
 642 07be C1E204   		sall	$4, %edx
 643 07c1 09D0     		orl	%edx, %eax
 644 07c3 4188040C 		movb	%al, (%r12,%rcx)
 645              	.L76:
 646 07c7 48FFC1   		incq	%rcx
 647 07ca 41B601   		movb	$1, %r14b
 648 07cd EBAB     		jmp	.L73
 649              	.L166:
 650 07cf 4801C9   		addq	%rcx, %rcx
 651 07d2 4901CD   		addq	%rcx, %r13
 652 07d5 4584F6   		testb	%r14b, %r14b
 653 07d8 7407     		je	.L80
 654 07da 4C892D00 		movq	%r13, ptr(%rip)
 654      000000
 655              	.L80:
 656 07e1 488D7C24 		leaq	96(%rsp), %rdi
 656      60
 657 07e6 31F6     		xorl	%esi, %esi
 658 07e8 E8000000 		call	gettimeofday
 658      00
 659 07ed 4C8B0424 		movq	(%rsp), %r8
 660 07f1 488B5424 		movq	80(%rsp), %rdx
 660      50
 661 07f6 4C89E1   		movq	%r12, %rcx
 662 07f9 488B7C24 		movq	8(%rsp), %rdi
 662      08
 663 07fe 89EE     		movl	%ebp, %esi
 664 0800 E8000000 		call	flWriteChannel
 664      00
 665 0805 488D7C24 		leaq	112(%rsp), %rdi
 665      70
 666 080a 31F6     		xorl	%esi, %esi
 667 080c 89C3     		movl	%eax, %ebx
 668 080e E8000000 		call	gettimeofday
 668      00
 669 0813 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 669      000000
 670 081a 0F848D00 		je	.L81
 670      0000
 671 0820 488B5424 		movq	80(%rsp), %rdx
 671      50
 672 0825 31C0     		xorl	%eax, %eax
 673 0827 31C9     		xorl	%ecx, %ecx
 674              	.L82:
 675 0829 4839C2   		cmpq	%rax, %rdx
 676 082c 740C     		je	.L167
 677 082e 410FB634 		movzbl	(%r12,%rax), %esi
 677      04
 678 0833 48FFC0   		incq	%rax
 679 0836 01F1     		addl	%esi, %ecx
 680 0838 EBEF     		jmp	.L82
 681              	.L167:
 682 083a 48694424 		imulq	$1000000, 112(%rsp), %rax
 682      7040420F 
 682      00
 683 0843 48697424 		imulq	$1000000, 96(%rsp), %rsi
 683      6040420F 
 683      00
 684 084c 48034424 		addq	120(%rsp), %rax
 684      78
 685 0851 48037424 		addq	104(%rsp), %rsi
 685      68
 686 0856 4829F0   		subq	%rsi, %rax
 687 0859 4885D2   		testq	%rdx, %rdx
 688 085c F2480F2A 		cvtsi2sdq	%rax, %xmm1
 688      C8
 689 0861 7807     		js	.L84
 690 0863 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 690      C2
 691 0868 EB18     		jmp	.L85
 692              	.L84:
 693 086a 4889D0   		movq	%rdx, %rax
 694 086d 4889D6   		movq	%rdx, %rsi
 695 0870 48D1E8   		shrq	%rax
 696 0873 83E601   		andl	$1, %esi
 697 0876 4809F0   		orq	%rsi, %rax
 698 0879 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 698      C0
 699 087e F20F58C0 		addsd	%xmm0, %xmm0
 700              	.L85:
 701 0882 F20F5E0D 		divsd	.LC4(%rip), %xmm1
 701      00000000 
 702 088a 0FB7C9   		movzwl	%cx, %ecx
 703 088d 4989E8   		movq	%rbp, %r8
 704 0890 BE000000 		movl	$.LC9, %esi
 704      00
 705 0895 BF010000 		movl	$1, %edi
 705      00
 706 089a B001     		movb	$1, %al
 707 089c F20F590D 		mulsd	.LC5(%rip), %xmm1
 707      00000000 
 708 08a4 F20F5EC1 		divsd	%xmm1, %xmm0
 709 08a8 E8000000 		call	__printf_chk
 709      00
 710              	.L81:
 711 08ad 85DB     		testl	%ebx, %ebx
 712 08af 7549     		jne	.L115
 713 08b1 4C89E7   		movq	%r12, %rdi
 714 08b4 E8000000 		call	free
 714      00
 715 08b9 E9440100 		jmp	.L57
 715      00
 716              	.L107:
 717 08be 4531FF   		xorl	%r15d, %r15d
 718 08c1 4531F6   		xorl	%r14d, %r14d
 719 08c4 4531E4   		xorl	%r12d, %r12d
 720 08c7 41BD0200 		movl	$2, %r13d
 720      0000
 721 08cd E98A0100 		jmp	.L18
 721      00
 722              	.L108:
 723 08d2 4531FF   		xorl	%r15d, %r15d
 724 08d5 4531F6   		xorl	%r14d, %r14d
 725 08d8 4531E4   		xorl	%r12d, %r12d
 726 08db 41BD0300 		movl	$3, %r13d
 726      0000
 727 08e1 E9760100 		jmp	.L18
 727      00
 728              	.L114:
 729 08e6 4531FF   		xorl	%r15d, %r15d
 730 08e9 4531F6   		xorl	%r14d, %r14d
 731 08ec 4531E4   		xorl	%r12d, %r12d
 732 08ef 41BD0900 		movl	$9, %r13d
 732      0000
 733 08f5 E9620100 		jmp	.L18
 733      00
 734              	.L115:
 735 08fa 4531FF   		xorl	%r15d, %r15d
 736 08fd 4531F6   		xorl	%r14d, %r14d
 737 0900 41BD0100 		movl	$1, %r13d
 737      0000
 738 0906 E9510100 		jmp	.L18
 738      00
 739              	.L162:
 740 090b 488D5F01 		leaq	1(%rdi), %rbx
 741 090f 48891D00 		movq	%rbx, ptr(%rip)
 741      000000
 742 0916 E8000000 		call	__errno_location
 742      00
 743 091b 488D7424 		leaq	88(%rsp), %rsi
 743      58
 744 0920 4889C5   		movq	%rax, %rbp
 745 0923 C7000000 		movl	$0, (%rax)
 745      0000
 746 0929 BA100000 		movl	$16, %edx
 746      00
 747 092e 4889DF   		movq	%rbx, %rdi
 748 0931 E8000000 		call	strtoul
 748      00
 749 0936 837D0000 		cmpl	$0, 0(%rbp)
 750 093a 753F     		jne	.L116
 751 093c 3DFF0000 		cmpl	$255, %eax
 751      00
 752 0941 7740     		ja	.L117
 753 0943 488B5424 		movq	88(%rsp), %rdx
 753      58
 754 0948 48891500 		movq	%rdx, ptr(%rip)
 754      000000
 755 094f 8A12     		movb	(%rdx), %dl
 756 0951 84D2     		testb	%dl, %dl
 757 0953 7405     		je	.L122
 758 0955 80FA3B   		cmpb	$59, %dl
 759 0958 7531     		jne	.L118
 760              	.L122:
 761 095a 488B1424 		movq	(%rsp), %rdx
 762 095e 488B7C24 		movq	8(%rsp), %rdi
 762      08
 763 0963 0FB6F0   		movzbl	%al, %esi
 764 0966 E8000000 		call	flSelectConduit
 764      00
 765 096b 85C0     		testl	%eax, %eax
 766 096d 0F848F00 		je	.L57
 766      0000
 767 0973 41BD0100 		movl	$1, %r13d
 767      0000
 768 0979 EB16     		jmp	.L86
 769              	.L116:
 770 097b 41BD0200 		movl	$2, %r13d
 770      0000
 771 0981 EB0E     		jmp	.L86
 772              	.L117:
 773 0983 41BD0400 		movl	$4, %r13d
 773      0000
 774 0989 EB06     		jmp	.L86
 775              	.L118:
 776 098b 41BD0500 		movl	$5, %r13d
 776      0000
 777              	.L86:
 778 0991 4531FF   		xorl	%r15d, %r15d
 779 0994 4531F6   		xorl	%r14d, %r14d
 780 0997 4531E4   		xorl	%r12d, %r12d
 781 099a E9BD0000 		jmp	.L18
 781      00
 782              	.L170:
 783 099f 4C697C24 		imulq	$1000000, 40(%rsp), %r15
 783      2840420F 
 783      00
 784 09a8 48694424 		imulq	$1000000, 24(%rsp), %rax
 784      1840420F 
 784      00
 785 09b1 0FB7C9   		movzwl	%cx, %ecx
 786 09b4 4589E0   		movl	%r12d, %r8d
 787 09b7 4489EA   		movl	%r13d, %edx
 788 09ba BE000000 		movl	$.LC6, %esi
 788      00
 789 09bf BF010000 		movl	$1, %edi
 789      00
 790 09c4 4C037C24 		addq	48(%rsp), %r15
 790      30
 791 09c9 48034424 		addq	32(%rsp), %rax
 791      20
 792 09ce 4929C7   		subq	%rax, %r15
 793 09d1 4489E8   		movl	%r13d, %eax
 794 09d4 F2490F2A 		cvtsi2sdq	%r15, %xmm1
 794      CF
 795 09d9 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 795      C0
 796 09de B001     		movb	$1, %al
 797 09e0 F20F5E0D 		divsd	.LC4(%rip), %xmm1
 797      00000000 
 798 09e8 F20F590D 		mulsd	.LC5(%rip), %xmm1
 798      00000000 
 799 09f0 F20F5EC1 		divsd	%xmm1, %xmm0
 800 09f4 E8000000 		call	__printf_chk
 800      00
 801              	.L52:
 802 09f9 4585F6   		testl	%r14d, %r14d
 803 09fc 0F850B02 		jne	.L94
 803      0000
 804              	.L57:
 805 0a02 488B0500 		movq	ptr(%rip), %rax
 805      000000
 806 0a09 8A00     		movb	(%rax), %al
 807 0a0b 3C3B     		cmpb	$59, %al
 808 0a0d 0F8458F7 		je	.L19
 808      FFFF
 809 0a13 84C0     		testb	%al, %al
 810 0a15 7536     		jne	.L119
 811 0a17 488B9424 		movq	136(%rsp), %rdx
 811      88000000 
 812 0a1f 488BB424 		movq	128(%rsp), %rsi
 812      80000000 
 813 0a27 31FF     		xorl	%edi, %edi
 814 0a29 4531FF   		xorl	%r15d, %r15d
 815 0a2c 4531F6   		xorl	%r14d, %r14d
 816 0a2f 4531E4   		xorl	%r12d, %r12d
 817 0a32 4531ED   		xorl	%r13d, %r13d
 818 0a35 E8000000 		call	dump
 818      00
 819 0a3a EB20     		jmp	.L18
 820              	.L98:
 821 0a3c 4531FF   		xorl	%r15d, %r15d
 822 0a3f 4531F6   		xorl	%r14d, %r14d
 823 0a42 4531E4   		xorl	%r12d, %r12d
 824 0a45 41BD0100 		movl	$1, %r13d
 824      0000
 825 0a4b EB0F     		jmp	.L18
 826              	.L119:
 827 0a4d 4531FF   		xorl	%r15d, %r15d
 828 0a50 4531F6   		xorl	%r14d, %r14d
 829 0a53 4531E4   		xorl	%r12d, %r12d
 830 0a56 41BD0500 		movl	$5, %r13d
 830      0000
 831              	.L18:
 832 0a5c 488DBC24 		leaq	128(%rsp), %rdi
 832      80000000 
 833 0a64 E8000000 		call	bufDestroy
 833      00
 834 0a69 4D85FF   		testq	%r15, %r15
 835 0a6c 7408     		je	.L90
 836 0a6e 4C89FF   		movq	%r15, %rdi
 837 0a71 E8000000 		call	fclose
 837      00
 838              	.L90:
 839 0a76 4C89F7   		movq	%r14, %rdi
 840 0a79 E8000000 		call	free
 840      00
 841 0a7e 4C89E7   		movq	%r12, %rdi
 842 0a81 E8000000 		call	free
 842      00
 843 0a86 4183FD01 		cmpl	$1, %r13d
 844 0a8a 7671     		jbe	.L91
 845 0a8c 4C8B0500 		movq	ptr(%rip), %r8
 845      000000
 846 0a93 4489E8   		movl	%r13d, %eax
 847 0a96 4C2B4424 		subq	16(%rsp), %r8
 847      10
 848 0a9b 488B0CC5 		movq	errMessages(,%rax,8), %rcx
 848      00000000 
 849 0aa3 4C8B4C24 		movq	16(%rsp), %r9
 849      10
 850 0aa8 BA000000 		movl	$.LC10, %edx
 850      00
 851 0aad 488B3D00 		movq	stderr(%rip), %rdi
 851      000000
 852 0ab4 BE010000 		movl	$1, %esi
 852      00
 853 0ab9 31C0     		xorl	%eax, %eax
 854 0abb 31DB     		xorl	%ebx, %ebx
 855 0abd 4489C5   		movl	%r8d, %ebp
 856 0ac0 E8000000 		call	__fprintf_chk
 856      00
 857              	.L92:
 858 0ac5 39EB     		cmpl	%ebp, %ebx
 859 0ac7 7D1C     		jge	.L168
 860 0ac9 488B3D00 		movq	stderr(%rip), %rdi
 860      000000
 861 0ad0 BA000000 		movl	$.LC11, %edx
 861      00
 862 0ad5 BE010000 		movl	$1, %esi
 862      00
 863 0ada 31C0     		xorl	%eax, %eax
 864 0adc FFC3     		incl	%ebx
 865 0ade E8000000 		call	__fprintf_chk
 865      00
 866 0ae3 EBE0     		jmp	.L92
 867              	.L168:
 868 0ae5 488B3D00 		movq	stderr(%rip), %rdi
 868      000000
 869 0aec BA000000 		movl	$.LC12, %edx
 869      00
 870 0af1 BE010000 		movl	$1, %esi
 870      00
 871 0af6 31C0     		xorl	%eax, %eax
 872 0af8 E8000000 		call	__fprintf_chk
 872      00
 873              	.L91:
 874 0afd 488B8C24 		movq	168(%rsp), %rcx
 874      A8000000 
 875 0b05 6448330C 		xorq	%fs:40, %rcx
 875      25280000 
 875      00
 876 0b0e 4489E8   		movl	%r13d, %eax
 877 0b11 0F841A01 		je	.L97
 877      0000
 878 0b17 E8000000 		call	__stack_chk_fail
 878      00
 879              	.L27:
 880 0b1c 488B0C24 		movq	(%rsp), %rcx
 881 0b20 4489ED   		movl	%r13d, %ebp
 882 0b23 488DBC24 		leaq	128(%rsp), %rdi
 882      80000000 
 883 0b2b 31F6     		xorl	%esi, %esi
 884 0b2d 4889EA   		movq	%rbp, %rdx
 885 0b30 488B9C24 		movq	136(%rsp), %rbx
 885      88000000 
 886 0b38 E8000000 		call	bufAppendConst
 886      00
 887 0b3d 85C0     		testl	%eax, %eax
 888 0b3f 0F85C800 		jne	.L94
 888      0000
 889 0b45 488D7C24 		leaq	96(%rsp), %rdi
 889      60
 890 0b4a 31F6     		xorl	%esi, %esi
 891 0b4c 4531FF   		xorl	%r15d, %r15d
 892 0b4f E8000000 		call	gettimeofday
 892      00
 893 0b54 4889D9   		movq	%rbx, %rcx
 894 0b57 48038C24 		addq	128(%rsp), %rcx
 894      80000000 
 895 0b5f 4C8B0424 		movq	(%rsp), %r8
 896 0b63 488B7C24 		movq	8(%rsp), %rdi
 896      08
 897 0b68 410FB6F4 		movzbl	%r12b, %esi
 898 0b6c 4889EA   		movq	%rbp, %rdx
 899 0b6f E8000000 		call	flReadChannel
 899      00
 900 0b74 488D7C24 		leaq	112(%rsp), %rdi
 900      70
 901 0b79 31F6     		xorl	%esi, %esi
 902 0b7b 4189C6   		movl	%eax, %r14d
 903 0b7e E8000000 		call	gettimeofday
 903      00
 904 0b83 488B4424 		movq	96(%rsp), %rax
 904      60
 905 0b88 4989D8   		movq	%rbx, %r8
 906 0b8b 4C038424 		addq	128(%rsp), %r8
 906      80000000 
 907 0b93 48894424 		movq	%rax, 24(%rsp)
 907      18
 908 0b98 488B4424 		movq	104(%rsp), %rax
 908      68
 909 0b9d 48894424 		movq	%rax, 32(%rsp)
 909      20
 910 0ba2 488B4424 		movq	112(%rsp), %rax
 910      70
 911 0ba7 48894424 		movq	%rax, 40(%rsp)
 911      28
 912 0bac 488B4424 		movq	120(%rsp), %rax
 912      78
 913 0bb1 48894424 		movq	%rax, 48(%rsp)
 913      30
 914              	.L50:
 915 0bb6 4C39FD   		cmpq	%r15, %rbp
 916 0bb9 7425     		je	.L169
 917 0bbb 430FB614 		movzbl	(%r8,%r15), %edx
 917      38
 918 0bc0 BE000000 		movl	$.LC7, %esi
 918      00
 919 0bc5 BF010000 		movl	$1, %edi
 919      00
 920 0bca 31C0     		xorl	%eax, %eax
 921 0bcc 4C894424 		movq	%r8, 56(%rsp)
 921      38
 922 0bd1 49FFC7   		incq	%r15
 923 0bd4 E8000000 		call	__printf_chk
 923      00
 924 0bd9 4C8B4424 		movq	56(%rsp), %r8
 924      38
 925 0bde EBD6     		jmp	.L50
 926              	.L169:
 927 0be0 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 927      000000
 928 0be7 0F840CFE 		je	.L52
 928      FFFF
 929 0bed 48039C24 		addq	128(%rsp), %rbx
 929      80000000 
 930 0bf5 31C0     		xorl	%eax, %eax
 931 0bf7 31C9     		xorl	%ecx, %ecx
 932              	.L53:
 933 0bf9 4839C5   		cmpq	%rax, %rbp
 934 0bfc 0F849DFD 		je	.L170
 934      FFFF
 935 0c02 0FB61403 		movzbl	(%rbx,%rax), %edx
 936 0c06 48FFC0   		incq	%rax
 937 0c09 01D1     		addl	%edx, %ecx
 938 0c0b EBEC     		jmp	.L53
 939              	.L94:
 940 0c0d 4531FF   		xorl	%r15d, %r15d
 941 0c10 4531F6   		xorl	%r14d, %r14d
 942 0c13 41BD0100 		movl	$1, %r13d
 942      0000
 943 0c19 E9FCFAFF 		jmp	.L64
 943      FF
 944              	.L77:
 945 0c1e 8D46BF   		leal	-65(%rsi), %eax
 946 0c21 3C05     		cmpb	$5, %al
 947 0c23 0F879EFB 		ja	.L76
 947      FFFF
 948 0c29 8D46C9   		leal	-55(%rsi), %eax
 949 0c2c E98DFBFF 		jmp	.L78
 949      FF
 950              	.L97:
 951 0c31 4881C4B8 		addq	$184, %rsp
 951      000000
 952              		.cfi_def_cfa_offset 56
 953 0c38 5B       		popq	%rbx
 954              		.cfi_def_cfa_offset 48
 955 0c39 5D       		popq	%rbp
 956              		.cfi_def_cfa_offset 40
 957 0c3a 415C     		popq	%r12
 958              		.cfi_def_cfa_offset 32
 959 0c3c 415D     		popq	%r13
 960              		.cfi_def_cfa_offset 24
 961 0c3e 415E     		popq	%r14
 962              		.cfi_def_cfa_offset 16
 963 0c40 415F     		popq	%r15
 964              		.cfi_def_cfa_offset 8
 965 0c42 C3       		ret
 966              		.cfi_endproc
 967              	.LFE69:
 969              	.LCOLDE13:
 970              	.LHOTE13:
 971              	.LCOLDB14:
 972              		.text
 973              	.LHOTB14:
 974              		.p2align 4,,15
 975              		.globl	pow
 977              	pow:
 978              	.LFB54:
 979              		.cfi_startproc
 980 0000 89F1     		movl	%esi, %ecx
 981 0002 B8010000 		movl	$1, %eax
 981      00
 982 0007 D3E0     		sall	%cl, %eax
 983 0009 C3       		ret
 984              		.cfi_endproc
 985              	.LFE54:
 987              		.section	.text.unlikely
 988              	.LCOLDE14:
 989              		.text
 990              	.LHOTE14:
 991              		.section	.text.unlikely
 992              	.LCOLDB15:
 993              		.text
 994              	.LHOTB15:
 995 000a 660F1F44 		.p2align 4,,15
 995      0000
 996              		.globl	unsignedtouint8
 998              	unsignedtouint8:
 999              	.LFB55:
 1000              		.cfi_startproc
 1001 0010 8B07     		movl	(%rdi), %eax
 1002 0012 8806     		movb	%al, (%rsi)
 1003 0014 8B4704   		movl	4(%rdi), %eax
 1004 0017 884601   		movb	%al, 1(%rsi)
 1005 001a 8B4708   		movl	8(%rdi), %eax
 1006 001d 884602   		movb	%al, 2(%rsi)
 1007 0020 8B470C   		movl	12(%rdi), %eax
 1008 0023 884603   		movb	%al, 3(%rsi)
 1009 0026 C3       		ret
 1010              		.cfi_endproc
 1011              	.LFE55:
 1013              		.section	.text.unlikely
 1014              	.LCOLDE15:
 1015              		.text
 1016              	.LHOTE15:
 1017              		.section	.text.unlikely
 1018              	.LCOLDB16:
 1019              		.text
 1020              	.LHOTB16:
 1021 0027 660F1F84 		.p2align 4,,15
 1021      00000000 
 1021      00
 1022              		.globl	uint8tounsigned
 1024              	uint8tounsigned:
 1025              	.LFB56:
 1026              		.cfi_startproc
 1027 0030 0FB607   		movzbl	(%rdi), %eax
 1028 0033 8906     		movl	%eax, (%rsi)
 1029 0035 0FB64701 		movzbl	1(%rdi), %eax
 1030 0039 894604   		movl	%eax, 4(%rsi)
 1031 003c 0FB64702 		movzbl	2(%rdi), %eax
 1032 0040 894608   		movl	%eax, 8(%rsi)
 1033 0043 0FB64703 		movzbl	3(%rdi), %eax
 1034 0047 89460C   		movl	%eax, 12(%rsi)
 1035 004a C3       		ret
 1036              		.cfi_endproc
 1037              	.LFE56:
 1039              		.section	.text.unlikely
 1040              	.LCOLDE16:
 1041              		.text
 1042              	.LHOTE16:
 1043              		.section	.rodata.str1.1
 1044              	.LC17:
 1045 003d 7200     		.string	"r"
 1046              		.section	.rodata.str1.8
 1047 007e 0000     		.align 8
 1048              	.LC18:
 1049 0080 2F686F6D 		.string	"/home/aditya/Downloads/track_data.csv"
 1049      652F6164 
 1049      69747961 
 1049      2F446F77 
 1049      6E6C6F61 
 1050              		.section	.rodata.str1.1
 1051              	.LC19:
 1052 003f 7700     		.string	"w"
 1053              		.section	.rodata.str1.8
 1054 00a6 0000     		.align 8
 1055              	.LC20:
 1056 00a8 2F686F6D 		.string	"/home/aditya/Downloads/updated.csv"
 1056      652F6164 
 1056      69747961 
 1056      2F446F77 
 1056      6E6C6F61 
 1057              		.section	.text.unlikely
 1058              	.LCOLDB21:
 1059              		.text
 1060              	.LHOTB21:
 1061 004b 0F1F4400 		.p2align 4,,15
 1061      00
 1062              		.globl	csvupdater
 1064              	csvupdater:
 1065              	.LFB57:
 1066              		.cfi_startproc
 1067 0050 4157     		pushq	%r15
 1068              		.cfi_def_cfa_offset 16
 1069              		.cfi_offset 15, -16
 1070 0052 4156     		pushq	%r14
 1071              		.cfi_def_cfa_offset 24
 1072              		.cfi_offset 14, -24
 1073 0054 4531FF   		xorl	%r15d, %r15d
 1074 0057 4155     		pushq	%r13
 1075              		.cfi_def_cfa_offset 32
 1076              		.cfi_offset 13, -32
 1077 0059 4154     		pushq	%r12
 1078              		.cfi_def_cfa_offset 40
 1079              		.cfi_offset 12, -40
 1080 005b 4189F4   		movl	%esi, %r12d
 1081 005e 55       		pushq	%rbp
 1082              		.cfi_def_cfa_offset 48
 1083              		.cfi_offset 6, -48
 1084 005f 53       		pushq	%rbx
 1085              		.cfi_def_cfa_offset 56
 1086              		.cfi_offset 3, -56
 1087 0060 89FD     		movl	%edi, %ebp
 1088 0062 C1ED04   		shrl	$4, %ebp
 1089 0065 41C1EC05 		shrl	$5, %r12d
 1090 0069 89FB     		movl	%edi, %ebx
 1091 006b 4883EC48 		subq	$72, %rsp
 1092              		.cfi_def_cfa_offset 128
 1093 006f 83E30F   		andl	$15, %ebx
 1094 0072 64488B04 		movq	%fs:40, %rax
 1094      25280000 
 1094      00
 1095 007b 48894424 		movq	%rax, 56(%rsp)
 1095      38
 1096 0080 31C0     		xorl	%eax, %eax
 1097 0082 89E8     		movl	%ebp, %eax
 1098 0084 83E008   		andl	$8, %eax
 1099 0087 89C2     		movl	%eax, %edx
 1100 0089 89E8     		movl	%ebp, %eax
 1101 008b 83E501   		andl	$1, %ebp
 1102 008e 83E004   		andl	$4, %eax
 1103 0091 01D0     		addl	%edx, %eax
 1104 0093 89F2     		movl	%esi, %edx
 1105 0095 01E8     		addl	%ebp, %eax
 1106 0097 89FD     		movl	%edi, %ebp
 1107 0099 C1EA04   		shrl	$4, %edx
 1108 009c C1ED04   		shrl	$4, %ebp
 1109 009f BF000000 		movl	$.LC18, %edi
 1109      00
 1110 00a4 83E502   		andl	$2, %ebp
 1111 00a7 01C5     		addl	%eax, %ebp
 1112 00a9 89F0     		movl	%esi, %eax
 1113 00ab C1E803   		shrl	$3, %eax
 1114 00ae 21D0     		andl	%edx, %eax
 1115 00b0 83E001   		andl	$1, %eax
 1116 00b3 89442404 		movl	%eax, 4(%rsp)
 1117 00b7 89F0     		movl	%esi, %eax
 1118 00b9 4489E6   		movl	%r12d, %esi
 1119 00bc 83E007   		andl	$7, %eax
 1120 00bf 83E602   		andl	$2, %esi
 1121 00c2 89442408 		movl	%eax, 8(%rsp)
 1122 00c6 4489E0   		movl	%r12d, %eax
 1123 00c9 4183E401 		andl	$1, %r12d
 1124 00cd 83E004   		andl	$4, %eax
 1125 00d0 01C6     		addl	%eax, %esi
 1126 00d2 4101F4   		addl	%esi, %r12d
 1127 00d5 BE000000 		movl	$.LC17, %esi
 1127      00
 1128 00da E8000000 		call	fopen
 1128      00
 1129 00df BE000000 		movl	$.LC19, %esi
 1129      00
 1130 00e4 BF000000 		movl	$.LC20, %edi
 1130      00
 1131 00e9 4989C5   		movq	%rax, %r13
 1132 00ec E8000000 		call	fopen
 1132      00
 1133 00f1 4989C6   		movq	%rax, %r14
 1134 00f4 8D4530   		leal	48(%rbp), %eax
 1135 00f7 8844240D 		movb	%al, 13(%rsp)
 1136 00fb 8D4330   		leal	48(%rbx), %eax
 1137 00fe 8844240E 		movb	%al, 14(%rsp)
 1138 0102 418D4424 		leal	48(%r12), %eax
 1138      30
 1139 0107 8844240F 		movb	%al, 15(%rsp)
 1140 010b 0F1F4400 		.p2align 4,,10
 1140      00
 1141              		.p2align 3
 1142              	.L175:
 1143 0110 488D7C24 		leaq	16(%rsp), %rdi
 1143      10
 1144 0115 4C89EA   		movq	%r13, %rdx
 1145 0118 BE0A0000 		movl	$10, %esi
 1145      00
 1146 011d E8000000 		call	fgets
 1146      00
 1147 0122 4885C0   		testq	%rax, %rax
 1148 0125 0F84A500 		je	.L188
 1148      0000
 1149 012b 0FBE4424 		movsbl	16(%rsp), %eax
 1149      10
 1150 0130 83E830   		subl	$48, %eax
 1151 0133 39E8     		cmpl	%ebp, %eax
 1152 0135 0FBE4424 		movsbl	18(%rsp), %eax
 1152      12
 1153 013a 0F94C2   		sete	%dl
 1154 013d 83E830   		subl	$48, %eax
 1155 0140 39D8     		cmpl	%ebx, %eax
 1156 0142 0F94C0   		sete	%al
 1157 0145 84C2     		testb	%al, %dl
 1158 0147 746F     		je	.L176
 1159 0149 0FBE4424 		movsbl	20(%rsp), %eax
 1159      14
 1160 014e 83E830   		subl	$48, %eax
 1161 0151 4439E0   		cmpl	%r12d, %eax
 1162 0154 7562     		jne	.L176
 1163 0156 0FB64424 		movzbl	13(%rsp), %eax
 1163      0D
 1164 015b 488D7C24 		leaq	32(%rsp), %rdi
 1164      20
 1165 0160 4C89F6   		movq	%r14, %rsi
 1166 0163 C6442421 		movb	$44, 33(%rsp)
 1166      2C
 1167 0168 C6442423 		movb	$44, 35(%rsp)
 1167      2C
 1168 016d 41BF0100 		movl	$1, %r15d
 1168      0000
 1169 0173 C6442425 		movb	$44, 37(%rsp)
 1169      2C
 1170 0178 C6442427 		movb	$44, 39(%rsp)
 1170      2C
 1171 017d 88442420 		movb	%al, 32(%rsp)
 1172 0181 0FB64424 		movzbl	14(%rsp), %eax
 1172      0E
 1173 0186 88442422 		movb	%al, 34(%rsp)
 1174 018a 0FB64424 		movzbl	15(%rsp), %eax
 1174      0F
 1175 018f 88442424 		movb	%al, 36(%rsp)
 1176 0193 0FB64424 		movzbl	4(%rsp), %eax
 1176      04
 1177 0198 83C030   		addl	$48, %eax
 1178 019b 88442426 		movb	%al, 38(%rsp)
 1179 019f 0FB64424 		movzbl	8(%rsp), %eax
 1179      08
 1180 01a4 83C030   		addl	$48, %eax
 1181 01a7 88442428 		movb	%al, 40(%rsp)
 1182 01ab E8000000 		call	fputs
 1182      00
 1183 01b0 E95BFFFF 		jmp	.L175
 1183      FF
 1184              		.p2align 4,,10
 1185 01b5 0F1F00   		.p2align 3
 1186              	.L176:
 1187 01b8 488D7C24 		leaq	16(%rsp), %rdi
 1187      10
 1188 01bd 4C89F6   		movq	%r14, %rsi
 1189 01c0 E8000000 		call	fputs
 1189      00
 1190 01c5 E946FFFF 		jmp	.L175
 1190      FF
 1191 01ca 660F1F44 		.p2align 4,,10
 1191      0000
 1192              		.p2align 3
 1193              	.L188:
 1194 01d0 4585FF   		testl	%r15d, %r15d
 1195 01d3 7556     		jne	.L179
 1196 01d5 0FB64424 		movzbl	4(%rsp), %eax
 1196      04
 1197 01da 488D7C24 		leaq	32(%rsp), %rdi
 1197      20
 1198 01df 83C530   		addl	$48, %ebp
 1199 01e2 83C330   		addl	$48, %ebx
 1200 01e5 4183C430 		addl	$48, %r12d
 1201 01e9 4C89F6   		movq	%r14, %rsi
 1202 01ec 40886C24 		movb	%bpl, 32(%rsp)
 1202      20
 1203 01f1 C6442421 		movb	$44, 33(%rsp)
 1203      2C
 1204 01f6 885C2422 		movb	%bl, 34(%rsp)
 1205 01fa C6442423 		movb	$44, 35(%rsp)
 1205      2C
 1206 01ff 83C030   		addl	$48, %eax
 1207 0202 44886424 		movb	%r12b, 36(%rsp)
 1207      24
 1208 0207 C6442425 		movb	$44, 37(%rsp)
 1208      2C
 1209 020c 88442426 		movb	%al, 38(%rsp)
 1210 0210 0FB64424 		movzbl	8(%rsp), %eax
 1210      08
 1211 0215 C6442427 		movb	$44, 39(%rsp)
 1211      2C
 1212 021a C6442429 		movb	$10, 41(%rsp)
 1212      0A
 1213 021f 83C030   		addl	$48, %eax
 1214 0222 88442428 		movb	%al, 40(%rsp)
 1215 0226 E8000000 		call	fputs
 1215      00
 1216              	.L179:
 1217 022b 4C89EF   		movq	%r13, %rdi
 1218 022e E8000000 		call	fclose
 1218      00
 1219 0233 4C89F7   		movq	%r14, %rdi
 1220 0236 E8000000 		call	fclose
 1220      00
 1221 023b BF000000 		movl	$.LC18, %edi
 1221      00
 1222 0240 E8000000 		call	remove
 1222      00
 1223 0245 BE000000 		movl	$.LC18, %esi
 1223      00
 1224 024a BF000000 		movl	$.LC20, %edi
 1224      00
 1225 024f E8000000 		call	rename
 1225      00
 1226 0254 488B4424 		movq	56(%rsp), %rax
 1226      38
 1227 0259 64483304 		xorq	%fs:40, %rax
 1227      25280000 
 1227      00
 1228 0262 750F     		jne	.L189
 1229 0264 4883C448 		addq	$72, %rsp
 1230              		.cfi_remember_state
 1231              		.cfi_def_cfa_offset 56
 1232 0268 5B       		popq	%rbx
 1233              		.cfi_def_cfa_offset 48
 1234 0269 5D       		popq	%rbp
 1235              		.cfi_def_cfa_offset 40
 1236 026a 415C     		popq	%r12
 1237              		.cfi_def_cfa_offset 32
 1238 026c 415D     		popq	%r13
 1239              		.cfi_def_cfa_offset 24
 1240 026e 415E     		popq	%r14
 1241              		.cfi_def_cfa_offset 16
 1242 0270 415F     		popq	%r15
 1243              		.cfi_def_cfa_offset 8
 1244 0272 C3       		ret
 1245              	.L189:
 1246              		.cfi_restore_state
 1247 0273 E8000000 		call	__stack_chk_fail
 1247      00
 1248              		.cfi_endproc
 1249              	.LFE57:
 1251              		.section	.text.unlikely
 1252              	.LCOLDE21:
 1253              		.text
 1254              	.LHOTE21:
 1255              		.section	.text.unlikely
 1256              	.LCOLDB22:
 1257              		.text
 1258              	.LHOTB22:
 1259 0278 0F1F8400 		.p2align 4,,15
 1259      00000000 
 1260              		.globl	csvlooker
 1262              	csvlooker:
 1263              	.LFB58:
 1264              		.cfi_startproc
 1265 0280 4155     		pushq	%r13
 1266              		.cfi_def_cfa_offset 16
 1267              		.cfi_offset 13, -16
 1268 0282 4154     		pushq	%r12
 1269              		.cfi_def_cfa_offset 24
 1270              		.cfi_offset 12, -24
 1271 0284 4989F5   		movq	%rsi, %r13
 1272 0287 55       		pushq	%rbp
 1273              		.cfi_def_cfa_offset 32
 1274              		.cfi_offset 6, -32
 1275 0288 53       		pushq	%rbx
 1276              		.cfi_def_cfa_offset 40
 1277              		.cfi_offset 3, -40
 1278 0289 4189FC   		movl	%edi, %r12d
 1279 028c 89FB     		movl	%edi, %ebx
 1280 028e BE000000 		movl	$.LC17, %esi
 1280      00
 1281 0293 BF000000 		movl	$.LC18, %edi
 1281      00
 1282 0298 4881EC88 		subq	$392, %rsp
 1282      010000
 1283              		.cfi_def_cfa_offset 432
 1284 029f 4183E40F 		andl	$15, %r12d
 1285 02a3 C1EB04   		shrl	$4, %ebx
 1286 02a6 64488B04 		movq	%fs:40, %rax
 1286      25280000 
 1286      00
 1287 02af 48898424 		movq	%rax, 376(%rsp)
 1287      78010000 
 1288 02b7 31C0     		xorl	%eax, %eax
 1289 02b9 48C70424 		movq	$0, (%rsp)
 1289      00000000 
 1290 02c1 48C74424 		movq	$0, 8(%rsp)
 1290      08000000 
 1290      00
 1291 02ca 48C74424 		movq	$0, 16(%rsp)
 1291      10000000 
 1291      00
 1292 02d3 48C74424 		movq	$0, 24(%rsp)
 1292      18000000 
 1292      00
 1293 02dc E8000000 		call	fopen
 1293      00
 1294 02e1 4889C5   		movq	%rax, %rbp
 1295              		.p2align 4,,10
 1296 02e4 0F1F4000 		.p2align 3
 1297              	.L223:
 1298 02e8 488DBC24 		leaq	352(%rsp), %rdi
 1298      60010000 
 1299 02f0 4889EA   		movq	%rbp, %rdx
 1300 02f3 BE0F0000 		movl	$15, %esi
 1300      00
 1301 02f8 E8000000 		call	fgets
 1301      00
 1302 02fd 4885C0   		testq	%rax, %rax
 1303 0300 7456     		je	.L228
 1304 0302 0FBE8424 		movsbl	352(%rsp), %eax
 1304      60010000 
 1305 030a 83E830   		subl	$48, %eax
 1306 030d 39D8     		cmpl	%ebx, %eax
 1307 030f 75D7     		jne	.L223
 1308 0311 0FBE8424 		movsbl	354(%rsp), %eax
 1308      62010000 
 1309 0319 83E830   		subl	$48, %eax
 1310 031c 4439E0   		cmpl	%r12d, %eax
 1311 031f 75C7     		jne	.L223
 1312 0321 0FBE8424 		movsbl	356(%rsp), %eax
 1312      64010000 
 1313 0329 0FBE9424 		movsbl	358(%rsp), %edx
 1313      66010000 
 1314 0331 83E830   		subl	$48, %eax
 1315 0334 83EA30   		subl	$48, %edx
 1316 0337 4898     		cltq
 1317 0339 89548420 		movl	%edx, 32(%rsp,%rax,4)
 1318 033d 0FBE9424 		movsbl	360(%rsp), %edx
 1318      68010000 
 1319 0345 C7048401 		movl	$1, (%rsp,%rax,4)
 1319      000000
 1320 034c 83EA30   		subl	$48, %edx
 1321 034f 89548440 		movl	%edx, 64(%rsp,%rax,4)
 1322 0353 EB93     		jmp	.L223
 1323              		.p2align 4,,10
 1324 0355 0F1F00   		.p2align 3
 1325              	.L228:
 1326 0358 448B1424 		movl	(%rsp), %r10d
 1327 035c 4585D2   		testl	%r10d, %r10d
 1328 035f 0F84EB08 		je	.L194
 1328      0000
 1329 0365 8B442420 		movl	32(%rsp), %eax
 1330 0369 448B4C24 		movl	4(%rsp), %r9d
 1330      04
 1331 036e C7442460 		movl	$1, 96(%rsp)
 1331      01000000 
 1332 0376 C7442470 		movl	$0, 112(%rsp)
 1332      00000000 
 1333 037e C744246C 		movl	$0, 108(%rsp)
 1333      00000000 
 1334 0386 C7442468 		movl	$0, 104(%rsp)
 1334      00000000 
 1335 038e 89442464 		movl	%eax, 100(%rsp)
 1336 0392 8B442440 		movl	64(%rsp), %eax
 1337 0396 89C2     		movl	%eax, %edx
 1338 0398 83E201   		andl	$1, %edx
 1339 039b 8954247C 		movl	%edx, 124(%rsp)
 1340 039f 89C2     		movl	%eax, %edx
 1341 03a1 C1E802   		shrl	$2, %eax
 1342 03a4 D1EA     		shrl	%edx
 1343 03a6 89442474 		movl	%eax, 116(%rsp)
 1344 03aa 83E201   		andl	$1, %edx
 1345 03ad 4585C9   		testl	%r9d, %r9d
 1346 03b0 89542478 		movl	%edx, 120(%rsp)
 1347 03b4 0F84E408 		je	.L196
 1347      0000
 1348              	.L230:
 1349 03ba 8B442424 		movl	36(%rsp), %eax
 1350 03be 448B4424 		movl	8(%rsp), %r8d
 1350      08
 1351 03c3 C7842480 		movl	$1, 128(%rsp)
 1351      00000001 
 1351      000000
 1352 03ce C7842490 		movl	$1, 144(%rsp)
 1352      00000001 
 1352      000000
 1353 03d9 C784248C 		movl	$0, 140(%rsp)
 1353      00000000 
 1353      000000
 1354 03e4 C7842488 		movl	$0, 136(%rsp)
 1354      00000000 
 1354      000000
 1355 03ef 89842484 		movl	%eax, 132(%rsp)
 1355      000000
 1356 03f6 8B442444 		movl	68(%rsp), %eax
 1357 03fa 89C2     		movl	%eax, %edx
 1358 03fc 83E201   		andl	$1, %edx
 1359 03ff 8994249C 		movl	%edx, 156(%rsp)
 1359      000000
 1360 0406 89C2     		movl	%eax, %edx
 1361 0408 C1E802   		shrl	$2, %eax
 1362 040b D1EA     		shrl	%edx
 1363 040d 89842494 		movl	%eax, 148(%rsp)
 1363      000000
 1364 0414 83E201   		andl	$1, %edx
 1365 0417 4585C0   		testl	%r8d, %r8d
 1366 041a 89942498 		movl	%edx, 152(%rsp)
 1366      000000
 1367 0421 0F84DD08 		je	.L198
 1367      0000
 1368              	.L231:
 1369 0427 8B442428 		movl	40(%rsp), %eax
 1370 042b 8B7C240C 		movl	12(%rsp), %edi
 1371 042f C78424A0 		movl	$1, 160(%rsp)
 1371      00000001 
 1371      000000
 1372 043a C78424B0 		movl	$0, 176(%rsp)
 1372      00000000 
 1372      000000
 1373 0445 C78424AC 		movl	$1, 172(%rsp)
 1373      00000001 
 1373      000000
 1374 0450 C78424A8 		movl	$0, 168(%rsp)
 1374      00000000 
 1374      000000
 1375 045b 898424A4 		movl	%eax, 164(%rsp)
 1375      000000
 1376 0462 8B442448 		movl	72(%rsp), %eax
 1377 0466 89C2     		movl	%eax, %edx
 1378 0468 83E201   		andl	$1, %edx
 1379 046b 899424BC 		movl	%edx, 188(%rsp)
 1379      000000
 1380 0472 89C2     		movl	%eax, %edx
 1381 0474 C1E802   		shrl	$2, %eax
 1382 0477 D1EA     		shrl	%edx
 1383 0479 898424B4 		movl	%eax, 180(%rsp)
 1383      000000
 1384 0480 83E201   		andl	$1, %edx
 1385 0483 85FF     		testl	%edi, %edi
 1386 0485 899424B8 		movl	%edx, 184(%rsp)
 1386      000000
 1387 048c 0F84D608 		je	.L200
 1387      0000
 1388              	.L232:
 1389 0492 8B44242C 		movl	44(%rsp), %eax
 1390 0496 8B742410 		movl	16(%rsp), %esi
 1391 049a C78424C0 		movl	$1, 192(%rsp)
 1391      00000001 
 1391      000000
 1392 04a5 C78424D0 		movl	$1, 208(%rsp)
 1392      00000001 
 1392      000000
 1393 04b0 C78424CC 		movl	$1, 204(%rsp)
 1393      00000001 
 1393      000000
 1394 04bb C78424C8 		movl	$0, 200(%rsp)
 1394      00000000 
 1394      000000
 1395 04c6 898424C4 		movl	%eax, 196(%rsp)
 1395      000000
 1396 04cd 8B44244C 		movl	76(%rsp), %eax
 1397 04d1 89C2     		movl	%eax, %edx
 1398 04d3 83E201   		andl	$1, %edx
 1399 04d6 899424DC 		movl	%edx, 220(%rsp)
 1399      000000
 1400 04dd 89C2     		movl	%eax, %edx
 1401 04df C1E802   		shrl	$2, %eax
 1402 04e2 D1EA     		shrl	%edx
 1403 04e4 898424D4 		movl	%eax, 212(%rsp)
 1403      000000
 1404 04eb 83E201   		andl	$1, %edx
 1405 04ee 85F6     		testl	%esi, %esi
 1406 04f0 899424D8 		movl	%edx, 216(%rsp)
 1406      000000
 1407 04f7 0F84CF08 		je	.L202
 1407      0000
 1408              	.L233:
 1409 04fd 8B442430 		movl	48(%rsp), %eax
 1410 0501 8B4C2414 		movl	20(%rsp), %ecx
 1411 0505 C78424E0 		movl	$1, 224(%rsp)
 1411      00000001 
 1411      000000
 1412 0510 C78424F0 		movl	$0, 240(%rsp)
 1412      00000000 
 1412      000000
 1413 051b C78424EC 		movl	$0, 236(%rsp)
 1413      00000000 
 1413      000000
 1414 0526 C78424E8 		movl	$1, 232(%rsp)
 1414      00000001 
 1414      000000
 1415 0531 898424E4 		movl	%eax, 228(%rsp)
 1415      000000
 1416 0538 8B442450 		movl	80(%rsp), %eax
 1417 053c 89C2     		movl	%eax, %edx
 1418 053e 83E201   		andl	$1, %edx
 1419 0541 899424FC 		movl	%edx, 252(%rsp)
 1419      000000
 1420 0548 89C2     		movl	%eax, %edx
 1421 054a C1E802   		shrl	$2, %eax
 1422 054d D1EA     		shrl	%edx
 1423 054f 898424F4 		movl	%eax, 244(%rsp)
 1423      000000
 1424 0556 83E201   		andl	$1, %edx
 1425 0559 85C9     		testl	%ecx, %ecx
 1426 055b 899424F8 		movl	%edx, 248(%rsp)
 1426      000000
 1427 0562 0F84C808 		je	.L204
 1427      0000
 1428              	.L234:
 1429 0568 8B442434 		movl	52(%rsp), %eax
 1430 056c C7842400 		movl	$1, 256(%rsp)
 1430      01000001 
 1430      000000
 1431 0577 C7842410 		movl	$1, 272(%rsp)
 1431      01000001 
 1431      000000
 1432 0582 C784240C 		movl	$0, 268(%rsp)
 1432      01000000 
 1432      000000
 1433 058d C7842408 		movl	$1, 264(%rsp)
 1433      01000001 
 1433      000000
 1434 0598 89842404 		movl	%eax, 260(%rsp)
 1434      010000
 1435 059f 8B442454 		movl	84(%rsp), %eax
 1436 05a3 89C2     		movl	%eax, %edx
 1437 05a5 83E201   		andl	$1, %edx
 1438 05a8 8994241C 		movl	%edx, 284(%rsp)
 1438      010000
 1439 05af 89C2     		movl	%eax, %edx
 1440 05b1 C1E802   		shrl	$2, %eax
 1441 05b4 D1EA     		shrl	%edx
 1442 05b6 89842414 		movl	%eax, 276(%rsp)
 1442      010000
 1443 05bd 83E201   		andl	$1, %edx
 1444 05c0 89942418 		movl	%edx, 280(%rsp)
 1444      010000
 1445 05c7 8B542418 		movl	24(%rsp), %edx
 1446 05cb 85D2     		testl	%edx, %edx
 1447 05cd 0F84C108 		je	.L206
 1447      0000
 1448              	.L235:
 1449 05d3 8B442438 		movl	56(%rsp), %eax
 1450 05d7 C7842420 		movl	$1, 288(%rsp)
 1450      01000001 
 1450      000000
 1451 05e2 C7842430 		movl	$0, 304(%rsp)
 1451      01000000 
 1451      000000
 1452 05ed C784242C 		movl	$1, 300(%rsp)
 1452      01000001 
 1452      000000
 1453 05f8 C7842428 		movl	$1, 296(%rsp)
 1453      01000001 
 1453      000000
 1454 0603 89842424 		movl	%eax, 292(%rsp)
 1454      010000
 1455 060a 8B442458 		movl	88(%rsp), %eax
 1456 060e 89C2     		movl	%eax, %edx
 1457 0610 83E201   		andl	$1, %edx
 1458 0613 8994243C 		movl	%edx, 316(%rsp)
 1458      010000
 1459 061a 89C2     		movl	%eax, %edx
 1460 061c C1E802   		shrl	$2, %eax
 1461 061f D1EA     		shrl	%edx
 1462 0621 89842434 		movl	%eax, 308(%rsp)
 1462      010000
 1463 0628 83E201   		andl	$1, %edx
 1464 062b 89942438 		movl	%edx, 312(%rsp)
 1464      010000
 1465              	.L207:
 1466 0632 8B44241C 		movl	28(%rsp), %eax
 1467 0636 85C0     		testl	%eax, %eax
 1468 0638 0F85AA05 		jne	.L208
 1468      0000
 1469 063e C7842440 		movl	$0, 320(%rsp)
 1469      01000000 
 1469      000000
 1470 0649 C7842444 		movl	$0, 324(%rsp)
 1470      01000000 
 1470      000000
 1471 0654 C7842450 		movl	$1, 336(%rsp)
 1471      01000001 
 1471      000000
 1472 065f C784244C 		movl	$1, 332(%rsp)
 1472      01000001 
 1472      000000
 1473 066a C7842448 		movl	$1, 328(%rsp)
 1473      01000001 
 1473      000000
 1474 0675 C7842454 		movl	$0, 340(%rsp)
 1474      01000000 
 1474      000000
 1475 0680 C7842458 		movl	$0, 344(%rsp)
 1475      01000000 
 1475      000000
 1476 068b C784245C 		movl	$0, 348(%rsp)
 1476      01000000 
 1476      000000
 1477              	.L209:
 1478 0696 4C89E8   		movq	%r13, %rax
 1479 0699 83E00F   		andl	$15, %eax
 1480 069c 48C1E802 		shrq	$2, %rax
 1481 06a0 48F7D8   		negq	%rax
 1482 06a3 83E003   		andl	$3, %eax
 1483 06a6 0F844C08 		je	.L216
 1483      0000
 1484 06ac 8B4C2460 		movl	96(%rsp), %ecx
 1485 06b0 8B542464 		movl	100(%rsp), %edx
 1486 06b4 C1E107   		sall	$7, %ecx
 1487 06b7 034C247C 		addl	124(%rsp), %ecx
 1488 06bb C1E206   		sall	$6, %edx
 1489 06be 01D1     		addl	%edx, %ecx
 1490 06c0 8B542468 		movl	104(%rsp), %edx
 1491 06c4 C1E205   		sall	$5, %edx
 1492 06c7 01D1     		addl	%edx, %ecx
 1493 06c9 8B54246C 		movl	108(%rsp), %edx
 1494 06cd C1E204   		sall	$4, %edx
 1495 06d0 01CA     		addl	%ecx, %edx
 1496 06d2 8B4C2470 		movl	112(%rsp), %ecx
 1497 06d6 83F801   		cmpl	$1, %eax
 1498 06d9 8D14CA   		leal	(%rdx,%rcx,8), %edx
 1499 06dc 8B4C2474 		movl	116(%rsp), %ecx
 1500 06e0 8D148A   		leal	(%rdx,%rcx,4), %edx
 1501 06e3 8B4C2478 		movl	120(%rsp), %ecx
 1502 06e7 8D144A   		leal	(%rdx,%rcx,2), %edx
 1503 06ea 41895500 		movl	%edx, 0(%r13)
 1504 06ee 0F843C08 		je	.L217
 1504      0000
 1505 06f4 8B8C2480 		movl	128(%rsp), %ecx
 1505      000000
 1506 06fb 8B942484 		movl	132(%rsp), %edx
 1506      000000
 1507 0702 C1E107   		sall	$7, %ecx
 1508 0705 038C249C 		addl	156(%rsp), %ecx
 1508      000000
 1509 070c C1E206   		sall	$6, %edx
 1510 070f 01D1     		addl	%edx, %ecx
 1511 0711 8B942488 		movl	136(%rsp), %edx
 1511      000000
 1512 0718 C1E205   		sall	$5, %edx
 1513 071b 01D1     		addl	%edx, %ecx
 1514 071d 8B94248C 		movl	140(%rsp), %edx
 1514      000000
 1515 0724 C1E204   		sall	$4, %edx
 1516 0727 01CA     		addl	%ecx, %edx
 1517 0729 8B8C2490 		movl	144(%rsp), %ecx
 1517      000000
 1518 0730 83F803   		cmpl	$3, %eax
 1519 0733 8D14CA   		leal	(%rdx,%rcx,8), %edx
 1520 0736 8B8C2494 		movl	148(%rsp), %ecx
 1520      000000
 1521 073d 8D148A   		leal	(%rdx,%rcx,4), %edx
 1522 0740 8B8C2498 		movl	152(%rsp), %ecx
 1522      000000
 1523 0747 8D144A   		leal	(%rdx,%rcx,2), %edx
 1524 074a 41895504 		movl	%edx, 4(%r13)
 1525 074e 0F85CC07 		jne	.L218
 1525      0000
 1526 0754 8B8C24A0 		movl	160(%rsp), %ecx
 1526      000000
 1527 075b 8B9424A4 		movl	164(%rsp), %edx
 1527      000000
 1528 0762 BF050000 		movl	$5, %edi
 1528      00
 1529 0767 C1E107   		sall	$7, %ecx
 1530 076a 038C24BC 		addl	188(%rsp), %ecx
 1530      000000
 1531 0771 C1E206   		sall	$6, %edx
 1532 0774 01D1     		addl	%edx, %ecx
 1533 0776 8B9424A8 		movl	168(%rsp), %edx
 1533      000000
 1534 077d C1E205   		sall	$5, %edx
 1535 0780 01D1     		addl	%edx, %ecx
 1536 0782 8B9424AC 		movl	172(%rsp), %edx
 1536      000000
 1537 0789 C1E204   		sall	$4, %edx
 1538 078c 01CA     		addl	%ecx, %edx
 1539 078e 8B8C24B0 		movl	176(%rsp), %ecx
 1539      000000
 1540 0795 8D14CA   		leal	(%rdx,%rcx,8), %edx
 1541 0798 8B8C24B4 		movl	180(%rsp), %ecx
 1541      000000
 1542 079f 8D148A   		leal	(%rdx,%rcx,4), %edx
 1543 07a2 8B8C24B8 		movl	184(%rsp), %ecx
 1543      000000
 1544 07a9 8D144A   		leal	(%rdx,%rcx,2), %edx
 1545 07ac 41895508 		movl	%edx, 8(%r13)
 1546 07b0 BA030000 		movl	$3, %edx
 1546      00
 1547              	.L211:
 1548 07b5 B9080000 		movl	$8, %ecx
 1548      00
 1549 07ba 4189C0   		movl	%eax, %r8d
 1550 07bd 41B90100 		movl	$1, %r9d
 1550      0000
 1551 07c3 29C1     		subl	%eax, %ecx
 1552 07c5 BE040000 		movl	$4, %esi
 1552      00
 1553              	.L210:
 1554 07ca 4C89C0   		movq	%r8, %rax
 1555 07cd 4F8D4485 		leaq	0(%r13,%r8,4), %r8
 1555      00
 1556 07d2 48C1E005 		salq	$5, %rax
 1557 07d6 4183F902 		cmpl	$2, %r9d
 1558 07da 488D4404 		leaq	96(%rsp,%rax), %rax
 1558      60
 1559 07df F30F6F00 		movdqu	(%rax), %xmm0
 1560 07e3 F3440F6F 		movdqu	16(%rax), %xmm9
 1560      4810
 1561 07e9 660F6FE8 		movdqa	%xmm0, %xmm5
 1562 07ed 66440F6F 		movdqa	%xmm0, %xmm8
 1562      C0
 1563 07f2 F30F6F78 		movdqu	32(%rax), %xmm7
 1563      20
 1564 07f7 450FC6C1 		shufps	$221, %xmm9, %xmm8
 1564      DD
 1565 07fc F30F6F70 		movdqu	48(%rax), %xmm6
 1565      30
 1566 0801 410FC6E9 		shufps	$136, %xmm9, %xmm5
 1566      88
 1567 0806 66440F6F 		movdqa	%xmm7, %xmm9
 1567      CF
 1568 080b F30F6F60 		movdqu	64(%rax), %xmm4
 1568      40
 1569 0810 0FC6FEDD 		shufps	$221, %xmm6, %xmm7
 1570 0814 440FC6CE 		shufps	$136, %xmm6, %xmm9
 1570      88
 1571 0819 F30F6F48 		movdqu	80(%rax), %xmm1
 1571      50
 1572 081e 660F6FF4 		movdqa	%xmm4, %xmm6
 1573 0822 66410F6F 		movdqa	%xmm8, %xmm0
 1573      C0
 1574 0827 F30F6F58 		movdqu	96(%rax), %xmm3
 1574      60
 1575 082c 0FC6F188 		shufps	$136, %xmm1, %xmm6
 1576 0830 0FC6E1DD 		shufps	$221, %xmm1, %xmm4
 1577 0834 F30F6F50 		movdqu	112(%rax), %xmm2
 1577      70
 1578 0839 660F6FCB 		movdqa	%xmm3, %xmm1
 1579 083d 0FC6C7DD 		shufps	$221, %xmm7, %xmm0
 1580 0841 0FC6CA88 		shufps	$136, %xmm2, %xmm1
 1581 0845 0FC6DADD 		shufps	$221, %xmm2, %xmm3
 1582 0849 660F6FD5 		movdqa	%xmm5, %xmm2
 1583 084d 410FC6E9 		shufps	$221, %xmm9, %xmm5
 1583      DD
 1584 0852 410FC6D1 		shufps	$136, %xmm9, %xmm2
 1584      88
 1585 0857 66440F6F 		movdqa	%xmm6, %xmm9
 1585      CE
 1586 085c 0FC6F1DD 		shufps	$221, %xmm1, %xmm6
 1587 0860 440FC6C9 		shufps	$136, %xmm1, %xmm9
 1587      88
 1588 0865 66410F6F 		movdqa	%xmm8, %xmm1
 1588      C8
 1589 086a 66440F6F 		movdqa	%xmm4, %xmm8
 1589      C4
 1590 086f 0FC6E3DD 		shufps	$221, %xmm3, %xmm4
 1591 0873 0FC6CF88 		shufps	$136, %xmm7, %xmm1
 1592 0877 660F6FFA 		movdqa	%xmm2, %xmm7
 1593 087b 440FC6C3 		shufps	$136, %xmm3, %xmm8
 1593      88
 1594 0880 660F6FD8 		movdqa	%xmm0, %xmm3
 1595 0884 410FC6F9 		shufps	$136, %xmm9, %xmm7
 1595      88
 1596 0889 0FC6C488 		shufps	$136, %xmm4, %xmm0
 1597 088d 0FC6DCDD 		shufps	$221, %xmm4, %xmm3
 1598 0891 660F72F7 		pslld	$7, %xmm7
 1598      07
 1599 0896 410FC6D1 		shufps	$221, %xmm9, %xmm2
 1599      DD
 1600 089b 660FFEFB 		paddd	%xmm3, %xmm7
 1601 089f 660F6FD9 		movdqa	%xmm1, %xmm3
 1602 08a3 410FC6C8 		shufps	$221, %xmm8, %xmm1
 1602      DD
 1603 08a8 660F72F2 		pslld	$3, %xmm2
 1603      03
 1604 08ad 410FC6D8 		shufps	$136, %xmm8, %xmm3
 1604      88
 1605 08b2 660F72F1 		pslld	$2, %xmm1
 1605      02
 1606 08b7 660F72F3 		pslld	$6, %xmm3
 1606      06
 1607 08bc 660FFEFB 		paddd	%xmm3, %xmm7
 1608 08c0 660F6FDD 		movdqa	%xmm5, %xmm3
 1609 08c4 0FC6EEDD 		shufps	$221, %xmm6, %xmm5
 1610 08c8 0FC6DE88 		shufps	$136, %xmm6, %xmm3
 1611 08cc 660F72F3 		pslld	$5, %xmm3
 1611      05
 1612 08d1 660FFEFB 		paddd	%xmm3, %xmm7
 1613 08d5 660F6FD8 		movdqa	%xmm0, %xmm3
 1614 08d9 660F6FC5 		movdqa	%xmm5, %xmm0
 1615 08dd 660F72F3 		pslld	$4, %xmm3
 1615      04
 1616 08e2 660FFEDF 		paddd	%xmm7, %xmm3
 1617 08e6 660FFED3 		paddd	%xmm3, %xmm2
 1618 08ea 660F72F0 		pslld	$1, %xmm0
 1618      01
 1619 08ef 660FFECA 		paddd	%xmm2, %xmm1
 1620 08f3 660FFEC1 		paddd	%xmm1, %xmm0
 1621 08f7 410F2900 		movaps	%xmm0, (%r8)
 1622 08fb 0F853901 		jne	.L212
 1622      0000
 1623 0901 F30F6F80 		movdqu	128(%rax), %xmm0
 1623      80000000 
 1624 0909 F3440F6F 		movdqu	144(%rax), %xmm8
 1624      80900000 
 1624      00
 1625 0912 660F6FE0 		movdqa	%xmm0, %xmm4
 1626 0916 66440F6F 		movdqa	%xmm0, %xmm9
 1626      C8
 1627 091b F30F6FB8 		movdqu	160(%rax), %xmm7
 1627      A0000000 
 1628 0923 450FC6C8 		shufps	$221, %xmm8, %xmm9
 1628      DD
 1629 0928 F30F6FA8 		movdqu	176(%rax), %xmm5
 1629      B0000000 
 1630 0930 410FC6E0 		shufps	$136, %xmm8, %xmm4
 1630      88
 1631 0935 66440F6F 		movdqa	%xmm7, %xmm8
 1631      C7
 1632 093a F30F6FB0 		movdqu	192(%rax), %xmm6
 1632      C0000000 
 1633 0942 0FC6FDDD 		shufps	$221, %xmm5, %xmm7
 1634 0946 440FC6C5 		shufps	$136, %xmm5, %xmm8
 1634      88
 1635 094b F30F6F88 		movdqu	208(%rax), %xmm1
 1635      D0000000 
 1636 0953 660F6FEE 		movdqa	%xmm6, %xmm5
 1637 0957 66410F6F 		movdqa	%xmm9, %xmm0
 1637      C1
 1638 095c F30F6F98 		movdqu	224(%rax), %xmm3
 1638      E0000000 
 1639 0964 0FC6E988 		shufps	$136, %xmm1, %xmm5
 1640 0968 0FC6F1DD 		shufps	$221, %xmm1, %xmm6
 1641 096c F30F6F90 		movdqu	240(%rax), %xmm2
 1641      F0000000 
 1642 0974 660F6FCB 		movdqa	%xmm3, %xmm1
 1643 0978 0FC6C7DD 		shufps	$221, %xmm7, %xmm0
 1644 097c 0FC6CA88 		shufps	$136, %xmm2, %xmm1
 1645 0980 0FC6DADD 		shufps	$221, %xmm2, %xmm3
 1646 0984 660F6FD4 		movdqa	%xmm4, %xmm2
 1647 0988 410FC6E0 		shufps	$221, %xmm8, %xmm4
 1647      DD
 1648 098d 410FC6D0 		shufps	$136, %xmm8, %xmm2
 1648      88
 1649 0992 66440F6F 		movdqa	%xmm5, %xmm8
 1649      C5
 1650 0997 0FC6E9DD 		shufps	$221, %xmm1, %xmm5
 1651 099b 440FC6C1 		shufps	$136, %xmm1, %xmm8
 1651      88
 1652 09a0 66410F6F 		movdqa	%xmm9, %xmm1
 1652      C9
 1653 09a5 0FC6CF88 		shufps	$136, %xmm7, %xmm1
 1654 09a9 660F6FFE 		movdqa	%xmm6, %xmm7
 1655 09ad 0FC6F3DD 		shufps	$221, %xmm3, %xmm6
 1656 09b1 0FC6FB88 		shufps	$136, %xmm3, %xmm7
 1657 09b5 66440F6F 		movdqa	%xmm6, %xmm9
 1657      CE
 1658 09ba 660F6FD8 		movdqa	%xmm0, %xmm3
 1659 09be 660F6FF2 		movdqa	%xmm2, %xmm6
 1660 09c2 410FC6D9 		shufps	$221, %xmm9, %xmm3
 1660      DD
 1661 09c7 410FC6F0 		shufps	$136, %xmm8, %xmm6
 1661      88
 1662 09cc 410FC6C1 		shufps	$136, %xmm9, %xmm0
 1662      88
 1663 09d1 410FC6D0 		shufps	$221, %xmm8, %xmm2
 1663      DD
 1664 09d6 660F72F6 		pslld	$7, %xmm6
 1664      07
 1665 09db 660FFEF3 		paddd	%xmm3, %xmm6
 1666 09df 660F6FD9 		movdqa	%xmm1, %xmm3
 1667 09e3 0FC6CFDD 		shufps	$221, %xmm7, %xmm1
 1668 09e7 0FC6DF88 		shufps	$136, %xmm7, %xmm3
 1669 09eb 660F72F2 		pslld	$3, %xmm2
 1669      03
 1670 09f0 660F72F1 		pslld	$2, %xmm1
 1670      02
 1671 09f5 660F72F3 		pslld	$6, %xmm3
 1671      06
 1672 09fa 660FFEF3 		paddd	%xmm3, %xmm6
 1673 09fe 660F6FDC 		movdqa	%xmm4, %xmm3
 1674 0a02 0FC6E5DD 		shufps	$221, %xmm5, %xmm4
 1675 0a06 0FC6DD88 		shufps	$136, %xmm5, %xmm3
 1676 0a0a 660F72F3 		pslld	$5, %xmm3
 1676      05
 1677 0a0f 660FFEF3 		paddd	%xmm3, %xmm6
 1678 0a13 660F6FD8 		movdqa	%xmm0, %xmm3
 1679 0a17 660F6FC4 		movdqa	%xmm4, %xmm0
 1680 0a1b 660F72F3 		pslld	$4, %xmm3
 1680      04
 1681 0a20 660FFEDE 		paddd	%xmm6, %xmm3
 1682 0a24 660FFED3 		paddd	%xmm3, %xmm2
 1683 0a28 660F72F0 		pslld	$1, %xmm0
 1683      01
 1684 0a2d 660FFECA 		paddd	%xmm2, %xmm1
 1685 0a31 660FFEC1 		paddd	%xmm1, %xmm0
 1686 0a35 410F2940 		movaps	%xmm0, 16(%r8)
 1686      10
 1687              	.L212:
 1688 0a3a 01F2     		addl	%esi, %edx
 1689 0a3c 29F7     		subl	%esi, %edi
 1690 0a3e 39F1     		cmpl	%esi, %ecx
 1691 0a40 0F847801 		je	.L190
 1691      0000
 1692 0a46 8D04D500 		leal	0(,%rdx,8), %eax
 1692      000000
 1693 0a4d 4C63C2   		movslq	%edx, %r8
 1694 0a50 4863C8   		movslq	%eax, %rcx
 1695 0a53 8D7007   		leal	7(%rax), %esi
 1696 0a56 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1697 0a5a 4863F6   		movslq	%esi, %rsi
 1698 0a5d C1E107   		sall	$7, %ecx
 1699 0a60 034CB460 		addl	96(%rsp,%rsi,4), %ecx
 1700 0a64 8D7001   		leal	1(%rax), %esi
 1701 0a67 4863F6   		movslq	%esi, %rsi
 1702 0a6a 8B74B460 		movl	96(%rsp,%rsi,4), %esi
 1703 0a6e C1E606   		sall	$6, %esi
 1704 0a71 01CE     		addl	%ecx, %esi
 1705 0a73 8D4802   		leal	2(%rax), %ecx
 1706 0a76 4863C9   		movslq	%ecx, %rcx
 1707 0a79 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1708 0a7d C1E105   		sall	$5, %ecx
 1709 0a80 01CE     		addl	%ecx, %esi
 1710 0a82 8D4803   		leal	3(%rax), %ecx
 1711 0a85 4863C9   		movslq	%ecx, %rcx
 1712 0a88 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1713 0a8c C1E104   		sall	$4, %ecx
 1714 0a8f 01F1     		addl	%esi, %ecx
 1715 0a91 8D7004   		leal	4(%rax), %esi
 1716 0a94 4863F6   		movslq	%esi, %rsi
 1717 0a97 8B74B460 		movl	96(%rsp,%rsi,4), %esi
 1718 0a9b 8D34F1   		leal	(%rcx,%rsi,8), %esi
 1719 0a9e 8D4805   		leal	5(%rax), %ecx
 1720 0aa1 83C006   		addl	$6, %eax
 1721 0aa4 4898     		cltq
 1722 0aa6 83FF01   		cmpl	$1, %edi
 1723 0aa9 4863C9   		movslq	%ecx, %rcx
 1724 0aac 8B448460 		movl	96(%rsp,%rax,4), %eax
 1725 0ab0 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1726 0ab4 8D0C8E   		leal	(%rsi,%rcx,4), %ecx
 1727 0ab7 8D0441   		leal	(%rcx,%rax,2), %eax
 1728 0aba 43894485 		movl	%eax, 0(%r13,%r8,4)
 1728      00
 1729 0abf 448D4201 		leal	1(%rdx), %r8d
 1730 0ac3 0F84F500 		je	.L190
 1730      0000
 1731 0ac9 428D04C5 		leal	0(,%r8,8), %eax
 1731      00000000 
 1732 0ad1 83C202   		addl	$2, %edx
 1733 0ad4 4D63C0   		movslq	%r8d, %r8
 1734 0ad7 4863C8   		movslq	%eax, %rcx
 1735 0ada 8D7007   		leal	7(%rax), %esi
 1736 0add 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1737 0ae1 4863F6   		movslq	%esi, %rsi
 1738 0ae4 C1E107   		sall	$7, %ecx
 1739 0ae7 034CB460 		addl	96(%rsp,%rsi,4), %ecx
 1740 0aeb 8D7001   		leal	1(%rax), %esi
 1741 0aee 4863F6   		movslq	%esi, %rsi
 1742 0af1 8B74B460 		movl	96(%rsp,%rsi,4), %esi
 1743 0af5 C1E606   		sall	$6, %esi
 1744 0af8 01CE     		addl	%ecx, %esi
 1745 0afa 8D4802   		leal	2(%rax), %ecx
 1746 0afd 4863C9   		movslq	%ecx, %rcx
 1747 0b00 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1748 0b04 C1E105   		sall	$5, %ecx
 1749 0b07 01CE     		addl	%ecx, %esi
 1750 0b09 8D4803   		leal	3(%rax), %ecx
 1751 0b0c 4863C9   		movslq	%ecx, %rcx
 1752 0b0f 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1753 0b13 C1E104   		sall	$4, %ecx
 1754 0b16 01F1     		addl	%esi, %ecx
 1755 0b18 8D7004   		leal	4(%rax), %esi
 1756 0b1b 4863F6   		movslq	%esi, %rsi
 1757 0b1e 8B74B460 		movl	96(%rsp,%rsi,4), %esi
 1758 0b22 8D34F1   		leal	(%rcx,%rsi,8), %esi
 1759 0b25 8D4805   		leal	5(%rax), %ecx
 1760 0b28 83C006   		addl	$6, %eax
 1761 0b2b 4898     		cltq
 1762 0b2d 83FF02   		cmpl	$2, %edi
 1763 0b30 4863C9   		movslq	%ecx, %rcx
 1764 0b33 8B448460 		movl	96(%rsp,%rax,4), %eax
 1765 0b37 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1766 0b3b 8D0C8E   		leal	(%rsi,%rcx,4), %ecx
 1767 0b3e 8D0441   		leal	(%rcx,%rax,2), %eax
 1768 0b41 43894485 		movl	%eax, 0(%r13,%r8,4)
 1768      00
 1769 0b46 7476     		je	.L190
 1770 0b48 8D04D500 		leal	0(,%rdx,8), %eax
 1770      000000
 1771 0b4f 4863D2   		movslq	%edx, %rdx
 1772 0b52 4863C8   		movslq	%eax, %rcx
 1773 0b55 8D7007   		leal	7(%rax), %esi
 1774 0b58 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1775 0b5c 4863F6   		movslq	%esi, %rsi
 1776 0b5f C1E107   		sall	$7, %ecx
 1777 0b62 034CB460 		addl	96(%rsp,%rsi,4), %ecx
 1778 0b66 8D7001   		leal	1(%rax), %esi
 1779 0b69 4863F6   		movslq	%esi, %rsi
 1780 0b6c 8B74B460 		movl	96(%rsp,%rsi,4), %esi
 1781 0b70 C1E606   		sall	$6, %esi
 1782 0b73 01CE     		addl	%ecx, %esi
 1783 0b75 8D4802   		leal	2(%rax), %ecx
 1784 0b78 4863C9   		movslq	%ecx, %rcx
 1785 0b7b 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1786 0b7f C1E105   		sall	$5, %ecx
 1787 0b82 01CE     		addl	%ecx, %esi
 1788 0b84 8D4803   		leal	3(%rax), %ecx
 1789 0b87 4863C9   		movslq	%ecx, %rcx
 1790 0b8a 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1791 0b8e C1E104   		sall	$4, %ecx
 1792 0b91 01F1     		addl	%esi, %ecx
 1793 0b93 8D7004   		leal	4(%rax), %esi
 1794 0b96 4863F6   		movslq	%esi, %rsi
 1795 0b99 8B74B460 		movl	96(%rsp,%rsi,4), %esi
 1796 0b9d 8D34F1   		leal	(%rcx,%rsi,8), %esi
 1797 0ba0 8D4805   		leal	5(%rax), %ecx
 1798 0ba3 83C006   		addl	$6, %eax
 1799 0ba6 4898     		cltq
 1800 0ba8 4863C9   		movslq	%ecx, %rcx
 1801 0bab 8B448460 		movl	96(%rsp,%rax,4), %eax
 1802 0baf 8B4C8C60 		movl	96(%rsp,%rcx,4), %ecx
 1803 0bb3 8D0C8E   		leal	(%rsi,%rcx,4), %ecx
 1804 0bb6 8D0441   		leal	(%rcx,%rax,2), %eax
 1805 0bb9 41894495 		movl	%eax, 0(%r13,%rdx,4)
 1805      00
 1806              	.L190:
 1807 0bbe 488B8424 		movq	376(%rsp), %rax
 1807      78010000 
 1808 0bc6 64483304 		xorq	%fs:40, %rax
 1808      25280000 
 1808      00
 1809 0bcf 0F856A03 		jne	.L229
 1809      0000
 1810 0bd5 4881C488 		addq	$392, %rsp
 1810      010000
 1811              		.cfi_remember_state
 1812              		.cfi_def_cfa_offset 40
 1813 0bdc 5B       		popq	%rbx
 1814              		.cfi_def_cfa_offset 32
 1815 0bdd 5D       		popq	%rbp
 1816              		.cfi_def_cfa_offset 24
 1817 0bde 415C     		popq	%r12
 1818              		.cfi_def_cfa_offset 16
 1819 0be0 415D     		popq	%r13
 1820              		.cfi_def_cfa_offset 8
 1821 0be2 C3       		ret
 1822              		.p2align 4,,10
 1823 0be3 0F1F4400 		.p2align 3
 1823      00
 1824              	.L208:
 1825              		.cfi_restore_state
 1826 0be8 8B44243C 		movl	60(%rsp), %eax
 1827 0bec C7842440 		movl	$1, 320(%rsp)
 1827      01000001 
 1827      000000
 1828 0bf7 C7842450 		movl	$1, 336(%rsp)
 1828      01000001 
 1828      000000
 1829 0c02 C784244C 		movl	$1, 332(%rsp)
 1829      01000001 
 1829      000000
 1830 0c0d C7842448 		movl	$1, 328(%rsp)
 1830      01000001 
 1830      000000
 1831 0c18 89842444 		movl	%eax, 324(%rsp)
 1831      010000
 1832 0c1f 8B44245C 		movl	92(%rsp), %eax
 1833 0c23 89C2     		movl	%eax, %edx
 1834 0c25 83E201   		andl	$1, %edx
 1835 0c28 8994245C 		movl	%edx, 348(%rsp)
 1835      010000
 1836 0c2f 89C2     		movl	%eax, %edx
 1837 0c31 C1E802   		shrl	$2, %eax
 1838 0c34 D1EA     		shrl	%edx
 1839 0c36 89842454 		movl	%eax, 340(%rsp)
 1839      010000
 1840 0c3d 83E201   		andl	$1, %edx
 1841 0c40 89942458 		movl	%edx, 344(%rsp)
 1841      010000
 1842 0c47 E94AFAFF 		jmp	.L209
 1842      FF
 1843 0c4c 0F1F4000 		.p2align 4,,10
 1844              		.p2align 3
 1845              	.L194:
 1846 0c50 448B4C24 		movl	4(%rsp), %r9d
 1846      04
 1847 0c55 C7442460 		movl	$0, 96(%rsp)
 1847      00000000 
 1848 0c5d C7442464 		movl	$0, 100(%rsp)
 1848      00000000 
 1849 0c65 C7442470 		movl	$0, 112(%rsp)
 1849      00000000 
 1850 0c6d C744246C 		movl	$0, 108(%rsp)
 1850      00000000 
 1851 0c75 C7442468 		movl	$0, 104(%rsp)
 1851      00000000 
 1852 0c7d 4585C9   		testl	%r9d, %r9d
 1853 0c80 C7442474 		movl	$0, 116(%rsp)
 1853      00000000 
 1854 0c88 C7442478 		movl	$0, 120(%rsp)
 1854      00000000 
 1855 0c90 C744247C 		movl	$0, 124(%rsp)
 1855      00000000 
 1856 0c98 0F851CF7 		jne	.L230
 1856      FFFF
 1857              	.L196:
 1858 0c9e 448B4424 		movl	8(%rsp), %r8d
 1858      08
 1859 0ca3 C7842480 		movl	$0, 128(%rsp)
 1859      00000000 
 1859      000000
 1860 0cae C7842484 		movl	$0, 132(%rsp)
 1860      00000000 
 1860      000000
 1861 0cb9 C7842490 		movl	$1, 144(%rsp)
 1861      00000001 
 1861      000000
 1862 0cc4 C784248C 		movl	$0, 140(%rsp)
 1862      00000000 
 1862      000000
 1863 0ccf C7842488 		movl	$0, 136(%rsp)
 1863      00000000 
 1863      000000
 1864 0cda 4585C0   		testl	%r8d, %r8d
 1865 0cdd C7842494 		movl	$0, 148(%rsp)
 1865      00000000 
 1865      000000
 1866 0ce8 C7842498 		movl	$0, 152(%rsp)
 1866      00000000 
 1866      000000
 1867 0cf3 C784249C 		movl	$0, 156(%rsp)
 1867      00000000 
 1867      000000
 1868 0cfe 0F8523F7 		jne	.L231
 1868      FFFF
 1869              	.L198:
 1870 0d04 8B7C240C 		movl	12(%rsp), %edi
 1871 0d08 C78424A0 		movl	$0, 160(%rsp)
 1871      00000000 
 1871      000000
 1872 0d13 C78424A4 		movl	$0, 164(%rsp)
 1872      00000000 
 1872      000000
 1873 0d1e C78424B0 		movl	$0, 176(%rsp)
 1873      00000000 
 1873      000000
 1874 0d29 C78424AC 		movl	$1, 172(%rsp)
 1874      00000001 
 1874      000000
 1875 0d34 C78424A8 		movl	$0, 168(%rsp)
 1875      00000000 
 1875      000000
 1876 0d3f 85FF     		testl	%edi, %edi
 1877 0d41 C78424B4 		movl	$0, 180(%rsp)
 1877      00000000 
 1877      000000
 1878 0d4c C78424B8 		movl	$0, 184(%rsp)
 1878      00000000 
 1878      000000
 1879 0d57 C78424BC 		movl	$0, 188(%rsp)
 1879      00000000 
 1879      000000
 1880 0d62 0F852AF7 		jne	.L232
 1880      FFFF
 1881              	.L200:
 1882 0d68 8B742410 		movl	16(%rsp), %esi
 1883 0d6c C78424C0 		movl	$0, 192(%rsp)
 1883      00000000 
 1883      000000
 1884 0d77 C78424C4 		movl	$0, 196(%rsp)
 1884      00000000 
 1884      000000
 1885 0d82 C78424D0 		movl	$1, 208(%rsp)
 1885      00000001 
 1885      000000
 1886 0d8d C78424CC 		movl	$1, 204(%rsp)
 1886      00000001 
 1886      000000
 1887 0d98 C78424C8 		movl	$0, 200(%rsp)
 1887      00000000 
 1887      000000
 1888 0da3 85F6     		testl	%esi, %esi
 1889 0da5 C78424D4 		movl	$0, 212(%rsp)
 1889      00000000 
 1889      000000
 1890 0db0 C78424D8 		movl	$0, 216(%rsp)
 1890      00000000 
 1890      000000
 1891 0dbb C78424DC 		movl	$0, 220(%rsp)
 1891      00000000 
 1891      000000
 1892 0dc6 0F8531F7 		jne	.L233
 1892      FFFF
 1893              	.L202:
 1894 0dcc 8B4C2414 		movl	20(%rsp), %ecx
 1895 0dd0 C78424E0 		movl	$0, 224(%rsp)
 1895      00000000 
 1895      000000
 1896 0ddb C78424E4 		movl	$0, 228(%rsp)
 1896      00000000 
 1896      000000
 1897 0de6 C78424F0 		movl	$0, 240(%rsp)
 1897      00000000 
 1897      000000
 1898 0df1 C78424EC 		movl	$0, 236(%rsp)
 1898      00000000 
 1898      000000
 1899 0dfc C78424E8 		movl	$1, 232(%rsp)
 1899      00000001 
 1899      000000
 1900 0e07 85C9     		testl	%ecx, %ecx
 1901 0e09 C78424F4 		movl	$0, 244(%rsp)
 1901      00000000 
 1901      000000
 1902 0e14 C78424F8 		movl	$0, 248(%rsp)
 1902      00000000 
 1902      000000
 1903 0e1f C78424FC 		movl	$0, 252(%rsp)
 1903      00000000 
 1903      000000
 1904 0e2a 0F8538F7 		jne	.L234
 1904      FFFF
 1905              	.L204:
 1906 0e30 8B542418 		movl	24(%rsp), %edx
 1907 0e34 C7842400 		movl	$0, 256(%rsp)
 1907      01000000 
 1907      000000
 1908 0e3f C7842404 		movl	$0, 260(%rsp)
 1908      01000000 
 1908      000000
 1909 0e4a C7842410 		movl	$1, 272(%rsp)
 1909      01000001 
 1909      000000
 1910 0e55 C784240C 		movl	$0, 268(%rsp)
 1910      01000000 
 1910      000000
 1911 0e60 C7842408 		movl	$1, 264(%rsp)
 1911      01000001 
 1911      000000
 1912 0e6b 85D2     		testl	%edx, %edx
 1913 0e6d C7842414 		movl	$0, 276(%rsp)
 1913      01000000 
 1913      000000
 1914 0e78 C7842418 		movl	$0, 280(%rsp)
 1914      01000000 
 1914      000000
 1915 0e83 C784241C 		movl	$0, 284(%rsp)
 1915      01000000 
 1915      000000
 1916 0e8e 0F853FF7 		jne	.L235
 1916      FFFF
 1917              	.L206:
 1918 0e94 C7842420 		movl	$0, 288(%rsp)
 1918      01000000 
 1918      000000
 1919 0e9f C7842424 		movl	$0, 292(%rsp)
 1919      01000000 
 1919      000000
 1920 0eaa C7842430 		movl	$0, 304(%rsp)
 1920      01000000 
 1920      000000
 1921 0eb5 C784242C 		movl	$1, 300(%rsp)
 1921      01000001 
 1921      000000
 1922 0ec0 C7842428 		movl	$1, 296(%rsp)
 1922      01000001 
 1922      000000
 1923 0ecb C7842434 		movl	$0, 308(%rsp)
 1923      01000000 
 1923      000000
 1924 0ed6 C7842438 		movl	$0, 312(%rsp)
 1924      01000000 
 1924      000000
 1925 0ee1 C784243C 		movl	$0, 316(%rsp)
 1925      01000000 
 1925      000000
 1926 0eec E941F7FF 		jmp	.L207
 1926      FF
 1927              		.p2align 4,,10
 1928 0ef1 0F1F8000 		.p2align 3
 1928      000000
 1929              	.L216:
 1930 0ef8 31D2     		xorl	%edx, %edx
 1931 0efa BF080000 		movl	$8, %edi
 1931      00
 1932 0eff 4531C0   		xorl	%r8d, %r8d
 1933 0f02 B9080000 		movl	$8, %ecx
 1933      00
 1934 0f07 41B90200 		movl	$2, %r9d
 1934      0000
 1935 0f0d BE080000 		movl	$8, %esi
 1935      00
 1936 0f12 E9B3F8FF 		jmp	.L210
 1936      FF
 1937 0f17 660F1F84 		.p2align 4,,10
 1937      00000000 
 1937      00
 1938              		.p2align 3
 1939              	.L218:
 1940 0f20 BF060000 		movl	$6, %edi
 1940      00
 1941 0f25 BA020000 		movl	$2, %edx
 1941      00
 1942 0f2a E986F8FF 		jmp	.L211
 1942      FF
 1943 0f2f 90       		.p2align 4,,10
 1944              		.p2align 3
 1945              	.L217:
 1946 0f30 BF070000 		movl	$7, %edi
 1946      00
 1947 0f35 BA010000 		movl	$1, %edx
 1947      00
 1948 0f3a E976F8FF 		jmp	.L211
 1948      FF
 1949              	.L229:
 1950 0f3f E8000000 		call	__stack_chk_fail
 1950      00
 1951              		.cfi_endproc
 1952              	.LFE58:
 1954              		.section	.text.unlikely
 1955              	.LCOLDE22:
 1956              		.text
 1957              	.LHOTE22:
 1958              		.section	.text.unlikely
 1959              	.LCOLDB23:
 1960              		.text
 1961              	.LHOTB23:
 1962 0f44 6690662E 		.p2align 4,,15
 1962      0F1F8400 
 1962      00000000 
 1963              		.globl	equal
 1965              	equal:
 1966              	.LFB59:
 1967              		.cfi_startproc
 1968 0f50 31C0     		xorl	%eax, %eax
 1969 0f52 8B16     		movl	(%rsi), %edx
 1970 0f54 3917     		cmpl	%edx, (%rdi)
 1971 0f56 7408     		je	.L241
 1972              	.L237:
 1973 0f58 F3C3     		rep ret
 1974 0f5a 660F1F44 		.p2align 4,,10
 1974      0000
 1975              		.p2align 3
 1976              	.L241:
 1977 0f60 8B4E04   		movl	4(%rsi), %ecx
 1978 0f63 394F04   		cmpl	%ecx, 4(%rdi)
 1979 0f66 75F0     		jne	.L237
 1980 0f68 8B4E08   		movl	8(%rsi), %ecx
 1981 0f6b 394F08   		cmpl	%ecx, 8(%rdi)
 1982 0f6e 75E8     		jne	.L237
 1983 0f70 8B460C   		movl	12(%rsi), %eax
 1984 0f73 39470C   		cmpl	%eax, 12(%rdi)
 1985 0f76 0F94C0   		sete	%al
 1986 0f79 C3       		ret
 1987              		.cfi_endproc
 1988              	.LFE59:
 1990              		.section	.text.unlikely
 1991              	.LCOLDE23:
 1992              		.text
 1993              	.LHOTE23:
 1994              		.section	.text.unlikely
 1995              	.LCOLDB25:
 1996              		.text
 1997              	.LHOTB25:
 1998 0f7a 660F1F44 		.p2align 4,,15
 1998      0000
 1999              		.globl	encrypt
 2001              	encrypt:
 2002              	.LFB60:
 2003              		.cfi_startproc
 2004 0f80 53       		pushq	%rbx
 2005              		.cfi_def_cfa_offset 16
 2006              		.cfi_offset 3, -16
 2007 0f81 660FEFC0 		pxor	%xmm0, %xmm0
 2008 0f85 B9000000 		movl	$key, %ecx
 2008      00
 2009 0f8a 31D2     		xorl	%edx, %edx
 2010 0f8c 4883EC20 		subq	$32, %rsp
 2011              		.cfi_def_cfa_offset 48
 2012 0f90 8B5F0C   		movl	12(%rdi), %ebx
 2013 0f93 660F6F2D 		movdqa	.LC24(%rip), %xmm5
 2013      00000000 
 2014 0f9b 64488B04 		movq	%fs:40, %rax
 2014      25280000 
 2014      00
 2015 0fa4 48894424 		movq	%rax, 24(%rsp)
 2015      18
 2016 0fa9 31C0     		xorl	%eax, %eax
 2017 0fab 660F6F15 		movdqa	key(%rip), %xmm2
 2017      00000000 
 2018 0fb3 C1E308   		sall	$8, %ebx
 2019 0fb6 035F08   		addl	8(%rdi), %ebx
 2020 0fb9 660F6F0D 		movdqa	key+16(%rip), %xmm1
 2020      00000000 
 2021 0fc1 660F76D5 		pcmpeqd	%xmm5, %xmm2
 2022 0fc5 660F6F25 		movdqa	key+32(%rip), %xmm4
 2022      00000000 
 2023 0fcd 660F76CD 		pcmpeqd	%xmm5, %xmm1
 2024 0fd1 660FDBD5 		pand	%xmm5, %xmm2
 2025 0fd5 C1E308   		sall	$8, %ebx
 2026 0fd8 660F76E5 		pcmpeqd	%xmm5, %xmm4
 2027 0fdc 660FDBCD 		pand	%xmm5, %xmm1
 2028 0fe0 0F290424 		movaps	%xmm0, (%rsp)
 2029 0fe4 660FDBE5 		pand	%xmm5, %xmm4
 2030 0fe8 035F04   		addl	4(%rdi), %ebx
 2031 0feb 660FFED1 		paddd	%xmm1, %xmm2
 2032 0fef 660F6F1D 		movdqa	key+48(%rip), %xmm3
 2032      00000000 
 2033 0ff7 660FFEE2 		paddd	%xmm2, %xmm4
 2034 0ffb C1E308   		sall	$8, %ebx
 2035 0ffe 031F     		addl	(%rdi), %ebx
 2036 1000 660F6F15 		movdqa	key+64(%rip), %xmm2
 2036      00000000 
 2037 1008 660F76DD 		pcmpeqd	%xmm5, %xmm3
 2038 100c 660F6F0D 		movdqa	key+80(%rip), %xmm1
 2038      00000000 
 2039 1014 660F76D5 		pcmpeqd	%xmm5, %xmm2
 2040 1018 660FDBDD 		pand	%xmm5, %xmm3
 2041 101c 660F6F05 		movdqa	key+96(%rip), %xmm0
 2041      00000000 
 2042 1024 660F76CD 		pcmpeqd	%xmm5, %xmm1
 2043 1028 660FDBD5 		pand	%xmm5, %xmm2
 2044 102c 660F76C5 		pcmpeqd	%xmm5, %xmm0
 2045 1030 660FDBCD 		pand	%xmm5, %xmm1
 2046 1034 660FFEDC 		paddd	%xmm4, %xmm3
 2047 1038 660F6FE3 		movdqa	%xmm3, %xmm4
 2048 103c 660FDBC5 		pand	%xmm5, %xmm0
 2049 1040 660F6FDA 		movdqa	%xmm2, %xmm3
 2050 1044 660F6FD1 		movdqa	%xmm1, %xmm2
 2051 1048 660FFEDC 		paddd	%xmm4, %xmm3
 2052 104c 660F6FC8 		movdqa	%xmm0, %xmm1
 2053 1050 660FFED3 		paddd	%xmm3, %xmm2
 2054 1054 660F6F05 		movdqa	key+112(%rip), %xmm0
 2054      00000000 
 2055 105c 660FFECA 		paddd	%xmm2, %xmm1
 2056 1060 660F76C5 		pcmpeqd	%xmm5, %xmm0
 2057 1064 660FDBC5 		pand	%xmm5, %xmm0
 2058 1068 660FFEC1 		paddd	%xmm1, %xmm0
 2059 106c 660F6FC8 		movdqa	%xmm0, %xmm1
 2060 1070 660F73D9 		psrldq	$8, %xmm1
 2060      08
 2061 1075 660FFEC1 		paddd	%xmm1, %xmm0
 2062 1079 660F6FC8 		movdqa	%xmm0, %xmm1
 2063 107d 660F73D9 		psrldq	$4, %xmm1
 2063      04
 2064 1082 660FFEC1 		paddd	%xmm1, %xmm0
 2065 1086 66410F7E 		movd	%xmm0, %r8d
 2065      C0
 2066 108b EB0B     		jmp	.L244
 2067 108d 0F1F00   		.p2align 4,,10
 2068              		.p2align 3
 2069              	.L253:
 2070 1090 89C2     		movl	%eax, %edx
 2071 1092 83E203   		andl	$3, %edx
 2072 1095 8B1494   		movl	(%rsp,%rdx,4), %edx
 2073              	.L244:
 2074 1098 3311     		xorl	(%rcx), %edx
 2075 109a 89C7     		movl	%eax, %edi
 2076 109c 83C001   		addl	$1, %eax
 2077 109f 83E703   		andl	$3, %edi
 2078 10a2 4883C104 		addq	$4, %rcx
 2079 10a6 83F820   		cmpl	$32, %eax
 2080 10a9 8914BC   		movl	%edx, (%rsp,%rdi,4)
 2081 10ac 75E2     		jne	.L253
 2082 10ae 8B442408 		movl	8(%rsp), %eax
 2083 10b2 8B54240C 		movl	12(%rsp), %edx
 2084 10b6 4585C0   		testl	%r8d, %r8d
 2085 10b9 8D1450   		leal	(%rax,%rdx,2), %edx
 2086 10bc 8B442404 		movl	4(%rsp), %eax
 2087 10c0 8D1450   		leal	(%rax,%rdx,2), %edx
 2088 10c3 8B0424   		movl	(%rsp), %eax
 2089 10c6 8D0450   		leal	(%rax,%rdx,2), %eax
 2090 10c9 742B     		je	.L245
 2091 10cb 31FF     		xorl	%edi, %edi
 2092 10cd 0F1F00   		.p2align 4,,10
 2093              		.p2align 3
 2094              	.L246:
 2095 10d0 89C2     		movl	%eax, %edx
 2096 10d2 83C701   		addl	$1, %edi
 2097 10d5 C1E204   		sall	$4, %edx
 2098 10d8 8D0C02   		leal	(%rdx,%rax), %ecx
 2099 10db 83C001   		addl	$1, %eax
 2100 10de 83E00F   		andl	$15, %eax
 2101 10e1 89CA     		movl	%ecx, %edx
 2102 10e3 C1E208   		sall	$8, %edx
 2103 10e6 01CA     		addl	%ecx, %edx
 2104 10e8 89D1     		movl	%edx, %ecx
 2105 10ea C1E110   		sall	$16, %ecx
 2106 10ed 01CA     		addl	%ecx, %edx
 2107 10ef 31D3     		xorl	%edx, %ebx
 2108 10f1 4139F8   		cmpl	%edi, %r8d
 2109 10f4 75DA     		jne	.L246
 2110              	.L245:
 2111 10f6 0FB6C3   		movzbl	%bl, %eax
 2112 10f9 8906     		movl	%eax, (%rsi)
 2113 10fb 0FB6C7   		movzbl	%bh, %eax
 2114 10fe 894604   		movl	%eax, 4(%rsi)
 2115 1101 89D8     		movl	%ebx, %eax
 2116 1103 C1EB18   		shrl	$24, %ebx
 2117 1106 C1E810   		shrl	$16, %eax
 2118 1109 895E0C   		movl	%ebx, 12(%rsi)
 2119 110c 25FF0000 		andl	$255, %eax
 2119      00
 2120 1111 894608   		movl	%eax, 8(%rsi)
 2121 1114 488B4424 		movq	24(%rsp), %rax
 2121      18
 2122 1119 64483304 		xorq	%fs:40, %rax
 2122      25280000 
 2122      00
 2123 1122 7506     		jne	.L254
 2124 1124 4883C420 		addq	$32, %rsp
 2125              		.cfi_remember_state
 2126              		.cfi_def_cfa_offset 16
 2127 1128 5B       		popq	%rbx
 2128              		.cfi_def_cfa_offset 8
 2129 1129 C3       		ret
 2130              	.L254:
 2131              		.cfi_restore_state
 2132 112a E8000000 		call	__stack_chk_fail
 2132      00
 2133              		.cfi_endproc
 2134              	.LFE60:
 2136              		.section	.text.unlikely
 2137              	.LCOLDE25:
 2138              		.text
 2139              	.LHOTE25:
 2140              		.section	.text.unlikely
 2141              	.LCOLDB26:
 2142              		.text
 2143              	.LHOTB26:
 2144 112f 90       		.p2align 4,,15
 2145              		.globl	decrypt
 2147              	decrypt:
 2148              	.LFB61:
 2149              		.cfi_startproc
 2150 1130 53       		pushq	%rbx
 2151              		.cfi_def_cfa_offset 16
 2152              		.cfi_offset 3, -16
 2153 1131 660FEFED 		pxor	%xmm5, %xmm5
 2154 1135 B9000000 		movl	$key, %ecx
 2154      00
 2155 113a 31D2     		xorl	%edx, %edx
 2156 113c 4883EC20 		subq	$32, %rsp
 2157              		.cfi_def_cfa_offset 48
 2158 1140 8B5F0C   		movl	12(%rdi), %ebx
 2159 1143 660F6F15 		movdqa	key(%rip), %xmm2
 2159      00000000 
 2160 114b 64488B04 		movq	%fs:40, %rax
 2160      25280000 
 2160      00
 2161 1154 48894424 		movq	%rax, 24(%rsp)
 2161      18
 2162 1159 31C0     		xorl	%eax, %eax
 2163 115b 660F6F0D 		movdqa	key+16(%rip), %xmm1
 2163      00000000 
 2164 1163 660F76D5 		pcmpeqd	%xmm5, %xmm2
 2165 1167 C1E308   		sall	$8, %ebx
 2166 116a 035F08   		addl	8(%rdi), %ebx
 2167 116d 660F6F25 		movdqa	key+32(%rip), %xmm4
 2167      00000000 
 2168 1175 660F76CD 		pcmpeqd	%xmm5, %xmm1
 2169 1179 660F6F35 		movdqa	.LC24(%rip), %xmm6
 2169      00000000 
 2170 1181 660F76E5 		pcmpeqd	%xmm5, %xmm4
 2171 1185 C1E308   		sall	$8, %ebx
 2172 1188 035F04   		addl	4(%rdi), %ebx
 2173 118b 660FDBCE 		pand	%xmm6, %xmm1
 2174 118f 660F6F1D 		movdqa	key+48(%rip), %xmm3
 2174      00000000 
 2175 1197 660FDBD6 		pand	%xmm6, %xmm2
 2176 119b 660FDBE6 		pand	%xmm6, %xmm4
 2177 119f 660F76DD 		pcmpeqd	%xmm5, %xmm3
 2178 11a3 660F6F05 		movdqa	key+96(%rip), %xmm0
 2178      00000000 
 2179 11ab C1E308   		sall	$8, %ebx
 2180 11ae 660FFED1 		paddd	%xmm1, %xmm2
 2181 11b2 660FDBDE 		pand	%xmm6, %xmm3
 2182 11b6 031F     		addl	(%rdi), %ebx
 2183 11b8 660FFEE2 		paddd	%xmm2, %xmm4
 2184 11bc 660F6F0D 		movdqa	key+80(%rip), %xmm1
 2184      00000000 
 2185 11c4 660F76C5 		pcmpeqd	%xmm5, %xmm0
 2186 11c8 660F6F15 		movdqa	key+64(%rip), %xmm2
 2186      00000000 
 2187 11d0 660F76CD 		pcmpeqd	%xmm5, %xmm1
 2188 11d4 660FFEDC 		paddd	%xmm4, %xmm3
 2189 11d8 660FDBC6 		pand	%xmm6, %xmm0
 2190 11dc 660F76D5 		pcmpeqd	%xmm5, %xmm2
 2191 11e0 660FDBCE 		pand	%xmm6, %xmm1
 2192 11e4 0F292C24 		movaps	%xmm5, (%rsp)
 2193 11e8 660FDBD6 		pand	%xmm6, %xmm2
 2194 11ec 660F762D 		pcmpeqd	key+112(%rip), %xmm5
 2194      00000000 
 2195 11f4 660F6FE3 		movdqa	%xmm3, %xmm4
 2196 11f8 660FDBEE 		pand	%xmm6, %xmm5
 2197 11fc 660F6FDA 		movdqa	%xmm2, %xmm3
 2198 1200 660F6FD1 		movdqa	%xmm1, %xmm2
 2199 1204 660FFEDC 		paddd	%xmm4, %xmm3
 2200 1208 660FFED3 		paddd	%xmm3, %xmm2
 2201 120c 660FFEC2 		paddd	%xmm2, %xmm0
 2202 1210 660FFEE8 		paddd	%xmm0, %xmm5
 2203 1214 660F6FC5 		movdqa	%xmm5, %xmm0
 2204 1218 660F6FCD 		movdqa	%xmm5, %xmm1
 2205 121c 660F73D9 		psrldq	$8, %xmm1
 2205      08
 2206 1221 660FFEC1 		paddd	%xmm1, %xmm0
 2207 1225 660F6FC8 		movdqa	%xmm0, %xmm1
 2208 1229 660F73D9 		psrldq	$4, %xmm1
 2208      04
 2209 122e 660FFEC1 		paddd	%xmm1, %xmm0
 2210 1232 66410F7E 		movd	%xmm0, %r8d
 2210      C0
 2211 1237 EB0F     		jmp	.L257
 2212 1239 0F1F8000 		.p2align 4,,10
 2212      000000
 2213              		.p2align 3
 2214              	.L266:
 2215 1240 89C2     		movl	%eax, %edx
 2216 1242 83E203   		andl	$3, %edx
 2217 1245 8B1494   		movl	(%rsp,%rdx,4), %edx
 2218              	.L257:
 2219 1248 3311     		xorl	(%rcx), %edx
 2220 124a 89C7     		movl	%eax, %edi
 2221 124c 83C001   		addl	$1, %eax
 2222 124f 83E703   		andl	$3, %edi
 2223 1252 4883C104 		addq	$4, %rcx
 2224 1256 83F820   		cmpl	$32, %eax
 2225 1259 8914BC   		movl	%edx, (%rsp,%rdi,4)
 2226 125c 75E2     		jne	.L266
 2227 125e 8B442408 		movl	8(%rsp), %eax
 2228 1262 8B54240C 		movl	12(%rsp), %edx
 2229 1266 8D1450   		leal	(%rax,%rdx,2), %edx
 2230 1269 8B442404 		movl	4(%rsp), %eax
 2231 126d 8D1450   		leal	(%rax,%rdx,2), %edx
 2232 1270 8B0424   		movl	(%rsp), %eax
 2233 1273 8D44500F 		leal	15(%rax,%rdx,2), %eax
 2234 1277 83E00F   		andl	$15, %eax
 2235 127a 4585C0   		testl	%r8d, %r8d
 2236 127d 742F     		je	.L258
 2237 127f 31FF     		xorl	%edi, %edi
 2238              		.p2align 4,,10
 2239 1281 0F1F8000 		.p2align 3
 2239      000000
 2240              	.L259:
 2241 1288 89C2     		movl	%eax, %edx
 2242 128a 83C701   		addl	$1, %edi
 2243 128d C1E204   		sall	$4, %edx
 2244 1290 8D0C02   		leal	(%rdx,%rax), %ecx
 2245 1293 83C00F   		addl	$15, %eax
 2246 1296 83E00F   		andl	$15, %eax
 2247 1299 89CA     		movl	%ecx, %edx
 2248 129b C1E208   		sall	$8, %edx
 2249 129e 01CA     		addl	%ecx, %edx
 2250 12a0 89D1     		movl	%edx, %ecx
 2251 12a2 C1E110   		sall	$16, %ecx
 2252 12a5 01CA     		addl	%ecx, %edx
 2253 12a7 31D3     		xorl	%edx, %ebx
 2254 12a9 4139F8   		cmpl	%edi, %r8d
 2255 12ac 75DA     		jne	.L259
 2256              	.L258:
 2257 12ae 0FB6C3   		movzbl	%bl, %eax
 2258 12b1 8906     		movl	%eax, (%rsi)
 2259 12b3 0FB6C7   		movzbl	%bh, %eax
 2260 12b6 894604   		movl	%eax, 4(%rsi)
 2261 12b9 89D8     		movl	%ebx, %eax
 2262 12bb C1EB18   		shrl	$24, %ebx
 2263 12be C1E810   		shrl	$16, %eax
 2264 12c1 895E0C   		movl	%ebx, 12(%rsi)
 2265 12c4 25FF0000 		andl	$255, %eax
 2265      00
 2266 12c9 894608   		movl	%eax, 8(%rsi)
 2267 12cc 488B4424 		movq	24(%rsp), %rax
 2267      18
 2268 12d1 64483304 		xorq	%fs:40, %rax
 2268      25280000 
 2268      00
 2269 12da 7506     		jne	.L267
 2270 12dc 4883C420 		addq	$32, %rsp
 2271              		.cfi_remember_state
 2272              		.cfi_def_cfa_offset 16
 2273 12e0 5B       		popq	%rbx
 2274              		.cfi_def_cfa_offset 8
 2275 12e1 C3       		ret
 2276              	.L267:
 2277              		.cfi_restore_state
 2278 12e2 E8000000 		call	__stack_chk_fail
 2278      00
 2279              		.cfi_endproc
 2280              	.LFE61:
 2282              		.section	.text.unlikely
 2283              	.LCOLDE26:
 2284              		.text
 2285              	.LHOTE26:
 2286              		.section	.rodata.str1.8
 2287 00cb 00000000 		.align 8
 2287      00
 2288              	.LC27:
 2289 00d0 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 2289      20202020 
 2289      20202020 
 2289      76656E64 
 2289      6F722049 
 2290              		.section	.rodata.str1.1
 2291              	.LC28:
 2292 0041 3C564944 		.string	"<VID:PID>"
 2292      3A504944 
 2292      3E00
 2293              	.LC29:
 2294 004b 69767000 		.string	"ivp"
 2295              	.LC30:
 2296 004f 6900     		.string	"i"
 2297              		.section	.rodata.str1.8
 2298 0105 000000   		.align 8
 2299              	.LC31:
 2300 0108 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 2300      20202056 
 2300      49442C20 
 2300      50494420 
 2300      616E6420 
 2301              		.section	.rodata.str1.1
 2302              	.LC32:
 2303 0051 3C564944 		.string	"<VID:PID[:DID]>"
 2303      3A504944 
 2303      5B3A4449 
 2303      445D3E00 
 2304              	.LC33:
 2305 0061 767000   		.string	"vp"
 2306              	.LC34:
 2307 0064 7600     		.string	"v"
 2308              		.section	.rodata.str1.8
 2309 013d 000000   		.align 8
 2310              	.LC35:
 2311 0140 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 2311      20202020 
 2311      6669726D 
 2311      77617265 
 2311      20746F20 
 2312              		.section	.rodata.str1.1
 2313              	.LC36:
 2314 0066 3C666972 		.string	"<firmware.hex>"
 2314      6D776172 
 2314      652E6865 
 2314      783E00
 2315              	.LC37:
 2316 0075 667700   		.string	"fw"
 2317              	.LC38:
 2318 0078 6600     		.string	"f"
 2319              		.section	.rodata.str1.8
 2320 016d 000000   		.align 8
 2321              	.LC39:
 2322 0170 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 2322      642F7772 
 2322      69746520 
 2322      64696769 
 2322      74616C20 
 2323              		.section	.rodata.str1.1
 2324              	.LC40:
 2325 007a 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 2325      4366675B 
 2325      2C626974 
 2325      4366675D 
 2325      2A3E00
 2326              	.LC41:
 2327 008d 706F7274 		.string	"ports"
 2327      7300
 2328              	.LC42:
 2329 0093 6400     		.string	"d"
 2330              	.LC43:
 2331 0095 20202020 		.string	"         query the JTAG chain"
 2331      20202020 
 2331      20717565 
 2331      72792074 
 2331      6865204A 
 2332              	.LC44:
 2333 00b3 3C6A7461 		.string	"<jtagBits>"
 2333      67426974 
 2333      733E00
 2334              	.LC45:
 2335 00be 71756572 		.string	"query"
 2335      7900
 2336              	.LC46:
 2337 00c4 7100     		.string	"q"
 2338              	.LC47:
 2339 00c6 20202020 		.string	"         program a device"
 2339      20202020 
 2339      2070726F 
 2339      6772616D 
 2339      20612064 
 2340              	.LC48:
 2341 00e0 3C636F6E 		.string	"<config>"
 2341      6669673E 
 2341      00
 2342              	.LC49:
 2343 00e9 70726F67 		.string	"program"
 2343      72616D00 
 2344              	.LC50:
 2345 00f1 7000     		.string	"p"
 2346              		.section	.rodata.str1.8
 2347 019d 000000   		.align 8
 2348              	.LC51:
 2349 01a0 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 2349      20202020 
 2349      77686963 
 2349      6820636F 
 2349      6D6D2063 
 2350              		.section	.rodata.str1.1
 2351              	.LC52:
 2352 00f3 3C636F6E 		.string	"<conduit>"
 2352      64756974 
 2352      3E00
 2353              	.LC53:
 2354 00fd 636F6E64 		.string	"conduit"
 2354      75697400 
 2355              	.LC54:
 2356 0105 6300     		.string	"c"
 2357              		.section	.rodata.str1.8
 2358 01d4 00000000 		.align 8
 2359              	.LC55:
 2360 01d8 20202020 		.string	"    a series of CommFPGA actions"
 2360      61207365 
 2360      72696573 
 2360      206F6620 
 2360      436F6D6D 
 2361              		.section	.rodata.str1.1
 2362              	.LC56:
 2363 0107 3C616374 		.string	"<actionString>"
 2363      696F6E53 
 2363      7472696E 
 2363      673E00
 2364              	.LC57:
 2365 0116 61637469 		.string	"action"
 2365      6F6E00
 2366              	.LC58:
 2367 011d 6100     		.string	"a"
 2368              		.section	.rodata.str1.8
 2369 01f9 00000000 		.align 8
 2369      000000
 2370              	.LC59:
 2371 0200 20202020 		.string	"                    start up an interactive CommFPGA session"
 2371      20202020 
 2371      20202020 
 2371      20202020 
 2371      20202020 
 2372              		.section	.rodata.str1.1
 2373              	.LC60:
 2374 011f 7368656C 		.string	"shell"
 2374      6C00
 2375              	.LC61:
 2376 0125 7300     		.string	"s"
 2377              		.section	.rodata.str1.8
 2378 023d 000000   		.align 8
 2379              	.LC62:
 2380 0240 20202020 		.string	"                enable benchmarking & checksumming"
 2380      20202020 
 2380      20202020 
 2380      20202020 
 2380      656E6162 
 2381              		.section	.rodata.str1.1
 2382              	.LC63:
 2383 0127 62656E63 		.string	"benchmark"
 2383      686D6172 
 2383      6B00
 2384              	.LC64:
 2385 0131 6200     		.string	"b"
 2386              		.section	.rodata.str1.8
 2387 0273 00000000 		.align 8
 2387      00
 2388              	.LC65:
 2389 0278 20202020 		.string	"                    reset the bulk endpoints"
 2389      20202020 
 2389      20202020 
 2389      20202020 
 2389      20202020 
 2390              		.section	.rodata.str1.1
 2391              	.LC66:
 2392 0133 72657365 		.string	"reset"
 2392      7400
 2393              		.section	.rodata.str1.8
 2394 02a5 000000   		.align 8
 2395              	.LC67:
 2396 02a8 20202077 		.string	"   write data from channel ch to file"
 2396      72697465 
 2396      20646174 
 2396      61206672 
 2396      6F6D2063 
 2397              		.section	.rodata.str1.1
 2398              	.LC68:
 2399 0139 3C63683A 		.string	"<ch:file.bin>"
 2399      66696C65 
 2399      2E62696E 
 2399      3E00
 2400              	.LC69:
 2401 0147 64756D70 		.string	"dumploop"
 2401      6C6F6F70 
 2401      00
 2402              	.LC70:
 2403 0150 6C00     		.string	"l"
 2404              		.section	.rodata.str1.8
 2405 02ce 0000     		.align 8
 2406              	.LC71:
 2407 02d0 20202020 		.string	"                     print this help and exit"
 2407      20202020 
 2407      20202020 
 2407      20202020 
 2407      20202020 
 2408              		.section	.rodata.str1.1
 2409              	.LC72:
 2410 0152 68656C70 		.string	"help"
 2410      00
 2411              	.LC73:
 2412 0157 6800     		.string	"h"
 2413              		.section	.rodata.str1.8
 2414 02fe 0000     		.align 8
 2415              	.LC74:
 2416 0300 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 2416      72697465 
 2416      20666972 
 2416      6D776172 
 2416      6520746F 
 2417              		.section	.rodata.str1.1
 2418              	.LC75:
 2419 0159 3C737464 		.string	"<std|fw.hex|fw.iic>"
 2419      7C66772E 
 2419      6865787C 
 2419      66772E69 
 2419      69633E00 
 2420              	.LC76:
 2421 016d 65657072 		.string	"eeprom"
 2421      6F6D00
 2422              		.section	.rodata.str1.8
 2423 0327 00       		.align 8
 2424              	.LC77:
 2425 0328 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 2425      20626163 
 2425      6B757020 
 2425      46583227 
 2425      73204545 
 2426              		.section	.rodata.str1.1
 2427              	.LC78:
 2428 0174 3C6B6269 		.string	"<kbitSize:fw.iic>"
 2428      7453697A 
 2428      653A6677 
 2428      2E696963 
 2428      3E00
 2429              	.LC79:
 2430 0186 6261636B 		.string	"backup"
 2430      757000
 2431              	.LC80:
 2432 018d 0909636F 		.string	"\t\tcommand for the project"
 2432      6D6D616E 
 2432      6420666F 
 2432      72207468 
 2432      65207072 
 2433              	.LC81:
 2434 01a7 70726F6A 		.string	"project"
 2434      65637400 
 2435              	.LC82:
 2436 01af 7A00     		.string	"z"
 2437              	.LC83:
 2438 01b1 666C636C 		.string	"flcli"
 2438      6900
 2439              	.LC84:
 2440 01b7 25733A20 		.string	"%s: insufficient memory\n"
 2440      696E7375 
 2440      66666963 
 2440      69656E74 
 2440      206D656D 
 2441              		.section	.rodata.str1.8
 2442 0353 00000000 		.align 8
 2442      00
 2443              	.LC85:
 2444 0358 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 2444      4C696E6B 
 2444      20436F6D 
 2444      6D616E64 
 2444      2D4C696E 
 2445              		.section	.rodata.str1.1
 2446              	.LC86:
 2447 01d0 0A00     		.string	"\n"
 2448              		.section	.rodata.str1.8
 2449 03ac 00000000 		.align 8
 2450              	.LC87:
 2451 03b0 0A496E74 		.string	"\nInteract with an FPGALink device.\n\n"
 2451      65726163 
 2451      74207769 
 2451      74682061 
 2451      6E204650 
 2452              		.section	.rodata.str1.1
 2453              	.LC88:
 2454 01d2 2020252D 		.string	"  %-10s %s\n"
 2454      31307320 
 2454      25730A00 
 2455              		.section	.rodata.str1.8
 2456 03d5 000000   		.align 8
 2457              	.LC89:
 2458 03d8 54727920 		.string	"Try '%s --help' for more information.\n"
 2458      27257320 
 2458      2D2D6865 
 2458      6C702720 
 2458      666F7220 
 2459 03ff 00       		.align 8
 2460              	.LC90:
 2461 0400 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 2461      6D707469 
 2461      6E672074 
 2461      6F206F70 
 2461      656E2063 
 2462              		.section	.rodata.str1.1
 2463              	.LC91:
 2464 01de 4C6F6164 		.string	"Loading firmware into %s...\n"
 2464      696E6720 
 2464      6669726D 
 2464      77617265 
 2464      20696E74 
 2465              	.LC92:
 2466 01fb 41776169 		.string	"Awaiting renumeration"
 2466      74696E67 
 2466      2072656E 
 2466      756D6572 
 2466      6174696F 
 2467              	.LC93:
 2468 0211 2E00     		.string	"."
 2469              		.section	.rodata.str1.8
 2470              		.align 8
 2471              	.LC94:
 2472 0438 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 2472      4C696E6B 
 2472      20646576 
 2472      69636520 
 2472      64696420 
 2473 046b 00000000 		.align 8
 2473      00
 2474              	.LC95:
 2475 0470 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 2475      6D707469 
 2475      6E672074 
 2475      6F206F70 
 2475      656E2063 
 2476 04ad 000000   		.align 8
 2477              	.LC96:
 2478 04b0 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 2478      64206E6F 
 2478      74206F70 
 2478      656E2046 
 2478      5047414C 
 2479 04fa 00000000 		.align 8
 2479      0000
 2480              	.LC97:
 2481 0500 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 2481      65637465 
 2481      6420746F 
 2481      20465047 
 2481      414C696E 
 2482 054f 00       		.align 8
 2483              	.LC98:
 2484 0550 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM...\n"
 2484      696E6720 
 2484      74686520 
 2484      7374616E 
 2484      64617264 
 2485 058f 00       		.align 8
 2486              	.LC99:
 2487 0590 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 2487      696E6720 
 2487      63757374 
 2487      6F6D2046 
 2487      5047414C 
 2488 05d1 00000000 		.align 8
 2488      000000
 2489              	.LC100:
 2490 05d8 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 2490      696E7661 
 2490      6C696420 
 2490      61726775 
 2490      6D656E74 
 2491 0613 00000000 		.align 8
 2491      00
 2492              	.LC101:
 2493 0618 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 2493      6E672061 
 2493      20626163 
 2493      6B757020 
 2493      6F662025 
 2494              		.section	.rodata.str1.1
 2495              	.LC102:
 2496 0213 436F6E66 		.string	"Configuring ports...\n"
 2496      69677572 
 2496      696E6720 
 2496      706F7274 
 2496      732E2E2E 
 2497              	.LC103:
 2498 0229 25303858 		.string	"%08X"
 2498      00
 2499              		.section	.rodata.str1.8
 2500 0653 00000000 		.align 8
 2500      00
 2501              	.LC104:
 2502 0658 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 2502      6261636B 
 2502      3A202020 
 2502      32382020 
 2502      20323420 
 2503              		.section	.rodata.str1.1
 2504              	.LC105:
 2505 022e 20257300 		.string	" %s"
 2506              	.LC106:
 2507 0232 20202573 		.string	"  %s"
 2507      00
 2508              	.LC107:
 2509 0237 2025730A 		.string	" %s\n"
 2509      00
 2510              		.section	.rodata.str1.8
 2511              		.align 8
 2512              	.LC108:
 2513 0698 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 2513      46504741 
 2513      4C696E6B 
 2513      20646576 
 2513      69636520 
 2514              		.section	.rodata.str1.1
 2515              	.LC109:
 2516 023c 20203078 		.string	"  0x%08X\n"
 2516      25303858 
 2516      0A00
 2517              		.section	.rodata.str1.8
 2518 06d5 000000   		.align 8
 2519              	.LC110:
 2520 06d8 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 2520      46504741 
 2520      4C696E6B 
 2520      20646576 
 2520      69636520 
 2521              		.align 8
 2522              	.LC111:
 2523 0730 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 2523      20636861 
 2523      696E2073 
 2523      63616E20 
 2523      72657175 
 2524              		.section	.rodata.str1.1
 2525              	.LC112:
 2526 0246 50726F67 		.string	"Programming device...\n"
 2526      72616D6D 
 2526      696E6720 
 2526      64657669 
 2526      63652E2E 
 2527              		.section	.rodata.str1.8
 2528 077f 00       		.align 8
 2529              	.LC113:
 2530 0780 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 2530      72616D20 
 2530      6F706572 
 2530      6174696F 
 2530      6E207265 
 2531              		.align 8
 2532              	.LC114:
 2533 07c8 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 2533      7574696E 
 2533      6720436F 
 2533      6D6D4650 
 2533      47412061 
 2534 07fd 000000   		.align 8
 2535              	.LC115:
 2536 0800 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 2536      46504741 
 2536      4C696E6B 
 2536      20646576 
 2536      69636520 
 2537 084c 00000000 		.align 8
 2538              	.LC116:
 2539 0850 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 2539      6F6E2072 
 2539      65717565 
 2539      73746564 
 2539      20627574 
 2540 088d 000000   		.align 8
 2541              	.LC117:
 2542 0890 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 2542      696E7661 
 2542      6C696420 
 2542      61726775 
 2542      6D656E74 
 2543 08cc 00000000 		.align 8
 2544              	.LC118:
 2545 08d0 436F7079 		.string	"Copying from channel %lu to %s"
 2545      696E6720 
 2545      66726F6D 
 2545      20636861 
 2545      6E6E656C 
 2546              		.section	.rodata.str1.1
 2547              	.LC119:
 2548 025d 0A436175 		.string	"\nCaught SIGINT, quitting...\n"
 2548      67687420 
 2548      53494749 
 2548      4E542C20 
 2548      71756974 
 2549              		.section	.rodata.str1.8
 2550 08ef 00       		.align 8
 2551              	.LC120:
 2552 08f0 0A456E74 		.string	"\nEntering CommFPGA command-line mode:\n"
 2552      6572696E 
 2552      6720436F 
 2552      6D6D4650 
 2552      47412063 
 2553              		.section	.rodata.str1.1
 2554              	.LC121:
 2555 027a 3E2000   		.string	"> "
 2556              		.section	.rodata.str1.8
 2557 0917 00       		.align 8
 2558              	.LC122:
 2559 0918 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 2559      46504741 
 2559      4C696E6B 
 2559      20646576 
 2559      69636520 
 2560 0961 00000000 		.align 8
 2560      000000
 2561              	.LC123:
 2562 0968 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 2562      6C207265 
 2562      71756573 
 2562      74656420 
 2562      62757420 
 2563              		.section	.rodata.str1.1
 2564              	.LC124:
 2565 027d 636F6F72 		.string	"coordi -- %d %d %d %d \n"
 2565      6469202D 
 2565      2D202564 
 2565      20256420 
 2565      25642025 
 2566              	.LC125:
 2567 0295 436F6F72 		.string	"Coordinates -- %d \n"
 2567      64696E61 
 2567      74657320 
 2567      2D2D2025 
 2567      64200A00 
 2568              	.LC126:
 2569 02a9 41676169 		.string	"Again send the coordinates \n"
 2569      6E207365 
 2569      6E642074 
 2569      68652063 
 2569      6F6F7264 
 2570              	.LC127:
 2571 02c6 41636B31 		.string	"Ack1 -- %d %d %d %d \n"
 2571      202D2D20 
 2571      25642025 
 2571      64202564 
 2571      20256420 
 2572              	.LC128:
 2573 02dc 25640A00 		.string	"%d\n"
 2574              	.LC129:
 2575 02e0 4920616D 		.string	"I am in state 2"
 2575      20696E20 
 2575      73746174 
 2575      65203200 
 2576              	.LC130:
 2577 02f0 53656E74 		.string	"Sent Ack2  %d %d %d %d \n"
 2577      2041636B 
 2577      32202025 
 2577      64202564 
 2577      20256420 
 2578              	.LC131:
 2579 0309 66697273 		.string	"first 32 -- %d %d %d %d \n"
 2579      74203332 
 2579      202D2D20 
 2579      25642025 
 2579      64202564 
 2580              	.LC132:
 2581 0323 6E657874 		.string	"next 32 -- %d %d %d %d \n"
 2581      20333220 
 2581      2D2D2025 
 2581      64202564 
 2581      20256420 
 2582              	.LC133:
 2583 033c 73686974 		.string	"shits -- %d %d %d %d \n"
 2583      73202D2D 
 2583      20256420 
 2583      25642025 
 2583      64202564 
 2584              	.LC134:
 2585 0353 55706461 		.string	"Updating csv with %d \n"
 2585      74696E67 
 2585      20637376 
 2585      20776974 
 2585      68202564 
 2586              	.LC135:
 2587 036a 25730A00 		.string	"%s\n"
 2588              	.LC136:
 2589 036e 41636B20 		.string	"Ack recived correct\n"
 2589      72656369 
 2589      76656420 
 2589      636F7272 
 2589      6563740A 
 2590              	.LC137:
 2591 0383 536C6565 		.string	"Sleeping 5 seconds\n"
 2591      70696E67 
 2591      20352073 
 2591      65636F6E 
 2591      64730A00 
 2592              		.section	.rodata.str1.8
 2593 09a4 00000000 		.align 8
 2594              	.LC138:
 2595 09a8 496E6372 		.string	"Increamenting chanr to %d chanw to %d\n"
 2595      65616D65 
 2595      6E74696E 
 2595      67206368 
 2595      616E7220 
 2596              		.section	.text.unlikely
 2597              	.LCOLDB139:
 2598              		.section	.text.startup,"ax",@progbits
 2599              	.LHOTB139:
 2600              		.p2align 4,,15
 2601              		.globl	main
 2603              	main:
 2604              	.LFB70:
 2605              		.cfi_startproc
 2606 0000 4157     		pushq	%r15
 2607              		.cfi_def_cfa_offset 16
 2608              		.cfi_offset 15, -16
 2609 0002 4156     		pushq	%r14
 2610              		.cfi_def_cfa_offset 24
 2611              		.cfi_offset 14, -24
 2612 0004 B9000000 		movl	$.LC27, %ecx
 2612      00
 2613 0009 4155     		pushq	%r13
 2614              		.cfi_def_cfa_offset 32
 2615              		.cfi_offset 13, -32
 2616 000b 4154     		pushq	%r12
 2617              		.cfi_def_cfa_offset 40
 2618              		.cfi_offset 12, -40
 2619 000d BA000000 		movl	$.LC28, %edx
 2619      00
 2620 0012 55       		pushq	%rbp
 2621              		.cfi_def_cfa_offset 48
 2622              		.cfi_offset 6, -48
 2623 0013 53       		pushq	%rbx
 2624              		.cfi_def_cfa_offset 56
 2625              		.cfi_offset 3, -56
 2626 0014 4881EC08 		subq	$520, %rsp
 2626      020000
 2627              		.cfi_def_cfa_offset 576
 2628 001b 897C245C 		movl	%edi, 92(%rsp)
 2629 001f 48897424 		movq	%rsi, 96(%rsp)
 2629      60
 2630 0024 BF000000 		movl	$.LC30, %edi
 2630      00
 2631 0029 BE000000 		movl	$.LC29, %esi
 2631      00
 2632 002e 64488B04 		movq	%fs:40, %rax
 2632      25280000 
 2632      00
 2633 0037 48898424 		movq	%rax, 504(%rsp)
 2633      F8010000 
 2634 003f 31C0     		xorl	%eax, %eax
 2635 0041 E8000000 		call	arg_str0
 2635      00
 2636 0046 B9000000 		movl	$.LC31, %ecx
 2636      00
 2637 004b BA000000 		movl	$.LC32, %edx
 2637      00
 2638 0050 BE000000 		movl	$.LC33, %esi
 2638      00
 2639 0055 BF000000 		movl	$.LC34, %edi
 2639      00
 2640 005a 4989C4   		movq	%rax, %r12
 2641 005d E8000000 		call	arg_str1
 2641      00
 2642 0062 B9000000 		movl	$.LC35, %ecx
 2642      00
 2643 0067 BA000000 		movl	$.LC36, %edx
 2643      00
 2644 006c BE000000 		movl	$.LC37, %esi
 2644      00
 2645 0071 BF000000 		movl	$.LC38, %edi
 2645      00
 2646 0076 4989C5   		movq	%rax, %r13
 2647 0079 E8000000 		call	arg_str0
 2647      00
 2648 007e B9000000 		movl	$.LC39, %ecx
 2648      00
 2649 0083 BA000000 		movl	$.LC40, %edx
 2649      00
 2650 0088 BE000000 		movl	$.LC41, %esi
 2650      00
 2651 008d BF000000 		movl	$.LC42, %edi
 2651      00
 2652 0092 4989C6   		movq	%rax, %r14
 2653 0095 E8000000 		call	arg_str0
 2653      00
 2654 009a B9000000 		movl	$.LC43, %ecx
 2654      00
 2655 009f BA000000 		movl	$.LC44, %edx
 2655      00
 2656 00a4 BE000000 		movl	$.LC45, %esi
 2656      00
 2657 00a9 BF000000 		movl	$.LC46, %edi
 2657      00
 2658 00ae 48894424 		movq	%rax, 16(%rsp)
 2658      10
 2659 00b3 E8000000 		call	arg_str0
 2659      00
 2660 00b8 B9000000 		movl	$.LC47, %ecx
 2660      00
 2661 00bd BA000000 		movl	$.LC48, %edx
 2661      00
 2662 00c2 BE000000 		movl	$.LC49, %esi
 2662      00
 2663 00c7 BF000000 		movl	$.LC50, %edi
 2663      00
 2664 00cc 48894424 		movq	%rax, 24(%rsp)
 2664      18
 2665 00d1 E8000000 		call	arg_str0
 2665      00
 2666 00d6 B9000000 		movl	$.LC51, %ecx
 2666      00
 2667 00db BA000000 		movl	$.LC52, %edx
 2667      00
 2668 00e0 BE000000 		movl	$.LC53, %esi
 2668      00
 2669 00e5 BF000000 		movl	$.LC54, %edi
 2669      00
 2670 00ea 48894424 		movq	%rax, 32(%rsp)
 2670      20
 2671 00ef E8000000 		call	arg_uint0
 2671      00
 2672 00f4 B9000000 		movl	$.LC55, %ecx
 2672      00
 2673 00f9 BA000000 		movl	$.LC56, %edx
 2673      00
 2674 00fe BE000000 		movl	$.LC57, %esi
 2674      00
 2675 0103 BF000000 		movl	$.LC58, %edi
 2675      00
 2676 0108 48894424 		movq	%rax, 40(%rsp)
 2676      28
 2677 010d E8000000 		call	arg_str0
 2677      00
 2678 0112 BA000000 		movl	$.LC59, %edx
 2678      00
 2679 0117 BE000000 		movl	$.LC60, %esi
 2679      00
 2680 011c BF000000 		movl	$.LC61, %edi
 2680      00
 2681 0121 48894424 		movq	%rax, 56(%rsp)
 2681      38
 2682 0126 E8000000 		call	arg_lit0
 2682      00
 2683 012b BA000000 		movl	$.LC62, %edx
 2683      00
 2684 0130 BE000000 		movl	$.LC63, %esi
 2684      00
 2685 0135 BF000000 		movl	$.LC64, %edi
 2685      00
 2686 013a 48894424 		movq	%rax, 72(%rsp)
 2686      48
 2687 013f E8000000 		call	arg_lit0
 2687      00
 2688 0144 BA000000 		movl	$.LC65, %edx
 2688      00
 2689 0149 BE000000 		movl	$.LC66, %esi
 2689      00
 2690 014e BF000000 		movl	$.LC17, %edi
 2690      00
 2691 0153 48894424 		movq	%rax, 80(%rsp)
 2691      50
 2692 0158 E8000000 		call	arg_lit0
 2692      00
 2693 015d B9000000 		movl	$.LC67, %ecx
 2693      00
 2694 0162 BA000000 		movl	$.LC68, %edx
 2694      00
 2695 0167 BE000000 		movl	$.LC69, %esi
 2695      00
 2696 016c BF000000 		movl	$.LC70, %edi
 2696      00
 2697 0171 48894424 		movq	%rax, 48(%rsp)
 2697      30
 2698 0176 E8000000 		call	arg_str0
 2698      00
 2699 017b BA000000 		movl	$.LC71, %edx
 2699      00
 2700 0180 BE000000 		movl	$.LC72, %esi
 2700      00
 2701 0185 BF000000 		movl	$.LC73, %edi
 2701      00
 2702 018a 48894424 		movq	%rax, 64(%rsp)
 2702      40
 2703 018f E8000000 		call	arg_lit0
 2703      00
 2704 0194 31FF     		xorl	%edi, %edi
 2705 0196 B9000000 		movl	$.LC74, %ecx
 2705      00
 2706 019b BA000000 		movl	$.LC75, %edx
 2706      00
 2707 01a0 BE000000 		movl	$.LC76, %esi
 2707      00
 2708 01a5 4889C3   		movq	%rax, %rbx
 2709 01a8 E8000000 		call	arg_str0
 2709      00
 2710 01ad B9000000 		movl	$.LC77, %ecx
 2710      00
 2711 01b2 BA000000 		movl	$.LC78, %edx
 2711      00
 2712 01b7 BE000000 		movl	$.LC79, %esi
 2712      00
 2713 01bc 31FF     		xorl	%edi, %edi
 2714 01be 4989C7   		movq	%rax, %r15
 2715 01c1 E8000000 		call	arg_str0
 2715      00
 2716 01c6 BF140000 		movl	$20, %edi
 2716      00
 2717 01cb 48894424 		movq	%rax, 8(%rsp)
 2717      08
 2718 01d0 E8000000 		call	arg_end
 2718      00
 2719 01d5 BA000000 		movl	$.LC80, %edx
 2719      00
 2720 01da BE000000 		movl	$.LC81, %esi
 2720      00
 2721 01df BF000000 		movl	$.LC82, %edi
 2721      00
 2722 01e4 4889C5   		movq	%rax, %rbp
 2723 01e7 E8000000 		call	arg_lit0
 2723      00
 2724 01ec 488B4C24 		movq	16(%rsp), %rcx
 2724      10
 2725 01f1 488B5424 		movq	32(%rsp), %rdx
 2725      20
 2726 01f6 488DBC24 		leaq	304(%rsp), %rdi
 2726      30010000 
 2727 01fe 488B7424 		movq	56(%rsp), %rsi
 2727      38
 2728 0203 48894424 		movq	%rax, 104(%rsp)
 2728      68
 2729 0208 4C89A424 		movq	%r12, 304(%rsp)
 2729      30010000 
 2730 0210 4C89AC24 		movq	%r13, 312(%rsp)
 2730      38010000 
 2731 0218 48898C24 		movq	%rcx, 328(%rsp)
 2731      48010000 
 2732 0220 488B4C24 		movq	24(%rsp), %rcx
 2732      18
 2733 0225 48899424 		movq	%rdx, 344(%rsp)
 2733      58010000 
 2734 022d 488B5424 		movq	72(%rsp), %rdx
 2734      48
 2735 0232 4889B424 		movq	%rsi, 360(%rsp)
 2735      68010000 
 2736 023a 488B7424 		movq	48(%rsp), %rsi
 2736      30
 2737 023f 48898C24 		movq	%rcx, 336(%rsp)
 2737      50010000 
 2738 0247 488B4C24 		movq	40(%rsp), %rcx
 2738      28
 2739 024c 48899424 		movq	%rdx, 368(%rsp)
 2739      70010000 
 2740 0254 488B5424 		movq	64(%rsp), %rdx
 2740      40
 2741 0259 4C89B424 		movq	%r14, 320(%rsp)
 2741      40010000 
 2742 0261 4889B424 		movq	%rsi, 384(%rsp)
 2742      80010000 
 2743 0269 48898C24 		movq	%rcx, 352(%rsp)
 2743      60010000 
 2744 0271 488B4C24 		movq	80(%rsp), %rcx
 2744      50
 2745 0276 48899424 		movq	%rdx, 392(%rsp)
 2745      88010000 
 2746 027e 48899C24 		movq	%rbx, 400(%rsp)
 2746      90010000 
 2747 0286 4C89BC24 		movq	%r15, 408(%rsp)
 2747      98010000 
 2748 028e 48898424 		movq	%rax, 424(%rsp)
 2748      A8010000 
 2749 0296 48898C24 		movq	%rcx, 376(%rsp)
 2749      78010000 
 2750 029e 488B4C24 		movq	8(%rsp), %rcx
 2750      08
 2751 02a3 4889AC24 		movq	%rbp, 432(%rsp)
 2751      B0010000 
 2752 02ab 48C78424 		movq	$0, 128(%rsp)
 2752      80000000 
 2752      00000000 
 2753 02b7 48C78424 		movq	$0, 136(%rsp)
 2753      88000000 
 2753      00000000 
 2754 02c3 48898C24 		movq	%rcx, 416(%rsp)
 2754      A0010000 
 2755 02cb E8000000 		call	arg_nullcheck
 2755      00
 2756 02d0 85C0     		testl	%eax, %eax
 2757 02d2 0F849700 		je	.L269
 2757      0000
 2758 02d8 488B3D00 		movq	stderr(%rip), %rdi
 2758      000000
 2759 02df B9000000 		movl	$.LC83, %ecx
 2759      00
 2760 02e4 BA000000 		movl	$.LC84, %edx
 2760      00
 2761 02e9 BE010000 		movl	$1, %esi
 2761      00
 2762 02ee 31C0     		xorl	%eax, %eax
 2763 02f0 4531ED   		xorl	%r13d, %r13d
 2764 02f3 BB010000 		movl	$1, %ebx
 2764      00
 2765 02f8 E8000000 		call	__fprintf_chk
 2765      00
 2766              	.L270:
 2767 02fd 4C89EF   		movq	%r13, %rdi
 2768 0300 E8000000 		call	free
 2768      00
 2769 0305 488BBC24 		movq	128(%rsp), %rdi
 2769      80000000 
 2770 030d E8000000 		call	flClose
 2770      00
 2771 0312 488B8C24 		movq	136(%rsp), %rcx
 2771      88000000 
 2772 031a 4885C9   		testq	%rcx, %rcx
 2773 031d 7425     		je	.L342
 2774 031f 488B3D00 		movq	stderr(%rip), %rdi
 2774      000000
 2775 0326 BA000000 		movl	$.LC135, %edx
 2775      00
 2776 032b BE010000 		movl	$1, %esi
 2776      00
 2777 0330 31C0     		xorl	%eax, %eax
 2778 0332 E8000000 		call	__fprintf_chk
 2778      00
 2779 0337 488BBC24 		movq	136(%rsp), %rdi
 2779      88000000 
 2780 033f E8000000 		call	flFreeError
 2780      00
 2781              	.L342:
 2782 0344 89D8     		movl	%ebx, %eax
 2783 0346 488B9C24 		movq	504(%rsp), %rbx
 2783      F8010000 
 2784 034e 6448331C 		xorq	%fs:40, %rbx
 2784      25280000 
 2784      00
 2785 0357 0F856807 		jne	.L395
 2785      0000
 2786 035d 4881C408 		addq	$520, %rsp
 2786      020000
 2787              		.cfi_remember_state
 2788              		.cfi_def_cfa_offset 56
 2789 0364 5B       		popq	%rbx
 2790              		.cfi_def_cfa_offset 48
 2791 0365 5D       		popq	%rbp
 2792              		.cfi_def_cfa_offset 40
 2793 0366 415C     		popq	%r12
 2794              		.cfi_def_cfa_offset 32
 2795 0368 415D     		popq	%r13
 2796              		.cfi_def_cfa_offset 24
 2797 036a 415E     		popq	%r14
 2798              		.cfi_def_cfa_offset 16
 2799 036c 415F     		popq	%r15
 2800              		.cfi_def_cfa_offset 8
 2801 036e C3       		ret
 2802              	.L269:
 2803              		.cfi_restore_state
 2804 036f 488B7424 		movq	96(%rsp), %rsi
 2804      60
 2805 0374 8B7C245C 		movl	92(%rsp), %edi
 2806 0378 488D9424 		leaq	304(%rsp), %rdx
 2806      30010000 
 2807 0380 E8000000 		call	arg_parse
 2807      00
 2808 0385 837B6000 		cmpl	$0, 96(%rbx)
 2809 0389 7E63     		jle	.L271
 2810 038b BA000000 		movl	$.LC83, %edx
 2810      00
 2811 0390 BE000000 		movl	$.LC85, %esi
 2811      00
 2812 0395 BF010000 		movl	$1, %edi
 2812      00
 2813 039a 31C0     		xorl	%eax, %eax
 2814 039c 4531ED   		xorl	%r13d, %r13d
 2815 039f 31DB     		xorl	%ebx, %ebx
 2816 03a1 E8000000 		call	__printf_chk
 2816      00
 2817 03a6 488B3D00 		movq	stdout(%rip), %rdi
 2817      000000
 2818 03ad 488DB424 		leaq	304(%rsp), %rsi
 2818      30010000 
 2819 03b5 BA000000 		movl	$.LC86, %edx
 2819      00
 2820 03ba E8000000 		call	arg_print_syntax
 2820      00
 2821 03bf BE000000 		movl	$.LC87, %esi
 2821      00
 2822 03c4 BF010000 		movl	$1, %edi
 2822      00
 2823 03c9 31C0     		xorl	%eax, %eax
 2824 03cb E8000000 		call	__printf_chk
 2824      00
 2825 03d0 488B3D00 		movq	stdout(%rip), %rdi
 2825      000000
 2826 03d7 488DB424 		leaq	304(%rsp), %rsi
 2826      30010000 
 2827 03df BA000000 		movl	$.LC88, %edx
 2827      00
 2828 03e4 E8000000 		call	arg_print_glossary
 2828      00
 2829 03e9 E90FFFFF 		jmp	.L270
 2829      FF
 2830              	.L271:
 2831 03ee 85C0     		testl	%eax, %eax
 2832 03f0 7E3E     		jle	.L272
 2833 03f2 488B3D00 		movq	stdout(%rip), %rdi
 2833      000000
 2834 03f9 BA000000 		movl	$.LC83, %edx
 2834      00
 2835 03fe 4889EE   		movq	%rbp, %rsi
 2836 0401 E8000000 		call	arg_print_errors
 2836      00
 2837 0406 B9000000 		movl	$.LC83, %ecx
 2837      00
 2838 040b BA000000 		movl	$.LC89, %edx
 2838      00
 2839              	.L386:
 2840 0410 488B3D00 		movq	stderr(%rip), %rdi
 2840      000000
 2841 0417 BE010000 		movl	$1, %esi
 2841      00
 2842 041c 31C0     		xorl	%eax, %eax
 2843 041e 4531ED   		xorl	%r13d, %r13d
 2844 0421 BB0C0000 		movl	$12, %ebx
 2844      00
 2845 0426 E8000000 		call	__fprintf_chk
 2845      00
 2846 042b E9CDFEFF 		jmp	.L270
 2846      FF
 2847              	.L272:
 2848 0430 488DB424 		leaq	136(%rsp), %rsi
 2848      88000000 
 2849 0438 31FF     		xorl	%edi, %edi
 2850 043a E8000000 		call	flInitialise
 2850      00
 2851 043f 85C0     		testl	%eax, %eax
 2852 0441 740D     		je	.L396
 2853              	.L321:
 2854 0443 4531ED   		xorl	%r13d, %r13d
 2855 0446 BB010000 		movl	$1, %ebx
 2855      00
 2856 044b E9ADFEFF 		jmp	.L270
 2856      FF
 2857              	.L396:
 2858 0450 498B4568 		movq	104(%r13), %rax
 2859 0454 BE000000 		movl	$.LC90, %esi
 2859      00
 2860 0459 BF010000 		movl	$1, %edi
 2860      00
 2861 045e 488B28   		movq	(%rax), %rbp
 2862 0461 31C0     		xorl	%eax, %eax
 2863 0463 4889EA   		movq	%rbp, %rdx
 2864 0466 E8000000 		call	__printf_chk
 2864      00
 2865 046b 488DB424 		leaq	128(%rsp), %rsi
 2865      80000000 
 2866 0473 31D2     		xorl	%edx, %edx
 2867 0475 4889EF   		movq	%rbp, %rdi
 2868 0478 E8000000 		call	flOpen
 2868      00
 2869 047d 85C0     		testl	%eax, %eax
 2870 047f 0F841401 		je	.L274
 2870      0000
 2871 0485 41837C24 		cmpl	$0, 96(%r12)
 2871      6000
 2872 048b 0F84C700 		je	.L275
 2872      0000
 2873 0491 498B4424 		movq	104(%r12), %rax
 2873      68
 2874 0496 BE000000 		movl	$.LC91, %esi
 2874      00
 2875 049b BF010000 		movl	$1, %edi
 2875      00
 2876 04a0 488B18   		movq	(%rax), %rbx
 2877 04a3 31C0     		xorl	%eax, %eax
 2878 04a5 4889DA   		movq	%rbx, %rdx
 2879 04a8 E8000000 		call	__printf_chk
 2879      00
 2880 04ad 41837E60 		cmpl	$0, 96(%r14)
 2880      00
 2881 04b2 0F84A802 		je	.L276
 2881      0000
 2882 04b8 498B4668 		movq	104(%r14), %rax
 2883 04bc 488D9424 		leaq	136(%rsp), %rdx
 2883      88000000 
 2884 04c4 4889DF   		movq	%rbx, %rdi
 2885 04c7 488B30   		movq	(%rax), %rsi
 2886 04ca E8000000 		call	flLoadCustomFirmware
 2886      00
 2887              	.L277:
 2888 04cf 85C0     		testl	%eax, %eax
 2889 04d1 0F856CFF 		jne	.L321
 2889      FFFF
 2890 04d7 BE000000 		movl	$.LC92, %esi
 2890      00
 2891 04dc BF010000 		movl	$1, %edi
 2891      00
 2892 04e1 BB3C0000 		movl	$60, %ebx
 2892      00
 2893 04e6 E8000000 		call	__printf_chk
 2893      00
 2894 04eb BFE80300 		movl	$1000, %edi
 2894      00
 2895 04f0 E8000000 		call	flSleep
 2895      00
 2896 04f5 EB23     		jmp	.L279
 2897              	.L397:
 2898 04f7 BFFA0000 		movl	$250, %edi
 2898      00
 2899 04fc 83EB01   		subl	$1, %ebx
 2900 04ff E8000000 		call	flSleep
 2900      00
 2901 0504 80BC2498 		cmpb	$0, 152(%rsp)
 2901      00000000 
 2902 050c 0F859B03 		jne	.L356
 2902      0000
 2903 0512 85DB     		testl	%ebx, %ebx
 2904 0514 0F849303 		je	.L356
 2904      0000
 2905              	.L279:
 2906 051a BE000000 		movl	$.LC93, %esi
 2906      00
 2907 051f BF010000 		movl	$1, %edi
 2907      00
 2908 0524 31C0     		xorl	%eax, %eax
 2909 0526 E8000000 		call	__printf_chk
 2909      00
 2910 052b 488B3D00 		movq	stdout(%rip), %rdi
 2910      000000
 2911 0532 E8000000 		call	fflush
 2911      00
 2912 0537 488D9424 		leaq	136(%rsp), %rdx
 2912      88000000 
 2913 053f 488DB424 		leaq	152(%rsp), %rsi
 2913      98000000 
 2914 0547 4889EF   		movq	%rbp, %rdi
 2915 054a E8000000 		call	flIsDeviceAvailable
 2915      00
 2916 054f 85C0     		testl	%eax, %eax
 2917 0551 74A4     		je	.L397
 2918 0553 E9EBFEFF 		jmp	.L321
 2918      FF
 2919              	.L275:
 2920 0558 4889E9   		movq	%rbp, %rcx
 2921 055b BA000000 		movl	$.LC96, %edx
 2921      00
 2922 0560 E9ABFEFF 		jmp	.L386
 2922      FF
 2923              	.L281:
 2924 0565 4889EA   		movq	%rbp, %rdx
 2925 0568 BE000000 		movl	$.LC95, %esi
 2925      00
 2926 056d BF010000 		movl	$1, %edi
 2926      00
 2927 0572 31C0     		xorl	%eax, %eax
 2928 0574 E8000000 		call	__printf_chk
 2928      00
 2929 0579 488D9424 		leaq	136(%rsp), %rdx
 2929      88000000 
 2930 0581 488DB424 		leaq	128(%rsp), %rsi
 2930      80000000 
 2931 0589 4889EF   		movq	%rbp, %rdi
 2932 058c E8000000 		call	flOpen
 2932      00
 2933 0591 85C0     		testl	%eax, %eax
 2934 0593 0F85AAFE 		jne	.L321
 2934      FFFF
 2935              	.L274:
 2936 0599 488BBC24 		movq	128(%rsp), %rdi
 2936      80000000 
 2937 05a1 E8000000 		call	flGetFirmwareVersion
 2937      00
 2938 05a6 488BBC24 		movq	128(%rsp), %rdi
 2938      80000000 
 2939 05ae 89C3     		movl	%eax, %ebx
 2940 05b0 E8000000 		call	flGetFirmwareID
 2940      00
 2941 05b5 4189D8   		movl	%ebx, %r8d
 2942 05b8 0FB7C8   		movzwl	%ax, %ecx
 2943 05bb 4889EA   		movq	%rbp, %rdx
 2944 05be 31C0     		xorl	%eax, %eax
 2945 05c0 BE000000 		movl	$.LC97, %esi
 2945      00
 2946 05c5 BF010000 		movl	$1, %edi
 2946      00
 2947 05ca E8000000 		call	__printf_chk
 2947      00
 2948 05cf 41837F60 		cmpl	$0, 96(%r15)
 2948      00
 2949 05d4 745F     		je	.L289
 2950 05d6 498B4768 		movq	104(%r15), %rax
 2951 05da 488B10   		movq	(%rax), %rdx
 2952 05dd 803A73   		cmpb	$115, (%rdx)
 2953 05e0 0F859201 		jne	.L286
 2953      0000
 2954 05e6 807A0174 		cmpb	$116, 1(%rdx)
 2955 05ea 0F858801 		jne	.L286
 2955      0000
 2956 05f0 807A0264 		cmpb	$100, 2(%rdx)
 2957 05f4 0F857E01 		jne	.L286
 2957      0000
 2958 05fa 807A0300 		cmpb	$0, 3(%rdx)
 2959 05fe 0F857401 		jne	.L286
 2959      0000
 2960 0604 BE000000 		movl	$.LC98, %esi
 2960      00
 2961 0609 BF010000 		movl	$1, %edi
 2961      00
 2962 060e 31C0     		xorl	%eax, %eax
 2963 0610 E8000000 		call	__printf_chk
 2963      00
 2964 0615 488BBC24 		movq	128(%rsp), %rdi
 2964      80000000 
 2965 061d 488D9424 		leaq	136(%rsp), %rdx
 2965      88000000 
 2966 0625 4889EE   		movq	%rbp, %rsi
 2967 0628 E8000000 		call	flFlashStandardFirmware
 2967      00
 2968              	.L287:
 2969 062d 85C0     		testl	%eax, %eax
 2970 062f 0F850EFE 		jne	.L321
 2970      FFFF
 2971              	.L289:
 2972 0635 488B4424 		movq	8(%rsp), %rax
 2972      08
 2973 063a 83786000 		cmpl	$0, 96(%rax)
 2974 063e 0F856601 		jne	.L398
 2974      0000
 2975              	.L285:
 2976 0644 488B4424 		movq	48(%rsp), %rax
 2976      30
 2977 0649 83786000 		cmpl	$0, 96(%rax)
 2978 064d 0F859902 		jne	.L292
 2978      0000
 2979              	.L295:
 2980 0653 488B4424 		movq	40(%rsp), %rax
 2980      28
 2981 0658 BB010000 		movl	$1, %ebx
 2981      00
 2982 065d 83786000 		cmpl	$0, 96(%rax)
 2983 0661 740C     		je	.L294
 2984 0663 488B4424 		movq	40(%rsp), %rax
 2984      28
 2985 0668 488B4068 		movq	104(%rax), %rax
 2986 066c 0FB618   		movzbl	(%rax), %ebx
 2987              	.L294:
 2988 066f 488BBC24 		movq	128(%rsp), %rdi
 2988      80000000 
 2989 0677 440FB6E3 		movzbl	%bl, %r12d
 2990 067b E8000000 		call	flIsNeroCapable
 2990      00
 2991 0680 488BBC24 		movq	128(%rsp), %rdi
 2991      80000000 
 2992 0688 4489E6   		movl	%r12d, %esi
 2993 068b 4189C5   		movl	%eax, %r13d
 2994 068e E8000000 		call	flIsCommCapable
 2994      00
 2995 0693 4189C6   		movl	%eax, %r14d
 2996 0696 488B4424 		movq	16(%rsp), %rax
 2996      10
 2997 069b 83786000 		cmpl	$0, 96(%rax)
 2998 069f 0F856902 		jne	.L399
 2998      0000
 2999              	.L296:
 3000 06a5 488B4424 		movq	24(%rsp), %rax
 3000      18
 3001 06aa 83786000 		cmpl	$0, 96(%rax)
 3002 06ae 0F844F01 		je	.L298
 3002      0000
 3003 06b4 4584ED   		testb	%r13b, %r13b
 3004 06b7 0F84FB03 		je	.L299
 3004      0000
 3005 06bd 488BBC24 		movq	128(%rsp), %rdi
 3005      80000000 
 3006 06c5 488D9424 		leaq	136(%rsp), %rdx
 3006      88000000 
 3007 06cd 31F6     		xorl	%esi, %esi
 3008 06cf E8000000 		call	flSelectConduit
 3008      00
 3009 06d4 85C0     		testl	%eax, %eax
 3010 06d6 0F8567FD 		jne	.L321
 3010      FFFF
 3011 06dc 488B4424 		movq	24(%rsp), %rax
 3011      18
 3012 06e1 488BBC24 		movq	128(%rsp), %rdi
 3012      80000000 
 3013 06e9 4C8D8C24 		leaq	136(%rsp), %r9
 3013      88000000 
 3014 06f1 488D8C24 		leaq	240(%rsp), %rcx
 3014      F0000000 
 3015 06f9 488D5424 		leaq	120(%rsp), %rdx
 3015      78
 3016 06fe 41B81000 		movl	$16, %r8d
 3016      0000
 3017 0704 488B4068 		movq	104(%rax), %rax
 3018 0708 488B30   		movq	(%rax), %rsi
 3019 070b E8000000 		call	jtagScanChain
 3019      00
 3020 0710 85C0     		testl	%eax, %eax
 3021 0712 0F852BFD 		jne	.L321
 3021      FFFF
 3022 0718 837C2478 		cmpl	$0, 120(%rsp)
 3022      00
 3023 071d 4889EA   		movq	%rbp, %rdx
 3024 0720 0F84DA10 		je	.L300
 3024      0000
 3025 0726 BE000000 		movl	$.LC108, %esi
 3025      00
 3026 072b BF010000 		movl	$1, %edi
 3026      00
 3027 0730 31DB     		xorl	%ebx, %ebx
 3028 0732 E8000000 		call	__printf_chk
 3028      00
 3029 0737 EB1C     		jmp	.L301
 3030              	.L302:
 3031 0739 8B949CF0 		movl	240(%rsp,%rbx,4), %edx
 3031      000000
 3032 0740 BE000000 		movl	$.LC109, %esi
 3032      00
 3033 0745 BF010000 		movl	$1, %edi
 3033      00
 3034 074a 31C0     		xorl	%eax, %eax
 3035 074c 4883C301 		addq	$1, %rbx
 3036 0750 E8000000 		call	__printf_chk
 3036      00
 3037              	.L301:
 3038 0755 395C2478 		cmpl	%ebx, 120(%rsp)
 3039 0759 77DE     		ja	.L302
 3040 075b E9B11000 		jmp	.L303
 3040      00
 3041              	.L276:
 3042 0760 488D9424 		leaq	136(%rsp), %rdx
 3042      88000000 
 3043 0768 4889EE   		movq	%rbp, %rsi
 3044 076b 4889DF   		movq	%rbx, %rdi
 3045 076e E8000000 		call	flLoadStandardFirmware
 3045      00
 3046 0773 E957FDFF 		jmp	.L277
 3046      FF
 3047              	.L286:
 3048 0778 BE000000 		movl	$.LC99, %esi
 3048      00
 3049 077d BF010000 		movl	$1, %edi
 3049      00
 3050 0782 31C0     		xorl	%eax, %eax
 3051 0784 E8000000 		call	__printf_chk
 3051      00
 3052 0789 498B4768 		movq	104(%r15), %rax
 3053 078d 488BBC24 		movq	128(%rsp), %rdi
 3053      80000000 
 3054 0795 488D9424 		leaq	136(%rsp), %rdx
 3054      88000000 
 3055 079d 488B30   		movq	(%rax), %rsi
 3056 07a0 E8000000 		call	flFlashCustomFirmware
 3056      00
 3057 07a5 E983FEFF 		jmp	.L287
 3057      FF
 3058              	.L398:
 3059 07aa 488B4424 		movq	8(%rsp), %rax
 3059      08
 3060 07af 488DB424 		leaq	152(%rsp), %rsi
 3060      98000000 
 3061 07b7 31D2     		xorl	%edx, %edx
 3062 07b9 488B4068 		movq	104(%rax), %rax
 3063 07bd 488B38   		movq	(%rax), %rdi
 3064 07c0 E8000000 		call	strtoul
 3064      00
 3065 07c5 488B8C24 		movq	152(%rsp), %rcx
 3065      98000000 
 3066 07cd 4889C3   		movq	%rax, %rbx
 3067 07d0 80393A   		cmpb	$58, (%rcx)
 3068 07d3 0F84F102 		je	.L290
 3068      0000
 3069 07d9 B9000000 		movl	$.LC83, %ecx
 3069      00
 3070 07de BA000000 		movl	$.LC100, %edx
 3070      00
 3071              	.L389:
 3072 07e3 488B3D00 		movq	stderr(%rip), %rdi
 3072      000000
 3073 07ea BE010000 		movl	$1, %esi
 3073      00
 3074 07ef 31C0     		xorl	%eax, %eax
 3075 07f1 BB0C0000 		movl	$12, %ebx
 3075      00
 3076 07f6 E8000000 		call	__fprintf_chk
 3076      00
 3077              	.L315:
 3078 07fb 4531ED   		xorl	%r13d, %r13d
 3079 07fe E9FAFAFF 		jmp	.L270
 3079      FF
 3080              	.L298:
 3081 0803 488B4424 		movq	32(%rsp), %rax
 3081      20
 3082 0808 83786000 		cmpl	$0, 96(%rax)
 3083 080c 0F850803 		jne	.L400
 3083      0000
 3084              	.L304:
 3085 0812 488B4424 		movq	80(%rsp), %rax
 3085      50
 3086 0817 83786000 		cmpl	$0, 96(%rax)
 3087 081b 7407     		je	.L306
 3088 081d C6050000 		movb	$1, enableBenchmarking(%rip)
 3088      000001
 3089              	.L306:
 3090 0824 488B4424 		movq	56(%rsp), %rax
 3090      38
 3091 0829 83786000 		cmpl	$0, 96(%rax)
 3092 082d 0F855003 		jne	.L401
 3092      0000
 3093              	.L307:
 3094 0833 488B4424 		movq	64(%rsp), %rax
 3094      40
 3095 0838 83786000 		cmpl	$0, 96(%rax)
 3096 083c 0F85EE03 		jne	.L402
 3096      0000
 3097              	.L313:
 3098 0842 488B4424 		movq	72(%rsp), %rax
 3098      48
 3099 0847 83786000 		cmpl	$0, 96(%rax)
 3100 084b 0F851B04 		jne	.L403
 3100      0000
 3101 0851 488B4424 		movq	104(%rsp), %rax
 3101      68
 3102 0856 4531ED   		xorl	%r13d, %r13d
 3103 0859 83786000 		cmpl	$0, 96(%rax)
 3104 085d 7507     		jne	.L404
 3105              	.L388:
 3106 085f 31DB     		xorl	%ebx, %ebx
 3107 0861 E997FAFF 		jmp	.L270
 3107      FF
 3108              	.L404:
 3109 0866 31C0     		xorl	%eax, %eax
 3110 0868 BE000000 		movl	$.LC120, %esi
 3110      00
 3111 086d BF010000 		movl	$1, %edi
 3111      00
 3112 0872 E8000000 		call	__printf_chk
 3112      00
 3113 0877 4584F6   		testb	%r14b, %r14b
 3114 087a 0F84DF04 		je	.L328
 3114      0000
 3115 0880 4531ED   		xorl	%r13d, %r13d
 3116              	.L346:
 3117 0883 488BBC24 		movq	128(%rsp), %rdi
 3117      80000000 
 3118 088b 488D9424 		leaq	136(%rsp), %rdx
 3118      88000000 
 3119 0893 4489E6   		movl	%r12d, %esi
 3120 0896 E8000000 		call	flSelectConduit
 3120      00
 3121 089b 85C0     		testl	%eax, %eax
 3122 089d 0F844306 		je	.L329
 3122      0000
 3123              	.L331:
 3124 08a3 BB010000 		movl	$1, %ebx
 3124      00
 3125 08a8 E950FAFF 		jmp	.L270
 3125      FF
 3126              	.L356:
 3127 08ad 31C0     		xorl	%eax, %eax
 3128 08af BE000000 		movl	$.LC86, %esi
 3128      00
 3129 08b4 BF010000 		movl	$1, %edi
 3129      00
 3130 08b9 E8000000 		call	__printf_chk
 3130      00
 3131 08be 80BC2498 		cmpb	$0, 152(%rsp)
 3131      00000000 
 3132 08c6 0F8599FC 		jne	.L281
 3132      FFFF
 3133 08cc 488B3D00 		movq	stderr(%rip), %rdi
 3133      000000
 3134 08d3 4889E9   		movq	%rbp, %rcx
 3135 08d6 BA000000 		movl	$.LC94, %edx
 3135      00
 3136 08db BE010000 		movl	$1, %esi
 3136      00
 3137 08e0 31C0     		xorl	%eax, %eax
 3138 08e2 E8000000 		call	__fprintf_chk
 3138      00
 3139 08e7 E957FBFF 		jmp	.L321
 3139      FF
 3140              	.L292:
 3141 08ec 488BBC24 		movq	128(%rsp), %rdi
 3141      80000000 
 3142 08f4 488DB424 		leaq	136(%rsp), %rsi
 3142      88000000 
 3143 08fc E8000000 		call	flResetToggle
 3143      00
 3144 0901 85C0     		testl	%eax, %eax
 3145 0903 0F853AFB 		jne	.L321
 3145      FFFF
 3146 0909 E945FDFF 		jmp	.L295
 3146      FF
 3147              	.L399:
 3148 090e BE000000 		movl	$.LC102, %esi
 3148      00
 3149 0913 BF010000 		movl	$1, %edi
 3149      00
 3150 0918 31C0     		xorl	%eax, %eax
 3151 091a E8000000 		call	__printf_chk
 3151      00
 3152 091f 488B4424 		movq	16(%rsp), %rax
 3152      10
 3153 0924 488BBC24 		movq	128(%rsp), %rdi
 3153      80000000 
 3154 092c 488D8C24 		leaq	136(%rsp), %rcx
 3154      88000000 
 3155 0934 488D9424 		leaq	152(%rsp), %rdx
 3155      98000000 
 3156 093c 488B4068 		movq	104(%rax), %rax
 3157 0940 488B30   		movq	(%rax), %rsi
 3158 0943 E8000000 		call	flMultiBitPortAccess
 3158      00
 3159 0948 85C0     		testl	%eax, %eax
 3160 094a 0F85F3FA 		jne	.L321
 3160      FFFF
 3161 0950 448B8424 		movl	152(%rsp), %r8d
 3161      98000000 
 3162 0958 488D9C24 		leaq	480(%rsp), %rbx
 3162      E0010000 
 3163 0960 B9000000 		movl	$.LC103, %ecx
 3163      00
 3164 0965 BA090000 		movl	$9, %edx
 3164      00
 3165 096a BE010000 		movl	$1, %esi
 3165      00
 3166 096f 31C0     		xorl	%eax, %eax
 3167 0971 4889DF   		movq	%rbx, %rdi
 3168 0974 E8000000 		call	__sprintf_chk
 3168      00
 3169 0979 0FB68424 		movzbl	480(%rsp), %eax
 3169      E0010000 
 3170 0981 BE000000 		movl	$.LC104, %esi
 3170      00
 3171 0986 BF010000 		movl	$1, %edi
 3171      00
 3172 098b 83E830   		subl	$48, %eax
 3173 098e 4898     		cltq
 3174 0990 488B14C5 		movq	nibbles(,%rax,8), %rdx
 3174      00000000 
 3175 0998 31C0     		xorl	%eax, %eax
 3176 099a E8000000 		call	__printf_chk
 3176      00
 3177 099f 0FB68424 		movzbl	481(%rsp), %eax
 3177      E1010000 
 3178 09a7 BE000000 		movl	$.LC105, %esi
 3178      00
 3179 09ac BF010000 		movl	$1, %edi
 3179      00
 3180 09b1 83E830   		subl	$48, %eax
 3181 09b4 4898     		cltq
 3182 09b6 488B14C5 		movq	nibbles(,%rax,8), %rdx
 3182      00000000 
 3183 09be 31C0     		xorl	%eax, %eax
 3184 09c0 E8000000 		call	__printf_chk
 3184      00
 3185 09c5 0FB68424 		movzbl	482(%rsp), %eax
 3185      E2010000 
 3186 09cd BE000000 		movl	$.LC105, %esi
 3186      00
 3187 09d2 BF010000 		movl	$1, %edi
 3187      00
 3188 09d7 83E830   		subl	$48, %eax
 3189 09da 4898     		cltq
 3190 09dc 488B14C5 		movq	nibbles(,%rax,8), %rdx
 3190      00000000 
 3191 09e4 31C0     		xorl	%eax, %eax
 3192 09e6 E8000000 		call	__printf_chk
 3192      00
 3193 09eb 0FB68424 		movzbl	483(%rsp), %eax
 3193      E3010000 
 3194 09f3 BE000000 		movl	$.LC105, %esi
 3194      00
 3195 09f8 BF010000 		movl	$1, %edi
 3195      00
 3196 09fd 83E830   		subl	$48, %eax
 3197 0a00 4898     		cltq
 3198 0a02 488B14C5 		movq	nibbles(,%rax,8), %rdx
 3198      00000000 
 3199 0a0a 31C0     		xorl	%eax, %eax
 3200 0a0c E8000000 		call	__printf_chk
 3200      00
 3201 0a11 0FB68424 		movzbl	484(%rsp), %eax
 3201      E4010000 
 3202 0a19 BE000000 		movl	$.LC106, %esi
 3202      00
 3203 0a1e BF010000 		movl	$1, %edi
 3203      00
 3204 0a23 83E830   		subl	$48, %eax
 3205 0a26 4898     		cltq
 3206 0a28 488B14C5 		movq	nibbles(,%rax,8), %rdx
 3206      00000000 
 3207 0a30 31C0     		xorl	%eax, %eax
 3208 0a32 E8000000 		call	__printf_chk
 3208      00
 3209 0a37 0FB68424 		movzbl	485(%rsp), %eax
 3209      E5010000 
 3210 0a3f BE000000 		movl	$.LC105, %esi
 3210      00
 3211 0a44 BF010000 		movl	$1, %edi
 3211      00
 3212 0a49 83E830   		subl	$48, %eax
 3213 0a4c 4898     		cltq
 3214 0a4e 488B14C5 		movq	nibbles(,%rax,8), %rdx
 3214      00000000 
 3215 0a56 31C0     		xorl	%eax, %eax
 3216 0a58 E8000000 		call	__printf_chk
 3216      00
 3217 0a5d 0FB68424 		movzbl	486(%rsp), %eax
 3217      E6010000 
 3218 0a65 BE000000 		movl	$.LC105, %esi
 3218      00
 3219 0a6a BF010000 		movl	$1, %edi
 3219      00
 3220 0a6f 83E830   		subl	$48, %eax
 3221 0a72 4898     		cltq
 3222 0a74 488B14C5 		movq	nibbles(,%rax,8), %rdx
 3222      00000000 
 3223 0a7c 31C0     		xorl	%eax, %eax
 3224 0a7e E8000000 		call	__printf_chk
 3224      00
 3225 0a83 0FB68424 		movzbl	487(%rsp), %eax
 3225      E7010000 
 3226 0a8b BE000000 		movl	$.LC107, %esi
 3226      00
 3227 0a90 BF010000 		movl	$1, %edi
 3227      00
 3228 0a95 83E830   		subl	$48, %eax
 3229 0a98 4898     		cltq
 3230 0a9a 488B14C5 		movq	nibbles(,%rax,8), %rdx
 3230      00000000 
 3231 0aa2 31C0     		xorl	%eax, %eax
 3232 0aa4 E8000000 		call	__printf_chk
 3232      00
 3233 0aa9 BF640000 		movl	$100, %edi
 3233      00
 3234 0aae E8000000 		call	flSleep
 3234      00
 3235 0ab3 E9EDFBFF 		jmp	.L296
 3235      FF
 3236              	.L299:
 3237 0ab8 4889E9   		movq	%rbp, %rcx
 3238 0abb BA000000 		movl	$.LC111, %edx
 3238      00
 3239 0ac0 E94BF9FF 		jmp	.L386
 3239      FF
 3240              	.L395:
 3241 0ac5 E8000000 		call	__stack_chk_fail
 3241      00
 3242              	.L290:
 3243 0aca 4883C101 		addq	$1, %rcx
 3244 0ace 89C2     		movl	%eax, %edx
 3245 0ad0 BE000000 		movl	$.LC101, %esi
 3245      00
 3246 0ad5 BF010000 		movl	$1, %edi
 3246      00
 3247 0ada 31C0     		xorl	%eax, %eax
 3248 0adc 48898C24 		movq	%rcx, 152(%rsp)
 3248      98000000 
 3249 0ae4 E8000000 		call	__printf_chk
 3249      00
 3250 0ae9 488B9424 		movq	152(%rsp), %rdx
 3250      98000000 
 3251 0af1 488BBC24 		movq	128(%rsp), %rdi
 3251      80000000 
 3252 0af9 488D8C24 		leaq	136(%rsp), %rcx
 3252      88000000 
 3253 0b01 89DE     		movl	%ebx, %esi
 3254 0b03 E8000000 		call	flSaveFirmware
 3254      00
 3255 0b08 85C0     		testl	%eax, %eax
 3256 0b0a 0F8434FB 		je	.L285
 3256      FFFF
 3257              	.L317:
 3258 0b10 BB010000 		movl	$1, %ebx
 3258      00
 3259 0b15 E9E1FCFF 		jmp	.L315
 3259      FF
 3260              	.L400:
 3261 0b1a 31C0     		xorl	%eax, %eax
 3262 0b1c BE000000 		movl	$.LC112, %esi
 3262      00
 3263 0b21 BF010000 		movl	$1, %edi
 3263      00
 3264 0b26 E8000000 		call	__printf_chk
 3264      00
 3265 0b2b 4584ED   		testb	%r13b, %r13b
 3266 0b2e 0F84EF00 		je	.L305
 3266      0000
 3267              	.L344:
 3268 0b34 488BBC24 		movq	128(%rsp), %rdi
 3268      80000000 
 3269 0b3c 488D9424 		leaq	136(%rsp), %rdx
 3269      88000000 
 3270 0b44 31F6     		xorl	%esi, %esi
 3271 0b46 E8000000 		call	flSelectConduit
 3271      00
 3272 0b4b 85C0     		testl	%eax, %eax
 3273 0b4d 0F85F0F8 		jne	.L321
 3273      FFFF
 3274 0b53 488B4424 		movq	32(%rsp), %rax
 3274      20
 3275 0b58 488BBC24 		movq	128(%rsp), %rdi
 3275      80000000 
 3276 0b60 488D8C24 		leaq	136(%rsp), %rcx
 3276      88000000 
 3277 0b68 31D2     		xorl	%edx, %edx
 3278 0b6a 488B4068 		movq	104(%rax), %rax
 3279 0b6e 488B30   		movq	(%rax), %rsi
 3280 0b71 E8000000 		call	flProgram
 3280      00
 3281 0b76 85C0     		testl	%eax, %eax
 3282 0b78 0F85C5F8 		jne	.L321
 3282      FFFF
 3283 0b7e E98FFCFF 		jmp	.L304
 3283      FF
 3284              	.L401:
 3285 0b83 31C0     		xorl	%eax, %eax
 3286 0b85 4889EA   		movq	%rbp, %rdx
 3287 0b88 BE000000 		movl	$.LC114, %esi
 3287      00
 3288 0b8d BF010000 		movl	$1, %edi
 3288      00
 3289 0b92 E8000000 		call	__printf_chk
 3289      00
 3290 0b97 4584F6   		testb	%r14b, %r14b
 3291 0b9a 0F84B201 		je	.L308
 3291      0000
 3292 0ba0 488BBC24 		movq	128(%rsp), %rdi
 3292      80000000 
 3293 0ba8 488D9424 		leaq	136(%rsp), %rdx
 3293      88000000 
 3294 0bb0 4489E6   		movl	%r12d, %esi
 3295 0bb3 E8000000 		call	flSelectConduit
 3295      00
 3296 0bb8 85C0     		testl	%eax, %eax
 3297 0bba 0F8550FF 		jne	.L317
 3297      FFFF
 3298 0bc0 488BBC24 		movq	128(%rsp), %rdi
 3298      80000000 
 3299 0bc8 488D9424 		leaq	136(%rsp), %rdx
 3299      88000000 
 3300 0bd0 488DB424 		leaq	152(%rsp), %rsi
 3300      98000000 
 3301 0bd8 E8000000 		call	flIsFPGARunning
 3301      00
 3302 0bdd 85C0     		testl	%eax, %eax
 3303 0bdf 0F852BFF 		jne	.L317
 3303      FFFF
 3304 0be5 80BC2498 		cmpb	$0, 152(%rsp)
 3304      00000000 
 3305 0bed 0F84430C 		je	.L310
 3305      0000
 3306 0bf3 488B4424 		movq	56(%rsp), %rax
 3306      38
 3307 0bf8 488BBC24 		movq	128(%rsp), %rdi
 3307      80000000 
 3308 0c00 488D9424 		leaq	136(%rsp), %rdx
 3308      88000000 
 3309 0c08 488B4068 		movq	104(%rax), %rax
 3310 0c0c 488B30   		movq	(%rax), %rsi
 3311 0c0f E8000000 		call	parseLine
 3311      00
 3312 0c14 85C0     		testl	%eax, %eax
 3313 0c16 89C3     		movl	%eax, %ebx
 3314 0c18 0F85DDFB 		jne	.L315
 3314      FFFF
 3315 0c1e E910FCFF 		jmp	.L307
 3315      FF
 3316              	.L305:
 3317 0c23 4889E9   		movq	%rbp, %rcx
 3318 0c26 BA000000 		movl	$.LC113, %edx
 3318      00
 3319 0c2b E9E0F7FF 		jmp	.L386
 3319      FF
 3320              	.L402:
 3321 0c30 488B4068 		movq	104(%rax), %rax
 3322 0c34 488DB424 		leaq	144(%rsp), %rsi
 3322      90000000 
 3323 0c3c BA0A0000 		movl	$10, %edx
 3323      00
 3324 0c41 488B38   		movq	(%rax), %rdi
 3325 0c44 E8000000 		call	strtoul
 3325      00
 3326 0c49 488B8C24 		movq	144(%rsp), %rcx
 3326      90000000 
 3327 0c51 4889C3   		movq	%rax, %rbx
 3328 0c54 80393A   		cmpb	$58, (%rcx)
 3329 0c57 0F840F01 		je	.L314
 3329      0000
 3330 0c5d B9000000 		movl	$.LC83, %ecx
 3330      00
 3331 0c62 BA000000 		movl	$.LC117, %edx
 3331      00
 3332 0c67 E977FBFF 		jmp	.L389
 3332      FF
 3333              	.L403:
 3334 0c6c 31C0     		xorl	%eax, %eax
 3335 0c6e BE000000 		movl	$.LC120, %esi
 3335      00
 3336 0c73 BF010000 		movl	$1, %edi
 3336      00
 3337 0c78 E8000000 		call	__printf_chk
 3337      00
 3338 0c7d 4584F6   		testb	%r14b, %r14b
 3339 0c80 0F84D900 		je	.L328
 3339      0000
 3340 0c86 488BBC24 		movq	128(%rsp), %rdi
 3340      80000000 
 3341 0c8e 488D9424 		leaq	136(%rsp), %rdx
 3341      88000000 
 3342 0c96 4489E6   		movl	%r12d, %esi
 3343 0c99 E8000000 		call	flSelectConduit
 3343      00
 3344 0c9e 85C0     		testl	%eax, %eax
 3345 0ca0 0F859DF7 		jne	.L321
 3345      FFFF
 3346 0ca6 488BBC24 		movq	128(%rsp), %rdi
 3346      80000000 
 3347 0cae 488D9424 		leaq	136(%rsp), %rdx
 3347      88000000 
 3348 0cb6 488DB424 		leaq	152(%rsp), %rsi
 3348      98000000 
 3349 0cbe E8000000 		call	flIsFPGARunning
 3349      00
 3350 0cc3 85C0     		testl	%eax, %eax
 3351 0cc5 0F8578F7 		jne	.L321
 3351      FFFF
 3352 0ccb 80BC2498 		cmpb	$0, 152(%rsp)
 3352      00000000 
 3353 0cd3 0F84710B 		je	.L380
 3353      0000
 3354              	.L371:
 3355 0cd9 BF000000 		movl	$.LC121, %edi
 3355      00
 3356 0cde E8000000 		call	readline
 3356      00
 3357 0ce3 4885C0   		testq	%rax, %rax
 3358 0ce6 4989C5   		movq	%rax, %r13
 3359 0ce9 7442     		je	.L324
 3360 0ceb 0FB600   		movzbl	(%rax), %eax
 3361 0cee 84C0     		testb	%al, %al
 3362 0cf0 74E7     		je	.L371
 3363 0cf2 3C71     		cmpb	$113, %al
 3364 0cf4 7437     		je	.L324
 3365 0cf6 4C89EF   		movq	%r13, %rdi
 3366 0cf9 E8000000 		call	add_history
 3366      00
 3367 0cfe 488BBC24 		movq	128(%rsp), %rdi
 3367      80000000 
 3368 0d06 488D9424 		leaq	136(%rsp), %rdx
 3368      88000000 
 3369 0d0e 4C89EE   		movq	%r13, %rsi
 3370 0d11 E8000000 		call	parseLine
 3370      00
 3371 0d16 85C0     		testl	%eax, %eax
 3372 0d18 0F85250B 		jne	.L384
 3372      0000
 3373 0d1e 4C89EF   		movq	%r13, %rdi
 3374 0d21 E8000000 		call	free
 3374      00
 3375 0d26 41807D00 		cmpb	$113, 0(%r13)
 3375      71
 3376 0d2b 75AC     		jne	.L371
 3377              	.L324:
 3378 0d2d 488B4424 		movq	104(%rsp), %rax
 3378      68
 3379 0d32 83786000 		cmpl	$0, 96(%rax)
 3380 0d36 0F8423FB 		je	.L388
 3380      FFFF
 3381 0d3c BE000000 		movl	$.LC120, %esi
 3381      00
 3382 0d41 BF010000 		movl	$1, %edi
 3382      00
 3383 0d46 31C0     		xorl	%eax, %eax
 3384 0d48 E8000000 		call	__printf_chk
 3384      00
 3385 0d4d E931FBFF 		jmp	.L346
 3385      FF
 3386              	.L308:
 3387 0d52 4889E9   		movq	%rbp, %rcx
 3388 0d55 BA000000 		movl	$.LC116, %edx
 3388      00
 3389 0d5a E9B1F6FF 		jmp	.L386
 3389      FF
 3390              	.L328:
 3391 0d5f 4889E9   		movq	%rbp, %rcx
 3392 0d62 BA000000 		movl	$.LC123, %edx
 3392      00
 3393 0d67 E9A4F6FF 		jmp	.L386
 3393      FF
 3394              	.L314:
 3395 0d6c 4883C101 		addq	$1, %rcx
 3396 0d70 4889C2   		movq	%rax, %rdx
 3397 0d73 BE000000 		movl	$.LC118, %esi
 3397      00
 3398 0d78 BF010000 		movl	$1, %edi
 3398      00
 3399 0d7d 31C0     		xorl	%eax, %eax
 3400 0d7f 48898C24 		movq	%rcx, 144(%rsp)
 3400      90000000 
 3401 0d87 E8000000 		call	__printf_chk
 3401      00
 3402 0d8c 488BBC24 		movq	144(%rsp), %rdi
 3402      90000000 
 3403 0d94 BE000000 		movl	$.LC2, %esi
 3403      00
 3404 0d99 E8000000 		call	fopen
 3404      00
 3405 0d9e 4885C0   		testq	%rax, %rax
 3406 0da1 4989C5   		movq	%rax, %r13
 3407 0da4 0F844C0A 		je	.L349
 3407      0000
 3408 0daa E8000000 		call	sigRegisterHandler
 3408      00
 3409 0daf 488BBC24 		movq	128(%rsp), %rdi
 3409      80000000 
 3410 0db7 488D9424 		leaq	136(%rsp), %rdx
 3410      88000000 
 3411 0dbf 4489E6   		movl	%r12d, %esi
 3412 0dc2 E8000000 		call	flSelectConduit
 3412      00
 3413 0dc7 85C0     		testl	%eax, %eax
 3414 0dc9 0F8541FD 		jne	.L317
 3414      FFFF
 3415 0dcf 488BBC24 		movq	128(%rsp), %rdi
 3415      80000000 
 3416 0dd7 0FB6DB   		movzbl	%bl, %ebx
 3417 0dda 4C8D8424 		leaq	136(%rsp), %r8
 3417      88000000 
 3418 0de2 31C9     		xorl	%ecx, %ecx
 3419 0de4 BA005800 		movl	$22528, %edx
 3419      00
 3420 0de9 89DE     		movl	%ebx, %esi
 3421 0deb E8000000 		call	flReadChannelAsyncSubmit
 3421      00
 3422 0df0 85C0     		testl	%eax, %eax
 3423 0df2 0F8518FD 		jne	.L317
 3423      FFFF
 3424              	.L318:
 3425 0df8 488BBC24 		movq	128(%rsp), %rdi
 3425      80000000 
 3426 0e00 4C8D8424 		leaq	136(%rsp), %r8
 3426      88000000 
 3427 0e08 31C9     		xorl	%ecx, %ecx
 3428 0e0a BA005800 		movl	$22528, %edx
 3428      00
 3429 0e0f 89DE     		movl	%ebx, %esi
 3430 0e11 E8000000 		call	flReadChannelAsyncSubmit
 3430      00
 3431 0e16 85C0     		testl	%eax, %eax
 3432 0e18 0F85F2FC 		jne	.L317
 3432      FFFF
 3433 0e1e 488D4C24 		leaq	124(%rsp), %rcx
 3433      7C
 3434 0e23 488BBC24 		movq	128(%rsp), %rdi
 3434      80000000 
 3435 0e2b 4C8D8424 		leaq	136(%rsp), %r8
 3435      88000000 
 3436 0e33 488DB424 		leaq	152(%rsp), %rsi
 3436      98000000 
 3437 0e3b 4889CA   		movq	%rcx, %rdx
 3438 0e3e E8000000 		call	flReadChannelAsyncAwait
 3438      00
 3439 0e43 85C0     		testl	%eax, %eax
 3440 0e45 0F85C5FC 		jne	.L317
 3440      FFFF
 3441 0e4b 8B54247C 		movl	124(%rsp), %edx
 3442 0e4f 488BBC24 		movq	152(%rsp), %rdi
 3442      98000000 
 3443 0e57 4C89E9   		movq	%r13, %rcx
 3444 0e5a BE010000 		movl	$1, %esi
 3444      00
 3445 0e5f E8000000 		call	fwrite
 3445      00
 3446 0e64 BE000000 		movl	$.LC93, %esi
 3446      00
 3447 0e69 BF010000 		movl	$1, %edi
 3447      00
 3448 0e6e 31C0     		xorl	%eax, %eax
 3449 0e70 E8000000 		call	__printf_chk
 3449      00
 3450 0e75 E8000000 		call	sigIsRaised
 3450      00
 3451 0e7a 84C0     		testb	%al, %al
 3452 0e7c 0F8476FF 		je	.L318
 3452      FFFF
 3453 0e82 BE000000 		movl	$.LC119, %esi
 3453      00
 3454 0e87 BF010000 		movl	$1, %edi
 3454      00
 3455 0e8c 31C0     		xorl	%eax, %eax
 3456 0e8e E8000000 		call	__printf_chk
 3456      00
 3457 0e93 488D4C24 		leaq	124(%rsp), %rcx
 3457      7C
 3458 0e98 488BBC24 		movq	128(%rsp), %rdi
 3458      80000000 
 3459 0ea0 4C8D8424 		leaq	136(%rsp), %r8
 3459      88000000 
 3460 0ea8 488DB424 		leaq	152(%rsp), %rsi
 3460      98000000 
 3461 0eb0 4889CA   		movq	%rcx, %rdx
 3462 0eb3 E8000000 		call	flReadChannelAsyncAwait
 3462      00
 3463 0eb8 85C0     		testl	%eax, %eax
 3464 0eba 0F8550FC 		jne	.L317
 3464      FFFF
 3465 0ec0 8B54247C 		movl	124(%rsp), %edx
 3466 0ec4 488BBC24 		movq	152(%rsp), %rdi
 3466      98000000 
 3467 0ecc 4C89E9   		movq	%r13, %rcx
 3468 0ecf BE010000 		movl	$1, %esi
 3468      00
 3469 0ed4 E8000000 		call	fwrite
 3469      00
 3470 0ed9 4C89EF   		movq	%r13, %rdi
 3471 0edc E8000000 		call	fclose
 3471      00
 3472 0ee1 E95CF9FF 		jmp	.L313
 3472      FF
 3473              	.L329:
 3474 0ee6 488BBC24 		movq	128(%rsp), %rdi
 3474      80000000 
 3475 0eee 488D9424 		leaq	136(%rsp), %rdx
 3475      88000000 
 3476 0ef6 488DB424 		leaq	152(%rsp), %rsi
 3476      98000000 
 3477 0efe E8000000 		call	flIsFPGARunning
 3477      00
 3478 0f03 85C0     		testl	%eax, %eax
 3479 0f05 0F8598F9 		jne	.L331
 3479      FFFF
 3480 0f0b 80BC2498 		cmpb	$0, 152(%rsp)
 3480      00000000 
 3481 0f13 0F84B808 		je	.L332
 3481      0000
 3482 0f19 660F6F05 		movdqa	.LC24(%rip), %xmm0
 3482      00000000 
 3483 0f21 488DB424 		leaq	160(%rsp), %rsi
 3483      A0000000 
 3484 0f29 488DBC24 		leaq	192(%rsp), %rdi
 3484      C0000000 
 3485 0f31 488D9C24 		leaq	480(%rsp), %rbx
 3485      E0010000 
 3486 0f39 4C8DBC24 		leaq	224(%rsp), %r15
 3486      E0000000 
 3487 0f41 0F298424 		movaps	%xmm0, 192(%rsp)
 3487      C0000000 
 3488 0f49 E8000000 		call	encrypt
 3488      00
 3489 0f4e 8B8424A0 		movl	160(%rsp), %eax
 3489      000000
 3490 0f55 888424E0 		movb	%al, 480(%rsp)
 3490      010000
 3491 0f5c 8B8424A4 		movl	164(%rsp), %eax
 3491      000000
 3492 0f63 888424E1 		movb	%al, 481(%rsp)
 3492      010000
 3493 0f6a 8B8424A8 		movl	168(%rsp), %eax
 3493      000000
 3494 0f71 888424E2 		movb	%al, 482(%rsp)
 3494      010000
 3495 0f78 8B8424AC 		movl	172(%rsp), %eax
 3495      000000
 3496 0f7f 888424E3 		movb	%al, 483(%rsp)
 3496      010000
 3497              	.L351:
 3498 0f86 4531E4   		xorl	%r12d, %r12d
 3499 0f89 BD010000 		movl	$1, %ebp
 3499      00
 3500              	.L334:
 3501 0f8e 488BBC24 		movq	128(%rsp), %rdi
 3501      80000000 
 3502 0f96 450FB6F4 		movzbl	%r12b, %r14d
 3503 0f9a 4C8D8424 		leaq	136(%rsp), %r8
 3503      88000000 
 3504 0fa2 488D8C24 		leaq	448(%rsp), %rcx
 3504      C0010000 
 3505 0faa BA040000 		movl	$4, %edx
 3505      00
 3506 0faf 4489F6   		movl	%r14d, %esi
 3507 0fb2 E8000000 		call	flReadChannel
 3507      00
 3508 0fb7 0FB69424 		movzbl	448(%rsp), %edx
 3508      C0010000 
 3509 0fbf 0FB68C24 		movzbl	449(%rsp), %ecx
 3509      C1010000 
 3510 0fc7 BE000000 		movl	$.LC124, %esi
 3510      00
 3511 0fcc 440FB684 		movzbl	450(%rsp), %r8d
 3511      24C20100 
 3511      00
 3512 0fd5 440FB68C 		movzbl	451(%rsp), %r9d
 3512      24C30100 
 3512      00
 3513 0fde BF010000 		movl	$1, %edi
 3513      00
 3514 0fe3 31C0     		xorl	%eax, %eax
 3515 0fe5 899424A0 		movl	%edx, 160(%rsp)
 3515      000000
 3516 0fec 898C24A4 		movl	%ecx, 164(%rsp)
 3516      000000
 3517 0ff3 44898424 		movl	%r8d, 168(%rsp)
 3517      A8000000 
 3518 0ffb 44898C24 		movl	%r9d, 172(%rsp)
 3518      AC000000 
 3519 1003 E8000000 		call	__printf_chk
 3519      00
 3520 1008 488DB424 		leaq	176(%rsp), %rsi
 3520      B0000000 
 3521 1010 488DBC24 		leaq	160(%rsp), %rdi
 3521      A0000000 
 3522 1018 E8000000 		call	decrypt
 3522      00
 3523 101d 448BAC24 		movl	176(%rsp), %r13d
 3523      B0000000 
 3524 1025 448B8C24 		movl	188(%rsp), %r9d
 3524      BC000000 
 3525 102d BE000000 		movl	$.LC124, %esi
 3525      00
 3526 1032 448B8424 		movl	184(%rsp), %r8d
 3526      B8000000 
 3527 103a 8B8C24B4 		movl	180(%rsp), %ecx
 3527      000000
 3528 1041 BF010000 		movl	$1, %edi
 3528      00
 3529 1046 31C0     		xorl	%eax, %eax
 3530 1048 4489EA   		movl	%r13d, %edx
 3531 104b E8000000 		call	__printf_chk
 3531      00
 3532 1050 4489EA   		movl	%r13d, %edx
 3533 1053 BE000000 		movl	$.LC125, %esi
 3533      00
 3534 1058 BF010000 		movl	$1, %edi
 3534      00
 3535 105d 31C0     		xorl	%eax, %eax
 3536 105f E8000000 		call	__printf_chk
 3536      00
 3537 1064 8B8424B0 		movl	176(%rsp), %eax
 3537      000000
 3538 106b 488BBC24 		movq	128(%rsp), %rdi
 3538      80000000 
 3539 1073 4C8D8424 		leaq	136(%rsp), %r8
 3539      88000000 
 3540 107b 488D8C24 		leaq	448(%rsp), %rcx
 3540      C0010000 
 3541 1083 BA040000 		movl	$4, %edx
 3541      00
 3542 1088 400FB6F5 		movzbl	%bpl, %esi
 3543 108c 888424D0 		movb	%al, 464(%rsp)
 3543      010000
 3544 1093 8B8424B4 		movl	180(%rsp), %eax
 3544      000000
 3545 109a 888424D1 		movb	%al, 465(%rsp)
 3545      010000
 3546 10a1 8B8424B8 		movl	184(%rsp), %eax
 3546      000000
 3547 10a8 888424D2 		movb	%al, 466(%rsp)
 3547      010000
 3548 10af 8B8424BC 		movl	188(%rsp), %eax
 3548      000000
 3549 10b6 888424D3 		movb	%al, 467(%rsp)
 3549      010000
 3550 10bd E8000000 		call	flWriteChannel
 3550      00
 3551 10c2 BE000000 		movl	$.LC126, %esi
 3551      00
 3552 10c7 BF010000 		movl	$1, %edi
 3552      00
 3553 10cc 31C0     		xorl	%eax, %eax
 3554 10ce E8000000 		call	__printf_chk
 3554      00
 3555 10d3 488BBC24 		movq	128(%rsp), %rdi
 3555      80000000 
 3556 10db 4C8D8424 		leaq	136(%rsp), %r8
 3556      88000000 
 3557 10e3 488D8C24 		leaq	448(%rsp), %rcx
 3557      C0010000 
 3558 10eb BA040000 		movl	$4, %edx
 3558      00
 3559 10f0 4489F6   		movl	%r14d, %esi
 3560 10f3 E8000000 		call	flReadChannel
 3560      00
 3561 10f8 0FB68424 		movzbl	448(%rsp), %eax
 3561      C0010000 
 3562 1100 488DB424 		leaq	176(%rsp), %rsi
 3562      B0000000 
 3563 1108 488DBC24 		leaq	160(%rsp), %rdi
 3563      A0000000 
 3564 1110 898424A0 		movl	%eax, 160(%rsp)
 3564      000000
 3565 1117 0FB68424 		movzbl	449(%rsp), %eax
 3565      C1010000 
 3566 111f 898424A4 		movl	%eax, 164(%rsp)
 3566      000000
 3567 1126 0FB68424 		movzbl	450(%rsp), %eax
 3567      C2010000 
 3568 112e 898424A8 		movl	%eax, 168(%rsp)
 3568      000000
 3569 1135 0FB68424 		movzbl	451(%rsp), %eax
 3569      C3010000 
 3570 113d 898424AC 		movl	%eax, 172(%rsp)
 3570      000000
 3571 1144 E8000000 		call	decrypt
 3571      00
 3572 1149 448B8C24 		movl	188(%rsp), %r9d
 3572      BC000000 
 3573 1151 448B8424 		movl	184(%rsp), %r8d
 3573      B8000000 
 3574 1159 BE000000 		movl	$.LC127, %esi
 3574      00
 3575 115e 8B8C24B4 		movl	180(%rsp), %ecx
 3575      000000
 3576 1165 8B9424B0 		movl	176(%rsp), %edx
 3576      000000
 3577 116c BF010000 		movl	$1, %edi
 3577      00
 3578 1171 31C0     		xorl	%eax, %eax
 3579 1173 E8000000 		call	__printf_chk
 3579      00
 3580 1178 BA410000 		movl	$65, %edx
 3580      00
 3581 117d 31C0     		xorl	%eax, %eax
 3582 117f 41B94500 		movl	$69, %r9d
 3582      0000
 3583 1185 41B82500 		movl	$37, %r8d
 3583      0000
 3584 118b B9910000 		movl	$145, %ecx
 3584      00
 3585 1190 BE000000 		movl	$.LC127, %esi
 3585      00
 3586 1195 BF010000 		movl	$1, %edi
 3586      00
 3587 119a E8000000 		call	__printf_chk
 3587      00
 3588 119f 31D2     		xorl	%edx, %edx
 3589 11a1 83BC24B0 		cmpl	$65, 176(%rsp)
 3589      00000041 
 3590 11a9 0F84E300 		je	.L405
 3590      0000
 3591              	.L336:
 3592 11af 31C0     		xorl	%eax, %eax
 3593 11b1 BE000000 		movl	$.LC128, %esi
 3593      00
 3594 11b6 BF010000 		movl	$1, %edi
 3594      00
 3595 11bb E8000000 		call	__printf_chk
 3595      00
 3596 11c0 83BC24B0 		cmpl	$65, 176(%rsp)
 3596      00000041 
 3597 11c8 0F84F500 		je	.L406
 3597      0000
 3598              	.L337:
 3599 11ce BE000000 		movl	$.LC137, %esi
 3599      00
 3600 11d3 BF010000 		movl	$1, %edi
 3600      00
 3601 11d8 31C0     		xorl	%eax, %eax
 3602 11da E8000000 		call	__printf_chk
 3602      00
 3603 11df BF050000 		movl	$5, %edi
 3603      00
 3604 11e4 E8000000 		call	sleep
 3604      00
 3605 11e9 488BBC24 		movq	128(%rsp), %rdi
 3605      80000000 
 3606 11f1 4C8D8424 		leaq	136(%rsp), %r8
 3606      88000000 
 3607 11f9 488D8C24 		leaq	448(%rsp), %rcx
 3607      C0010000 
 3608 1201 BA040000 		movl	$4, %edx
 3608      00
 3609 1206 4489F6   		movl	%r14d, %esi
 3610 1209 E8000000 		call	flReadChannel
 3610      00
 3611 120e 0FB68424 		movzbl	448(%rsp), %eax
 3611      C0010000 
 3612 1216 488DB424 		leaq	176(%rsp), %rsi
 3612      B0000000 
 3613 121e 488DBC24 		leaq	160(%rsp), %rdi
 3613      A0000000 
 3614 1226 898424A0 		movl	%eax, 160(%rsp)
 3614      000000
 3615 122d 0FB68424 		movzbl	449(%rsp), %eax
 3615      C1010000 
 3616 1235 898424A4 		movl	%eax, 164(%rsp)
 3616      000000
 3617 123c 0FB68424 		movzbl	450(%rsp), %eax
 3617      C2010000 
 3618 1244 898424A8 		movl	%eax, 168(%rsp)
 3618      000000
 3619 124b 0FB68424 		movzbl	451(%rsp), %eax
 3619      C3010000 
 3620 1253 898424AC 		movl	%eax, 172(%rsp)
 3620      000000
 3621 125a E8000000 		call	decrypt
 3621      00
 3622 125f 83BC24B0 		cmpl	$65, 176(%rsp)
 3622      00000041 
 3623 1267 0F843205 		je	.L407
 3623      0000
 3624              	.L339:
 3625 126d 4183C402 		addl	$2, %r12d
 3626 1271 83C502   		addl	$2, %ebp
 3627 1274 BE000000 		movl	$.LC138, %esi
 3627      00
 3628 1279 400FB6CD 		movzbl	%bpl, %ecx
 3629 127d 410FB6D4 		movzbl	%r12b, %edx
 3630 1281 BF010000 		movl	$1, %edi
 3630      00
 3631 1286 31C0     		xorl	%eax, %eax
 3632 1288 E8000000 		call	__printf_chk
 3632      00
 3633 128d E9FCFCFF 		jmp	.L334
 3633      FF
 3634              	.L405:
 3635 1292 81BC24B4 		cmpl	$145, 180(%rsp)
 3635      00000091 
 3635      000000
 3636 129d 0F850CFF 		jne	.L336
 3636      FFFF
 3637 12a3 83BC24B8 		cmpl	$37, 184(%rsp)
 3637      00000025 
 3638 12ab 0F85FEFE 		jne	.L336
 3638      FFFF
 3639 12b1 31D2     		xorl	%edx, %edx
 3640 12b3 83BC24BC 		cmpl	$69, 188(%rsp)
 3640      00000045 
 3641 12bb 0F94C2   		sete	%dl
 3642 12be E9ECFEFF 		jmp	.L336
 3642      FF
 3643              	.L406:
 3644 12c3 81BC24B4 		cmpl	$145, 180(%rsp)
 3644      00000091 
 3644      000000
 3645 12ce 0F85FAFE 		jne	.L337
 3645      FFFF
 3646 12d4 83BC24B8 		cmpl	$37, 184(%rsp)
 3646      00000025 
 3647 12dc 0F85ECFE 		jne	.L337
 3647      FFFF
 3648 12e2 83BC24BC 		cmpl	$69, 188(%rsp)
 3648      00000045 
 3649 12ea 0F85DEFE 		jne	.L337
 3649      FFFF
 3650              	.L340:
 3651 12f0 BE000000 		movl	$.LC136, %esi
 3651      00
 3652 12f5 BF010000 		movl	$1, %edi
 3652      00
 3653 12fa 31C0     		xorl	%eax, %eax
 3654 12fc E8000000 		call	__printf_chk
 3654      00
 3655 1301 BE000000 		movl	$.LC129, %esi
 3655      00
 3656 1306 BF010000 		movl	$1, %edi
 3656      00
 3657 130b 31C0     		xorl	%eax, %eax
 3658 130d E8000000 		call	__printf_chk
 3658      00
 3659 1312 488BBC24 		movq	128(%rsp), %rdi
 3659      80000000 
 3660 131a 400FB6ED 		movzbl	%bpl, %ebp
 3661 131e 4C8D8424 		leaq	136(%rsp), %r8
 3661      88000000 
 3662 1326 4889D9   		movq	%rbx, %rcx
 3663 1329 BA040000 		movl	$4, %edx
 3663      00
 3664 132e 89EE     		movl	%ebp, %esi
 3665 1330 450FB6E4 		movzbl	%r12b, %r12d
 3666 1334 E8000000 		call	flWriteChannel
 3666      00
 3667 1339 0FB68C24 		movzbl	481(%rsp), %ecx
 3667      E1010000 
 3668 1341 0FB69424 		movzbl	480(%rsp), %edx
 3668      E0010000 
 3669 1349 BE000000 		movl	$.LC130, %esi
 3669      00
 3670 134e 440FB68C 		movzbl	483(%rsp), %r9d
 3670      24E30100 
 3670      00
 3671 1357 440FB684 		movzbl	482(%rsp), %r8d
 3671      24E20100 
 3671      00
 3672 1360 BF010000 		movl	$1, %edi
 3672      00
 3673 1365 31C0     		xorl	%eax, %eax
 3674 1367 E8000000 		call	__printf_chk
 3674      00
 3675 136c 488DB424 		leaq	208(%rsp), %rsi
 3675      D0000000 
 3676 1374 4489EF   		movl	%r13d, %edi
 3677 1377 E8000000 		call	csvlooker
 3677      00
 3678 137c 448B8C24 		movl	220(%rsp), %r9d
 3678      DC000000 
 3679 1384 448B8424 		movl	216(%rsp), %r8d
 3679      D8000000 
 3680 138c BE000000 		movl	$.LC131, %esi
 3680      00
 3681 1391 8B8C24D4 		movl	212(%rsp), %ecx
 3681      000000
 3682 1398 8B9424D0 		movl	208(%rsp), %edx
 3682      000000
 3683 139f BF010000 		movl	$1, %edi
 3683      00
 3684 13a4 31C0     		xorl	%eax, %eax
 3685 13a6 E8000000 		call	__printf_chk
 3685      00
 3686 13ab 488DB424 		leaq	160(%rsp), %rsi
 3686      A0000000 
 3687 13b3 488DBC24 		leaq	208(%rsp), %rdi
 3687      D0000000 
 3688 13bb E8000000 		call	encrypt
 3688      00
 3689 13c0 8B8424A0 		movl	160(%rsp), %eax
 3689      000000
 3690 13c7 488BBC24 		movq	128(%rsp), %rdi
 3690      80000000 
 3691 13cf 4C8D8424 		leaq	136(%rsp), %r8
 3691      88000000 
 3692 13d7 488D8C24 		leaq	464(%rsp), %rcx
 3692      D0010000 
 3693 13df BA040000 		movl	$4, %edx
 3693      00
 3694 13e4 89EE     		movl	%ebp, %esi
 3695 13e6 888424D0 		movb	%al, 464(%rsp)
 3695      010000
 3696 13ed 8B8424A4 		movl	164(%rsp), %eax
 3696      000000
 3697 13f4 888424D1 		movb	%al, 465(%rsp)
 3697      010000
 3698 13fb 8B8424A8 		movl	168(%rsp), %eax
 3698      000000
 3699 1402 888424D2 		movb	%al, 466(%rsp)
 3699      010000
 3700 1409 8B8424AC 		movl	172(%rsp), %eax
 3700      000000
 3701 1410 888424D3 		movb	%al, 467(%rsp)
 3701      010000
 3702 1417 E8000000 		call	flWriteChannel
 3702      00
 3703 141c 488BBC24 		movq	128(%rsp), %rdi
 3703      80000000 
 3704 1424 4C8D8424 		leaq	136(%rsp), %r8
 3704      88000000 
 3705 142c 488D8C24 		leaq	448(%rsp), %rcx
 3705      C0010000 
 3706 1434 BA040000 		movl	$4, %edx
 3706      00
 3707 1439 4489E6   		movl	%r12d, %esi
 3708 143c E8000000 		call	flReadChannel
 3708      00
 3709 1441 0FB68424 		movzbl	448(%rsp), %eax
 3709      C0010000 
 3710 1449 488DB424 		leaq	176(%rsp), %rsi
 3710      B0000000 
 3711 1451 488DBC24 		leaq	160(%rsp), %rdi
 3711      A0000000 
 3712 1459 898424A0 		movl	%eax, 160(%rsp)
 3712      000000
 3713 1460 0FB68424 		movzbl	449(%rsp), %eax
 3713      C1010000 
 3714 1468 898424A4 		movl	%eax, 164(%rsp)
 3714      000000
 3715 146f 0FB68424 		movzbl	450(%rsp), %eax
 3715      C2010000 
 3716 1477 898424A8 		movl	%eax, 168(%rsp)
 3716      000000
 3717 147e 0FB68424 		movzbl	451(%rsp), %eax
 3717      C3010000 
 3718 1486 898424AC 		movl	%eax, 172(%rsp)
 3718      000000
 3719 148d E8000000 		call	decrypt
 3719      00
 3720 1492 8B8424B0 		movl	176(%rsp), %eax
 3720      000000
 3721 1499 8B9424B4 		movl	180(%rsp), %edx
 3721      000000
 3722 14a0 BE000000 		movl	$.LC127, %esi
 3722      00
 3723 14a5 448B8424 		movl	184(%rsp), %r8d
 3723      B8000000 
 3724 14ad 448B8C24 		movl	188(%rsp), %r9d
 3724      BC000000 
 3725 14b5 BF010000 		movl	$1, %edi
 3725      00
 3726 14ba 0FB6CA   		movzbl	%dl, %ecx
 3727 14bd 888424D0 		movb	%al, 464(%rsp)
 3727      010000
 3728 14c4 889424D1 		movb	%dl, 465(%rsp)
 3728      010000
 3729 14cb 44888424 		movb	%r8b, 466(%rsp)
 3729      D2010000 
 3730 14d3 0FB6D0   		movzbl	%al, %edx
 3731 14d6 450FB6C0 		movzbl	%r8b, %r8d
 3732 14da 44888C24 		movb	%r9b, 467(%rsp)
 3732      D3010000 
 3733 14e2 31C0     		xorl	%eax, %eax
 3734 14e4 450FB6C9 		movzbl	%r9b, %r9d
 3735 14e8 E8000000 		call	__printf_chk
 3735      00
 3736 14ed 488DB424 		leaq	176(%rsp), %rsi
 3736      B0000000 
 3737 14f5 4C89FF   		movq	%r15, %rdi
 3738 14f8 E8000000 		call	encrypt
 3738      00
 3739 14fd 448B8C24 		movl	236(%rsp), %r9d
 3739      EC000000 
 3740 1505 448B8424 		movl	232(%rsp), %r8d
 3740      E8000000 
 3741 150d BE000000 		movl	$.LC132, %esi
 3741      00
 3742 1512 8B8C24E4 		movl	228(%rsp), %ecx
 3742      000000
 3743 1519 8B9424E0 		movl	224(%rsp), %edx
 3743      000000
 3744 1520 BF010000 		movl	$1, %edi
 3744      00
 3745 1525 31C0     		xorl	%eax, %eax
 3746 1527 E8000000 		call	__printf_chk
 3746      00
 3747 152c 8B8424B0 		movl	176(%rsp), %eax
 3747      000000
 3748 1533 488BBC24 		movq	128(%rsp), %rdi
 3748      80000000 
 3749 153b 4C8D8424 		leaq	136(%rsp), %r8
 3749      88000000 
 3750 1543 488D8C24 		leaq	464(%rsp), %rcx
 3750      D0010000 
 3751 154b BA040000 		movl	$4, %edx
 3751      00
 3752 1550 89EE     		movl	%ebp, %esi
 3753 1552 888424D0 		movb	%al, 464(%rsp)
 3753      010000
 3754 1559 8B8424B4 		movl	180(%rsp), %eax
 3754      000000
 3755 1560 888424D1 		movb	%al, 465(%rsp)
 3755      010000
 3756 1567 8B8424B8 		movl	184(%rsp), %eax
 3756      000000
 3757 156e 888424D2 		movb	%al, 466(%rsp)
 3757      010000
 3758 1575 8B8424BC 		movl	188(%rsp), %eax
 3758      000000
 3759 157c 888424D3 		movb	%al, 467(%rsp)
 3759      010000
 3760 1583 E8000000 		call	flWriteChannel
 3760      00
 3761 1588 488BBC24 		movq	128(%rsp), %rdi
 3761      80000000 
 3762 1590 4C8D8424 		leaq	136(%rsp), %r8
 3762      88000000 
 3763 1598 488D8C24 		leaq	448(%rsp), %rcx
 3763      C0010000 
 3764 15a0 BA040000 		movl	$4, %edx
 3764      00
 3765 15a5 4489E6   		movl	%r12d, %esi
 3766 15a8 E8000000 		call	flReadChannel
 3766      00
 3767 15ad 0FB68424 		movzbl	448(%rsp), %eax
 3767      C0010000 
 3768 15b5 488DB424 		leaq	176(%rsp), %rsi
 3768      B0000000 
 3769 15bd 488DBC24 		leaq	160(%rsp), %rdi
 3769      A0000000 
 3770 15c5 898424A0 		movl	%eax, 160(%rsp)
 3770      000000
 3771 15cc 0FB68424 		movzbl	449(%rsp), %eax
 3771      C1010000 
 3772 15d4 898424A4 		movl	%eax, 164(%rsp)
 3772      000000
 3773 15db 0FB68424 		movzbl	450(%rsp), %eax
 3773      C2010000 
 3774 15e3 898424A8 		movl	%eax, 168(%rsp)
 3774      000000
 3775 15ea 0FB68424 		movzbl	451(%rsp), %eax
 3775      C3010000 
 3776 15f2 898424AC 		movl	%eax, 172(%rsp)
 3776      000000
 3777 15f9 E8000000 		call	decrypt
 3777      00
 3778 15fe 8B8424B0 		movl	176(%rsp), %eax
 3778      000000
 3779 1605 8B9424B4 		movl	180(%rsp), %edx
 3779      000000
 3780 160c BE000000 		movl	$.LC127, %esi
 3780      00
 3781 1611 448B8424 		movl	184(%rsp), %r8d
 3781      B8000000 
 3782 1619 448B8C24 		movl	188(%rsp), %r9d
 3782      BC000000 
 3783 1621 BF010000 		movl	$1, %edi
 3783      00
 3784 1626 0FB6CA   		movzbl	%dl, %ecx
 3785 1629 888424D0 		movb	%al, 464(%rsp)
 3785      010000
 3786 1630 889424D1 		movb	%dl, 465(%rsp)
 3786      010000
 3787 1637 44888424 		movb	%r8b, 466(%rsp)
 3787      D2010000 
 3788 163f 0FB6D0   		movzbl	%al, %edx
 3789 1642 44888C24 		movb	%r9b, 467(%rsp)
 3789      D3010000 
 3790 164a 450FB6C0 		movzbl	%r8b, %r8d
 3791 164e 450FB6C9 		movzbl	%r9b, %r9d
 3792 1652 31C0     		xorl	%eax, %eax
 3793 1654 E8000000 		call	__printf_chk
 3793      00
 3794 1659 488BBC24 		movq	128(%rsp), %rdi
 3794      80000000 
 3795 1661 4C8D8424 		leaq	136(%rsp), %r8
 3795      88000000 
 3796 1669 4889D9   		movq	%rbx, %rcx
 3797 166c BA040000 		movl	$4, %edx
 3797      00
 3798 1671 89EE     		movl	%ebp, %esi
 3799 1673 E8000000 		call	flWriteChannel
 3799      00
 3800 1678 488BBC24 		movq	128(%rsp), %rdi
 3800      80000000 
 3801 1680 4C8D8424 		leaq	136(%rsp), %r8
 3801      88000000 
 3802 1688 488D8C24 		leaq	448(%rsp), %rcx
 3802      C0010000 
 3803 1690 BA040000 		movl	$4, %edx
 3803      00
 3804 1695 4489E6   		movl	%r12d, %esi
 3805 1698 E8000000 		call	flReadChannel
 3805      00
 3806 169d 0FB68C24 		movzbl	449(%rsp), %ecx
 3806      C1010000 
 3807 16a5 0FB69424 		movzbl	448(%rsp), %edx
 3807      C0010000 
 3808 16ad BE000000 		movl	$.LC133, %esi
 3808      00
 3809 16b2 440FB68C 		movzbl	451(%rsp), %r9d
 3809      24C30100 
 3809      00
 3810 16bb 440FB684 		movzbl	450(%rsp), %r8d
 3810      24C20100 
 3810      00
 3811 16c4 BF010000 		movl	$1, %edi
 3811      00
 3812 16c9 31C0     		xorl	%eax, %eax
 3813 16cb E8000000 		call	__printf_chk
 3813      00
 3814 16d0 0FB69424 		movzbl	448(%rsp), %edx
 3814      C0010000 
 3815 16d8 0FB68C24 		movzbl	449(%rsp), %ecx
 3815      C1010000 
 3816 16e0 BE000000 		movl	$.LC133, %esi
 3816      00
 3817 16e5 440FB684 		movzbl	450(%rsp), %r8d
 3817      24C20100 
 3817      00
 3818 16ee 440FB68C 		movzbl	451(%rsp), %r9d
 3818      24C30100 
 3818      00
 3819 16f7 BF010000 		movl	$1, %edi
 3819      00
 3820 16fc 31C0     		xorl	%eax, %eax
 3821 16fe 899424A0 		movl	%edx, 160(%rsp)
 3821      000000
 3822 1705 898C24A4 		movl	%ecx, 164(%rsp)
 3822      000000
 3823 170c 44898424 		movl	%r8d, 168(%rsp)
 3823      A8000000 
 3824 1714 44898C24 		movl	%r9d, 172(%rsp)
 3824      AC000000 
 3825 171c E8000000 		call	__printf_chk
 3825      00
 3826 1721 488DB424 		leaq	176(%rsp), %rsi
 3826      B0000000 
 3827 1729 488DBC24 		leaq	160(%rsp), %rdi
 3827      A0000000 
 3828 1731 E8000000 		call	decrypt
 3828      00
 3829 1736 448B8C24 		movl	188(%rsp), %r9d
 3829      BC000000 
 3830 173e 448B8424 		movl	184(%rsp), %r8d
 3830      B8000000 
 3831 1746 BE000000 		movl	$.LC133, %esi
 3831      00
 3832 174b 8B8C24B4 		movl	180(%rsp), %ecx
 3832      000000
 3833 1752 8B9424B0 		movl	176(%rsp), %edx
 3833      000000
 3834 1759 BF010000 		movl	$1, %edi
 3834      00
 3835 175e 31C0     		xorl	%eax, %eax
 3836 1760 E8000000 		call	__printf_chk
 3836      00
 3837 1765 83BC24B4 		cmpl	$0, 180(%rsp)
 3837      00000000 
 3838 176d 0F8513F8 		jne	.L351
 3838      FFFF
 3839 1773 8BB424B0 		movl	176(%rsp), %esi
 3839      000000
 3840 177a 4489EF   		movl	%r13d, %edi
 3841 177d E8000000 		call	csvupdater
 3841      00
 3842 1782 8B9424B0 		movl	176(%rsp), %edx
 3842      000000
 3843 1789 BE000000 		movl	$.LC134, %esi
 3843      00
 3844 178e BF010000 		movl	$1, %edi
 3844      00
 3845 1793 31C0     		xorl	%eax, %eax
 3846 1795 E8000000 		call	__printf_chk
 3846      00
 3847 179a E9E7F7FF 		jmp	.L351
 3847      FF
 3848              	.L407:
 3849 179f 81BC24B4 		cmpl	$145, 180(%rsp)
 3849      00000091 
 3849      000000
 3850 17aa 0F85BDFA 		jne	.L339
 3850      FFFF
 3851 17b0 83BC24B8 		cmpl	$37, 184(%rsp)
 3851      00000025 
 3852 17b8 0F85AFFA 		jne	.L339
 3852      FFFF
 3853 17be 83BC24BC 		cmpl	$69, 188(%rsp)
 3853      00000045 
 3854 17c6 0F85A1FA 		jne	.L339
 3854      FFFF
 3855 17cc E91FFBFF 		jmp	.L340
 3855      FF
 3856              	.L332:
 3857 17d1 488B3D00 		movq	stderr(%rip), %rdi
 3857      000000
 3858 17d8 4889E9   		movq	%rbp, %rcx
 3859 17db BA000000 		movl	$.LC122, %edx
 3859      00
 3860 17e0 BE010000 		movl	$1, %esi
 3860      00
 3861 17e5 31C0     		xorl	%eax, %eax
 3862 17e7 BB0C0000 		movl	$12, %ebx
 3862      00
 3863 17ec E8000000 		call	__fprintf_chk
 3863      00
 3864 17f1 E907EBFF 		jmp	.L270
 3864      FF
 3865              	.L349:
 3866 17f6 BB0B0000 		movl	$11, %ebx
 3866      00
 3867 17fb E9FBEFFF 		jmp	.L315
 3867      FF
 3868              	.L300:
 3869 1800 BE000000 		movl	$.LC110, %esi
 3869      00
 3870 1805 BF010000 		movl	$1, %edi
 3870      00
 3871 180a 31C0     		xorl	%eax, %eax
 3872 180c E8000000 		call	__printf_chk
 3872      00
 3873              	.L303:
 3874 1811 488B4424 		movq	32(%rsp), %rax
 3874      20
 3875 1816 83786000 		cmpl	$0, 96(%rax)
 3876 181a 0F84F2EF 		je	.L304
 3876      FFFF
 3877 1820 BE000000 		movl	$.LC112, %esi
 3877      00
 3878 1825 BF010000 		movl	$1, %edi
 3878      00
 3879 182a 31C0     		xorl	%eax, %eax
 3880 182c E8000000 		call	__printf_chk
 3880      00
 3881 1831 E9FEF2FF 		jmp	.L344
 3881      FF
 3882              	.L310:
 3883 1836 4889E9   		movq	%rbp, %rcx
 3884 1839 BA000000 		movl	$.LC115, %edx
 3884      00
 3885 183e E9A0EFFF 		jmp	.L389
 3885      FF
 3886              	.L384:
 3887 1843 89C3     		movl	%eax, %ebx
 3888 1845 E9B3EAFF 		jmp	.L270
 3888      FF
 3889              	.L380:
 3890 184a 4889E9   		movq	%rbp, %rcx
 3891 184d BA000000 		movl	$.LC122, %edx
 3891      00
 3892 1852 E9B9EBFF 		jmp	.L386
 3892      FF
 3893              		.cfi_endproc
 3894              	.LFE70:
 3896              		.section	.text.unlikely
 3897              	.LCOLDE139:
 3898              		.section	.text.startup
 3899              	.LHOTE139:
 3900              		.section	.rodata.str1.1
 3901              	.LC140:
 3902 0397 30303030 		.string	"0000"
 3902      00
 3903              	.LC141:
 3904 039c 30303031 		.string	"0001"
 3904      00
 3905              	.LC142:
 3906 03a1 30303130 		.string	"0010"
 3906      00
 3907              	.LC143:
 3908 03a6 30303131 		.string	"0011"
 3908      00
 3909              	.LC144:
 3910 03ab 30313030 		.string	"0100"
 3910      00
 3911              	.LC145:
 3912 03b0 30313031 		.string	"0101"
 3912      00
 3913              	.LC146:
 3914 03b5 30313130 		.string	"0110"
 3914      00
 3915              	.LC147:
 3916 03ba 30313131 		.string	"0111"
 3916      00
 3917              	.LC148:
 3918 03bf 31303030 		.string	"1000"
 3918      00
 3919              	.LC149:
 3920 03c4 31303031 		.string	"1001"
 3920      00
 3921              	.LC150:
 3922 03c9 58585858 		.string	"XXXX"
 3922      00
 3923              	.LC151:
 3924 03ce 31303130 		.string	"1010"
 3924      00
 3925              	.LC152:
 3926 03d3 31303131 		.string	"1011"
 3926      00
 3927              	.LC153:
 3928 03d8 31313030 		.string	"1100"
 3928      00
 3929              	.LC154:
 3930 03dd 31313031 		.string	"1101"
 3930      00
 3931              	.LC155:
 3932 03e2 31313130 		.string	"1110"
 3932      00
 3933              	.LC156:
 3934 03e7 31313131 		.string	"1111"
 3934      00
 3935              		.section	.rodata
 3936              		.align 32
 3939              	nibbles:
 3940 0000 00000000 		.quad	.LC140
 3940      00000000 
 3941 0008 00000000 		.quad	.LC141
 3941      00000000 
 3942 0010 00000000 		.quad	.LC142
 3942      00000000 
 3943 0018 00000000 		.quad	.LC143
 3943      00000000 
 3944 0020 00000000 		.quad	.LC144
 3944      00000000 
 3945 0028 00000000 		.quad	.LC145
 3945      00000000 
 3946 0030 00000000 		.quad	.LC146
 3946      00000000 
 3947 0038 00000000 		.quad	.LC147
 3947      00000000 
 3948 0040 00000000 		.quad	.LC148
 3948      00000000 
 3949 0048 00000000 		.quad	.LC149
 3949      00000000 
 3950 0050 00000000 		.quad	.LC150
 3950      00000000 
 3951 0058 00000000 		.quad	.LC150
 3951      00000000 
 3952 0060 00000000 		.quad	.LC150
 3952      00000000 
 3953 0068 00000000 		.quad	.LC150
 3953      00000000 
 3954 0070 00000000 		.quad	.LC150
 3954      00000000 
 3955 0078 00000000 		.quad	.LC150
 3955      00000000 
 3956 0080 00000000 		.quad	.LC150
 3956      00000000 
 3957 0088 00000000 		.quad	.LC151
 3957      00000000 
 3958 0090 00000000 		.quad	.LC152
 3958      00000000 
 3959 0098 00000000 		.quad	.LC153
 3959      00000000 
 3960 00a0 00000000 		.quad	.LC154
 3960      00000000 
 3961 00a8 00000000 		.quad	.LC155
 3961      00000000 
 3962 00b0 00000000 		.quad	.LC156
 3962      00000000 
 3963              		.section	.rodata.str1.1
 3964              	.LC157:
 3965 03ec 556E7061 		.string	"Unparseable hex number"
 3965      72736561 
 3965      626C6520 
 3965      68657820 
 3965      6E756D62 
 3966              	.LC158:
 3967 0403 4368616E 		.string	"Channel out of range"
 3967      6E656C20 
 3967      6F757420 
 3967      6F662072 
 3967      616E6765 
 3968              	.LC159:
 3969 0418 436F6E64 		.string	"Conduit out of range"
 3969      75697420 
 3969      6F757420 
 3969      6F662072 
 3969      616E6765 
 3970              	.LC160:
 3971 042d 496C6C65 		.string	"Illegal character"
 3971      67616C20 
 3971      63686172 
 3971      61637465 
 3971      7200
 3972              	.LC161:
 3973 043f 556E7465 		.string	"Unterminated string"
 3973      726D696E 
 3973      61746564 
 3973      20737472 
 3973      696E6700 
 3974              	.LC162:
 3975 0453 4E6F206D 		.string	"No memory"
 3975      656D6F72 
 3975      7900
 3976              	.LC163:
 3977 045d 456D7074 		.string	"Empty string"
 3977      79207374 
 3977      72696E67 
 3977      00
 3978              	.LC164:
 3979 046a 4F646420 		.string	"Odd number of digits"
 3979      6E756D62 
 3979      6572206F 
 3979      66206469 
 3979      67697473 
 3980              	.LC165:
 3981 047f 43616E6E 		.string	"Cannot load file"
 3981      6F74206C 
 3981      6F616420 
 3981      66696C65 
 3981      00
 3982              	.LC166:
 3983 0490 43616E6E 		.string	"Cannot save file"
 3983      6F742073 
 3983      61766520 
 3983      66696C65 
 3983      00
 3984              	.LC167:
 3985 04a1 42616420 		.string	"Bad arguments"
 3985      61726775 
 3985      6D656E74 
 3985      7300
 3986              		.section	.rodata
 3987 00b8 00000000 		.align 32
 3987      00000000 
 3990              	errMessages:
 3991 00c0 00000000 		.quad	0
 3991      00000000 
 3992 00c8 00000000 		.quad	0
 3992      00000000 
 3993 00d0 00000000 		.quad	.LC157
 3993      00000000 
 3994 00d8 00000000 		.quad	.LC158
 3994      00000000 
 3995 00e0 00000000 		.quad	.LC159
 3995      00000000 
 3996 00e8 00000000 		.quad	.LC160
 3996      00000000 
 3997 00f0 00000000 		.quad	.LC161
 3997      00000000 
 3998 00f8 00000000 		.quad	.LC162
 3998      00000000 
 3999 0100 00000000 		.quad	.LC163
 3999      00000000 
 4000 0108 00000000 		.quad	.LC164
 4000      00000000 
 4001 0110 00000000 		.quad	.LC165
 4001      00000000 
 4002 0118 00000000 		.quad	.LC166
 4002      00000000 
 4003 0120 00000000 		.quad	.LC167
 4003      00000000 
 4004              		.local	enableBenchmarking
 4005              		.comm	enableBenchmarking,1,1
 4006              		.local	ptr
 4007              		.comm	ptr,8,8
 4008              		.globl	key
 4009              		.data
 4010              		.align 32
 4013              	key:
 4014 0000 01000000 		.long	1
 4015 0004 00000000 		.long	0
 4016 0008 00000000 		.long	0
 4017 000c 00000000 		.long	0
 4018 0010 00000000 		.long	0
 4019 0014 00000000 		.long	0
 4020 0018 00000000 		.long	0
 4021 001c 00000000 		.long	0
 4022 0020 00000000 		.long	0
 4023 0024 00000000 		.long	0
 4024 0028 00000000 		.long	0
 4025 002c 00000000 		.long	0
 4026 0030 00000000 		.long	0
 4027 0034 00000000 		.long	0
 4028 0038 00000000 		.long	0
 4029 003c 00000000 		.long	0
 4030 0040 00000000 		.long	0
 4031 0044 00000000 		.long	0
 4032 0048 00000000 		.long	0
 4033 004c 00000000 		.long	0
 4034 0050 00000000 		.long	0
 4035 0054 00000000 		.long	0
 4036 0058 00000000 		.long	0
 4037 005c 00000000 		.long	0
 4038 0060 00000000 		.long	0
 4039 0064 00000000 		.long	0
 4040 0068 00000000 		.long	0
 4041 006c 00000000 		.long	0
 4042 0070 00000000 		.long	0
 4043 0074 00000000 		.long	0
 4044 0078 00000000 		.long	0
 4045 007c 00000000 		.long	0
 4046              		.section	.rodata.cst8,"aM",@progbits,8
 4047              		.align 8
 4048              	.LC4:
 4049 0000 00000000 		.long	0
 4050 0004 80842E41 		.long	1093567616
 4051              		.align 8
 4052              	.LC5:
 4053 0008 00000000 		.long	0
 4054 000c 00003041 		.long	1093664768
 4055              		.section	.rodata.cst16,"aM",@progbits,16
 4056              		.align 16
 4057              	.LC24:
 4058 0000 01000000 		.long	1
 4059 0004 01000000 		.long	1
 4060 0008 01000000 		.long	1
 4061 000c 01000000 		.long	1
 4062              		.ident	"GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609"
 4063              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccy1X7ms.s:9      .text.unlikely:0000000000000000 doWrite
     /tmp/ccy1X7ms.s:145    .text.unlikely:00000000000000ff parseLine
     /tmp/ccy1X7ms.s:4007   .bss:0000000000000008 ptr
                             .bss:0000000000000000 enableBenchmarking
     /tmp/ccy1X7ms.s:3990   .rodata:00000000000000c0 errMessages
     /tmp/ccy1X7ms.s:977    .text:0000000000000000 pow
     /tmp/ccy1X7ms.s:998    .text:0000000000000010 unsignedtouint8
     /tmp/ccy1X7ms.s:1024   .text:0000000000000030 uint8tounsigned
     /tmp/ccy1X7ms.s:1064   .text:0000000000000050 csvupdater
     /tmp/ccy1X7ms.s:1262   .text:0000000000000280 csvlooker
     /tmp/ccy1X7ms.s:1965   .text:0000000000000f50 equal
     /tmp/ccy1X7ms.s:2001   .text:0000000000000f80 encrypt
     /tmp/ccy1X7ms.s:4013   .data:0000000000000000 key
     /tmp/ccy1X7ms.s:2147   .text:0000000000001130 decrypt
     /tmp/ccy1X7ms.s:2603   .text.startup:0000000000000000 main
     /tmp/ccy1X7ms.s:3939   .rodata:0000000000000000 nibbles
     /tmp/ccy1X7ms.s:4057   .rodata.cst16:0000000000000000 .LC24
     /tmp/ccy1X7ms.s:4048   .rodata.cst8:0000000000000000 .LC4
     /tmp/ccy1X7ms.s:4052   .rodata.cst8:0000000000000008 .LC5

UNDEFINED SYMBOLS
fread
flWriteChannelAsync
errPrefix
flAwaitAsyncWrites
__stack_chk_fail
bufInitialise
__errno_location
strtoul
malloc
strncpy
fopen
free
gettimeofday
flReadChannelAsyncSubmit
flReadChannelAsyncAwait
fwrite
__printf_chk
fclose
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
__fprintf_chk
bufAppendConst
flReadChannel
fgets
fputs
remove
rename
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
flClose
flFreeError
arg_parse
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flSleep
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
flFlashStandardFirmware
flIsNeroCapable
flIsCommCapable
jtagScanChain
flLoadStandardFirmware
flFlashCustomFirmware
flResetToggle
flMultiBitPortAccess
__sprintf_chk
flSaveFirmware
flProgram
flIsFPGARunning
readline
add_history
sigRegisterHandler
sigIsRaised
sleep

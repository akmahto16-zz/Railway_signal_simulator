   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.globl	pow
   6              	pow:
   7              	.LFB4:
   8              		.file 1 "main.c"
   1:main.c        **** /* 
   2:main.c        ****  * Copyright (C) 2012-2014 Chris McClelland
   3:main.c        ****  *  
   4:main.c        ****  * This program is free software: you can redistribute it and/or modify
   5:main.c        ****  * it under the terms of the GNU General Public License as published by
   6:main.c        ****  * the Free Software Foundation, either version 3 of the License, or
   7:main.c        ****  * (at your option) any later version.
   8:main.c        ****  *
   9:main.c        ****  * This program is distributed in the hope that it will be useful,
  10:main.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:main.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:main.c        ****  * GNU General Public License for more details.
  13:main.c        ****  *  
  14:main.c        ****  * You should have received a copy of the GNU General Public License
  15:main.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:main.c        ****  */
  17:main.c        **** #include <stdio.h>
  18:main.c        **** #include <stdlib.h>
  19:main.c        **** #include <string.h>
  20:main.c        **** #include <errno.h>
  21:main.c        **** #include <makestuff.h>
  22:main.c        **** #include <libfpgalink.h>
  23:main.c        **** #include <libbuffer.h>
  24:main.c        **** #include <liberror.h>
  25:main.c        **** #include <libdump.h>
  26:main.c        **** #include <argtable2.h>
  27:main.c        **** #include <readline/readline.h>
  28:main.c        **** #include <readline/history.h>
  29:main.c        **** #include <unistd.h> // unix specific
  30:main.c        **** // #include "math.h"
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        **** 
  34:main.c        **** #ifdef WIN32
  35:main.c        **** #include <Windows.h>
  36:main.c        **** #else
  37:main.c        **** #include <sys/time.h>
  38:main.c        **** #endif
  39:main.c        **** 
  40:main.c        **** 
  41:main.c        **** 
  42:main.c        **** unsigned int pow(x,y){
   9              		.loc 1 42 0
  10              		.cfi_startproc
  11 0000 55       		pushq	%rbp
  12              		.cfi_def_cfa_offset 16
  13              		.cfi_offset 6, -16
  14 0001 4889E5   		movq	%rsp, %rbp
  15              		.cfi_def_cfa_register 6
  16 0004 897DFC   		movl	%edi, -4(%rbp)
  17 0007 8975F8   		movl	%esi, -8(%rbp)
  43:main.c        **** 	return 1<<y;
  18              		.loc 1 43 0
  19 000a 8B45F8   		movl	-8(%rbp), %eax
  20 000d BA010000 		movl	$1, %edx
  20      00
  21 0012 89C1     		movl	%eax, %ecx
  22 0014 D3E2     		sall	%cl, %edx
  23 0016 89D0     		movl	%edx, %eax
  44:main.c        **** }
  24              		.loc 1 44 0
  25 0018 5D       		popq	%rbp
  26              		.cfi_def_cfa 7, 8
  27 0019 C3       		ret
  28              		.cfi_endproc
  29              	.LFE4:
  31              		.globl	unsignedtouint8
  33              	unsignedtouint8:
  34              	.LFB5:
  45:main.c        **** 
  46:main.c        **** void unsignedtouint8(unsigned a[],uint8 b[]){
  35              		.loc 1 46 0
  36              		.cfi_startproc
  37 001a 55       		pushq	%rbp
  38              		.cfi_def_cfa_offset 16
  39              		.cfi_offset 6, -16
  40 001b 4889E5   		movq	%rsp, %rbp
  41              		.cfi_def_cfa_register 6
  42 001e 48897DE8 		movq	%rdi, -24(%rbp)
  43 0022 488975E0 		movq	%rsi, -32(%rbp)
  44              	.LBB2:
  47:main.c        **** 	for(int i=0;i<4;i++)b[i]=a[i];
  45              		.loc 1 47 0
  46 0026 C745FC00 		movl	$0, -4(%rbp)
  46      000000
  47 002d EB2A     		jmp	.L4
  48              	.L5:
  49              		.loc 1 47 0 is_stmt 0 discriminator 3
  50 002f 8B45FC   		movl	-4(%rbp), %eax
  51 0032 4863D0   		movslq	%eax, %rdx
  52 0035 488B45E0 		movq	-32(%rbp), %rax
  53 0039 4801D0   		addq	%rdx, %rax
  54 003c 8B55FC   		movl	-4(%rbp), %edx
  55 003f 4863D2   		movslq	%edx, %rdx
  56 0042 488D0C95 		leaq	0(,%rdx,4), %rcx
  56      00000000 
  57 004a 488B55E8 		movq	-24(%rbp), %rdx
  58 004e 4801CA   		addq	%rcx, %rdx
  59 0051 8B12     		movl	(%rdx), %edx
  60 0053 8810     		movb	%dl, (%rax)
  61 0055 8345FC01 		addl	$1, -4(%rbp)
  62              	.L4:
  63              		.loc 1 47 0 discriminator 1
  64 0059 837DFC03 		cmpl	$3, -4(%rbp)
  65 005d 7ED0     		jle	.L5
  66              	.LBE2:
  48:main.c        **** }
  67              		.loc 1 48 0 is_stmt 1
  68 005f 90       		nop
  69 0060 5D       		popq	%rbp
  70              		.cfi_def_cfa 7, 8
  71 0061 C3       		ret
  72              		.cfi_endproc
  73              	.LFE5:
  75              		.globl	uint8tounsigned
  77              	uint8tounsigned:
  78              	.LFB6:
  49:main.c        **** void uint8tounsigned(uint8 a[],unsigned b[]){
  79              		.loc 1 49 0
  80              		.cfi_startproc
  81 0062 55       		pushq	%rbp
  82              		.cfi_def_cfa_offset 16
  83              		.cfi_offset 6, -16
  84 0063 4889E5   		movq	%rsp, %rbp
  85              		.cfi_def_cfa_register 6
  86 0066 48897DE8 		movq	%rdi, -24(%rbp)
  87 006a 488975E0 		movq	%rsi, -32(%rbp)
  88              	.LBB3:
  50:main.c        **** 	for(int i=0;i<4;i++)b[i]=a[i];
  89              		.loc 1 50 0
  90 006e C745FC00 		movl	$0, -4(%rbp)
  90      000000
  91 0075 EB2D     		jmp	.L7
  92              	.L8:
  93              		.loc 1 50 0 is_stmt 0 discriminator 3
  94 0077 8B45FC   		movl	-4(%rbp), %eax
  95 007a 4898     		cltq
  96 007c 488D1485 		leaq	0(,%rax,4), %rdx
  96      00000000 
  97 0084 488B45E0 		movq	-32(%rbp), %rax
  98 0088 4801C2   		addq	%rax, %rdx
  99 008b 8B45FC   		movl	-4(%rbp), %eax
 100 008e 4863C8   		movslq	%eax, %rcx
 101 0091 488B45E8 		movq	-24(%rbp), %rax
 102 0095 4801C8   		addq	%rcx, %rax
 103 0098 0FB600   		movzbl	(%rax), %eax
 104 009b 0FB6C0   		movzbl	%al, %eax
 105 009e 8902     		movl	%eax, (%rdx)
 106 00a0 8345FC01 		addl	$1, -4(%rbp)
 107              	.L7:
 108              		.loc 1 50 0 discriminator 1
 109 00a4 837DFC03 		cmpl	$3, -4(%rbp)
 110 00a8 7ECD     		jle	.L8
 111              	.LBE3:
  51:main.c        **** }
 112              		.loc 1 51 0 is_stmt 1
 113 00aa 90       		nop
 114 00ab 5D       		popq	%rbp
 115              		.cfi_def_cfa 7, 8
 116 00ac C3       		ret
 117              		.cfi_endproc
 118              	.LFE6:
 120              		.section	.rodata
 121              	.LC0:
 122 0000 7200     		.string	"r"
 123 0002 00000000 		.align 8
 123      0000
 124              	.LC1:
 125 0008 2F686F6D 		.string	"/home/aditya/Downloads/track_data.csv"
 125      652F6164 
 125      69747961 
 125      2F446F77 
 125      6E6C6F61 
 126              	.LC2:
 127 002e 7700     		.string	"w"
 128              		.align 8
 129              	.LC3:
 130 0030 2F686F6D 		.string	"/home/aditya/Downloads/updated.csv"
 130      652F6164 
 130      69747961 
 130      2F446F77 
 130      6E6C6F61 
 131              		.text
 132              		.globl	csvupdater
 134              	csvupdater:
 135              	.LFB7:
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** 
  55:main.c        **** void csvupdater(unsigned int a, unsigned int data)
  56:main.c        **** {
 136              		.loc 1 56 0
 137              		.cfi_startproc
 138 00ad 55       		pushq	%rbp
 139              		.cfi_def_cfa_offset 16
 140              		.cfi_offset 6, -16
 141 00ae 4889E5   		movq	%rsp, %rbp
 142              		.cfi_def_cfa_register 6
 143 00b1 53       		pushq	%rbx
 144 00b2 4881ECF8 		subq	$248, %rsp
 144      000000
 145              		.cfi_offset 3, -24
 146 00b9 89BD0CFF 		movl	%edi, -244(%rbp)
 146      FFFF
 147 00bf 89B508FF 		movl	%esi, -248(%rbp)
 147      FFFF
 148              		.loc 1 56 0
 149 00c5 64488B04 		movq	%fs:40, %rax
 149      25280000 
 149      00
 150 00ce 488945E8 		movq	%rax, -24(%rbp)
 151 00d2 31C0     		xorl	%eax, %eax
 152              	.LBB4:
  57:main.c        **** 
  58:main.c        **** 
  59:main.c        **** unsigned int x,y;
  60:main.c        **** 
  61:main.c        **** unsigned bin[8];
  62:main.c        **** 
  63:main.c        **** 
  64:main.c        **** for(int i=7;i>=0;i--)
 153              		.loc 1 64 0
 154 00d4 C78520FF 		movl	$7, -224(%rbp)
 154      FFFF0700 
 154      0000
 155 00de EB2F     		jmp	.L10
 156              	.L11:
  65:main.c        **** {
  66:main.c        **** 
  67:main.c        **** bin[i] = a-(2*(a/2));
 157              		.loc 1 67 0 discriminator 3
 158 00e0 8B850CFF 		movl	-244(%rbp), %eax
 158      FFFF
 159 00e6 83E001   		andl	$1, %eax
 160 00e9 89C2     		movl	%eax, %edx
 161 00eb 8B8520FF 		movl	-224(%rbp), %eax
 161      FFFF
 162 00f1 4898     		cltq
 163 00f3 89948550 		movl	%edx, -176(%rbp,%rax,4)
 163      FFFFFF
  68:main.c        **** a = a/2;
 164              		.loc 1 68 0 discriminator 3
 165 00fa 8B850CFF 		movl	-244(%rbp), %eax
 165      FFFF
 166 0100 D1E8     		shrl	%eax
 167 0102 89850CFF 		movl	%eax, -244(%rbp)
 167      FFFF
  64:main.c        **** {
 168              		.loc 1 64 0 discriminator 3
 169 0108 83AD20FF 		subl	$1, -224(%rbp)
 169      FFFF01
 170              	.L10:
  64:main.c        **** {
 171              		.loc 1 64 0 is_stmt 0 discriminator 1
 172 010f 83BD20FF 		cmpl	$0, -224(%rbp)
 172      FFFF00
 173 0116 79C8     		jns	.L11
 174              	.LBE4:
  69:main.c        **** 
  70:main.c        **** }
  71:main.c        **** 
  72:main.c        **** 
  73:main.c        **** x=0;
 175              		.loc 1 73 0 is_stmt 1
 176 0118 C78518FF 		movl	$0, -232(%rbp)
 176      FFFF0000 
 176      0000
  74:main.c        **** y=0;
 177              		.loc 1 74 0
 178 0122 C7851CFF 		movl	$0, -228(%rbp)
 178      FFFF0000 
 178      0000
 179              	.LBB5:
  75:main.c        **** 
  76:main.c        **** for(int i=0;i<4;i++)
 180              		.loc 1 76 0
 181 012c C78524FF 		movl	$0, -220(%rbp)
 181      FFFF0000 
 181      0000
 182 0136 EB3B     		jmp	.L12
 183              	.L13:
  77:main.c        **** x += bin[i] * pow(2,3-i);
 184              		.loc 1 77 0 discriminator 3
 185 0138 8B8524FF 		movl	-220(%rbp), %eax
 185      FFFF
 186 013e 4898     		cltq
 187 0140 8B9C8550 		movl	-176(%rbp,%rax,4), %ebx
 187      FFFFFF
 188 0147 B8030000 		movl	$3, %eax
 188      00
 189 014c 2B8524FF 		subl	-220(%rbp), %eax
 189      FFFF
 190 0152 89C6     		movl	%eax, %esi
 191 0154 BF020000 		movl	$2, %edi
 191      00
 192 0159 B8000000 		movl	$0, %eax
 192      00
 193 015e E8000000 		call	pow
 193      00
 194 0163 0FAFC3   		imull	%ebx, %eax
 195 0166 018518FF 		addl	%eax, -232(%rbp)
 195      FFFF
  76:main.c        **** x += bin[i] * pow(2,3-i);
 196              		.loc 1 76 0 discriminator 3
 197 016c 838524FF 		addl	$1, -220(%rbp)
 197      FFFF01
 198              	.L12:
  76:main.c        **** x += bin[i] * pow(2,3-i);
 199              		.loc 1 76 0 is_stmt 0 discriminator 1
 200 0173 83BD24FF 		cmpl	$3, -220(%rbp)
 200      FFFF03
 201 017a 7EBC     		jle	.L13
 202              	.LBE5:
 203              	.LBB6:
  78:main.c        **** 
  79:main.c        **** for(int i=4;i<8;i++)
 204              		.loc 1 79 0 is_stmt 1
 205 017c C78528FF 		movl	$4, -216(%rbp)
 205      FFFF0400 
 205      0000
 206 0186 EB3B     		jmp	.L14
 207              	.L15:
  80:main.c        **** y += bin[i] * pow(2,7-i);
 208              		.loc 1 80 0 discriminator 3
 209 0188 8B8528FF 		movl	-216(%rbp), %eax
 209      FFFF
 210 018e 4898     		cltq
 211 0190 8B9C8550 		movl	-176(%rbp,%rax,4), %ebx
 211      FFFFFF
 212 0197 B8070000 		movl	$7, %eax
 212      00
 213 019c 2B8528FF 		subl	-216(%rbp), %eax
 213      FFFF
 214 01a2 89C6     		movl	%eax, %esi
 215 01a4 BF020000 		movl	$2, %edi
 215      00
 216 01a9 B8000000 		movl	$0, %eax
 216      00
 217 01ae E8000000 		call	pow
 217      00
 218 01b3 0FAFC3   		imull	%ebx, %eax
 219 01b6 01851CFF 		addl	%eax, -228(%rbp)
 219      FFFF
  79:main.c        **** y += bin[i] * pow(2,7-i);
 220              		.loc 1 79 0 discriminator 3
 221 01bc 838528FF 		addl	$1, -216(%rbp)
 221      FFFF01
 222              	.L14:
  79:main.c        **** y += bin[i] * pow(2,7-i);
 223              		.loc 1 79 0 is_stmt 0 discriminator 1
 224 01c3 83BD28FF 		cmpl	$7, -216(%rbp)
 224      FFFF07
 225 01ca 7EBC     		jle	.L15
 226              	.LBE6:
  81:main.c        **** 
  82:main.c        **** 
  83:main.c        **** 
  84:main.c        **** 
  85:main.c        **** 
  86:main.c        **** 
  87:main.c        **** int bin_data[8], status=0, track_ok, nxt_signal = 0, dir = 0, i;
 227              		.loc 1 87 0 is_stmt 1
 228 01cc C7852CFF 		movl	$0, -212(%rbp)
 228      FFFF0000 
 228      0000
 229 01d6 C78530FF 		movl	$0, -208(%rbp)
 229      FFFF0000 
 229      0000
 230 01e0 C78534FF 		movl	$0, -204(%rbp)
 230      FFFF0000 
 230      0000
  88:main.c        **** 
  89:main.c        **** for(i=7;i>=0;i--)
 231              		.loc 1 89 0
 232 01ea C78538FF 		movl	$7, -200(%rbp)
 232      FFFF0700 
 232      0000
 233 01f4 EB2F     		jmp	.L16
 234              	.L17:
  90:main.c        **** {
  91:main.c        **** bin_data[i] = data-(2*(data/2));
 235              		.loc 1 91 0 discriminator 3
 236 01f6 8B8508FF 		movl	-248(%rbp), %eax
 236      FFFF
 237 01fc 83E001   		andl	$1, %eax
 238 01ff 89C2     		movl	%eax, %edx
 239 0201 8B8538FF 		movl	-200(%rbp), %eax
 239      FFFF
 240 0207 4898     		cltq
 241 0209 89948570 		movl	%edx, -144(%rbp,%rax,4)
 241      FFFFFF
  92:main.c        **** data = data/2;
 242              		.loc 1 92 0 discriminator 3
 243 0210 8B8508FF 		movl	-248(%rbp), %eax
 243      FFFF
 244 0216 D1E8     		shrl	%eax
 245 0218 898508FF 		movl	%eax, -248(%rbp)
 245      FFFF
  89:main.c        **** {
 246              		.loc 1 89 0 discriminator 3
 247 021e 83AD38FF 		subl	$1, -200(%rbp)
 247      FFFF01
 248              	.L16:
  89:main.c        **** {
 249              		.loc 1 89 0 is_stmt 0 discriminator 1
 250 0225 83BD38FF 		cmpl	$0, -200(%rbp)
 250      FFFF00
 251 022c 79C8     		jns	.L17
  93:main.c        **** }
  94:main.c        **** 
  95:main.c        **** track_ok = bin_data[3] & bin_data[4];
 252              		.loc 1 95 0 is_stmt 1
 253 022e 8B957CFF 		movl	-132(%rbp), %edx
 253      FFFF
 254 0234 8B4580   		movl	-128(%rbp), %eax
 255 0237 21D0     		andl	%edx, %eax
 256 0239 89853CFF 		movl	%eax, -196(%rbp)
 256      FFFF
  96:main.c        **** 
  97:main.c        **** for(i=5;i<8;i++)
 257              		.loc 1 97 0
 258 023f C78538FF 		movl	$5, -200(%rbp)
 258      FFFF0500 
 258      0000
 259 0249 EB47     		jmp	.L18
 260              	.L19:
  98:main.c        **** 	nxt_signal += bin_data[i] * pow(2,7-i);
 261              		.loc 1 98 0 discriminator 3
 262 024b 8B8538FF 		movl	-200(%rbp), %eax
 262      FFFF
 263 0251 4898     		cltq
 264 0253 8B848570 		movl	-144(%rbp,%rax,4), %eax
 264      FFFFFF
 265 025a 89C3     		movl	%eax, %ebx
 266 025c B8070000 		movl	$7, %eax
 266      00
 267 0261 2B8538FF 		subl	-200(%rbp), %eax
 267      FFFF
 268 0267 89C6     		movl	%eax, %esi
 269 0269 BF020000 		movl	$2, %edi
 269      00
 270 026e B8000000 		movl	$0, %eax
 270      00
 271 0273 E8000000 		call	pow
 271      00
 272 0278 0FAFD8   		imull	%eax, %ebx
 273 027b 89DA     		movl	%ebx, %edx
 274 027d 8B8530FF 		movl	-208(%rbp), %eax
 274      FFFF
 275 0283 01D0     		addl	%edx, %eax
 276 0285 898530FF 		movl	%eax, -208(%rbp)
 276      FFFF
  97:main.c        **** 	nxt_signal += bin_data[i] * pow(2,7-i);
 277              		.loc 1 97 0 discriminator 3
 278 028b 838538FF 		addl	$1, -200(%rbp)
 278      FFFF01
 279              	.L18:
  97:main.c        **** 	nxt_signal += bin_data[i] * pow(2,7-i);
 280              		.loc 1 97 0 is_stmt 0 discriminator 1
 281 0292 83BD38FF 		cmpl	$7, -200(%rbp)
 281      FFFF07
 282 0299 7EB0     		jle	.L19
  99:main.c        **** 
 100:main.c        **** for(i=0;i<3;i++)
 283              		.loc 1 100 0 is_stmt 1
 284 029b C78538FF 		movl	$0, -200(%rbp)
 284      FFFF0000 
 284      0000
 285 02a5 EB47     		jmp	.L20
 286              	.L21:
 101:main.c        **** 	dir += bin_data[i] * pow(2,2-i);
 287              		.loc 1 101 0 discriminator 3
 288 02a7 8B8538FF 		movl	-200(%rbp), %eax
 288      FFFF
 289 02ad 4898     		cltq
 290 02af 8B848570 		movl	-144(%rbp,%rax,4), %eax
 290      FFFFFF
 291 02b6 89C3     		movl	%eax, %ebx
 292 02b8 B8020000 		movl	$2, %eax
 292      00
 293 02bd 2B8538FF 		subl	-200(%rbp), %eax
 293      FFFF
 294 02c3 89C6     		movl	%eax, %esi
 295 02c5 BF020000 		movl	$2, %edi
 295      00
 296 02ca B8000000 		movl	$0, %eax
 296      00
 297 02cf E8000000 		call	pow
 297      00
 298 02d4 0FAFD8   		imull	%eax, %ebx
 299 02d7 89DA     		movl	%ebx, %edx
 300 02d9 8B8534FF 		movl	-204(%rbp), %eax
 300      FFFF
 301 02df 01D0     		addl	%edx, %eax
 302 02e1 898534FF 		movl	%eax, -204(%rbp)
 302      FFFF
 100:main.c        **** 	dir += bin_data[i] * pow(2,2-i);
 303              		.loc 1 100 0 discriminator 3
 304 02e7 838538FF 		addl	$1, -200(%rbp)
 304      FFFF01
 305              	.L20:
 100:main.c        **** 	dir += bin_data[i] * pow(2,2-i);
 306              		.loc 1 100 0 is_stmt 0 discriminator 1
 307 02ee 83BD38FF 		cmpl	$2, -200(%rbp)
 307      FFFF02
 308 02f5 7EB0     		jle	.L21
 102:main.c        **** 
 103:main.c        **** 
 104:main.c        **** FILE *file;
 105:main.c        **** file = fopen("/home/aditya/Downloads/track_data.csv","r");
 309              		.loc 1 105 0 is_stmt 1
 310 02f7 BE000000 		movl	$.LC0, %esi
 310      00
 311 02fc BF000000 		movl	$.LC1, %edi
 311      00
 312 0301 E8000000 		call	fopen
 312      00
 313 0306 48898540 		movq	%rax, -192(%rbp)
 313      FFFFFF
 106:main.c        **** 
 107:main.c        **** FILE *file_new;
 108:main.c        **** file_new = fopen("/home/aditya/Downloads/updated.csv","w");
 314              		.loc 1 108 0
 315 030d BE000000 		movl	$.LC2, %esi
 315      00
 316 0312 BF000000 		movl	$.LC3, %edi
 316      00
 317 0317 E8000000 		call	fopen
 317      00
 318 031c 48898548 		movq	%rax, -184(%rbp)
 318      FFFFFF
 109:main.c        **** 
 110:main.c        **** char line[10];
 111:main.c        **** 
 112:main.c        **** while (fgets(line, sizeof(line), file)) 
 319              		.loc 1 112 0
 320 0323 E9F70000 		jmp	.L22
 320      00
 321              	.L25:
 322              	.LBB7:
 113:main.c        **** {
 114:main.c        **** int int_line[10];
 115:main.c        **** 
 116:main.c        **** int_line[0] = line[0] - '0';
 323              		.loc 1 116 0
 324 0328 0FB645C0 		movzbl	-64(%rbp), %eax
 325 032c 0FBEC0   		movsbl	%al, %eax
 326 032f 83E830   		subl	$48, %eax
 327 0332 894590   		movl	%eax, -112(%rbp)
 117:main.c        **** int_line[2] = line[2] - '0';
 328              		.loc 1 117 0
 329 0335 0FB645C2 		movzbl	-62(%rbp), %eax
 330 0339 0FBEC0   		movsbl	%al, %eax
 331 033c 83E830   		subl	$48, %eax
 332 033f 894598   		movl	%eax, -104(%rbp)
 118:main.c        **** int_line[4] = line[4] - '0';
 333              		.loc 1 118 0
 334 0342 0FB645C4 		movzbl	-60(%rbp), %eax
 335 0346 0FBEC0   		movsbl	%al, %eax
 336 0349 83E830   		subl	$48, %eax
 337 034c 8945A0   		movl	%eax, -96(%rbp)
 119:main.c        **** int_line[6] = line[6] - '0';
 338              		.loc 1 119 0
 339 034f 0FB645C6 		movzbl	-58(%rbp), %eax
 340 0353 0FBEC0   		movsbl	%al, %eax
 341 0356 83E830   		subl	$48, %eax
 342 0359 8945A8   		movl	%eax, -88(%rbp)
 120:main.c        **** int_line[8] = line[8] - '0';
 343              		.loc 1 120 0
 344 035c 0FB645C8 		movzbl	-56(%rbp), %eax
 345 0360 0FBEC0   		movsbl	%al, %eax
 346 0363 83E830   		subl	$48, %eax
 347 0366 8945B0   		movl	%eax, -80(%rbp)
 121:main.c        **** 
 122:main.c        **** if(int_line[0] == x & int_line[2] == y & int_line[4] == dir)
 348              		.loc 1 122 0
 349 0369 8B4590   		movl	-112(%rbp), %eax
 350 036c 3B8518FF 		cmpl	-232(%rbp), %eax
 350      FFFF
 351 0372 0F94C2   		sete	%dl
 352 0375 8B4598   		movl	-104(%rbp), %eax
 353 0378 3B851CFF 		cmpl	-228(%rbp), %eax
 353      FFFF
 354 037e 0F94C0   		sete	%al
 355 0381 21D0     		andl	%edx, %eax
 356 0383 0FB6D0   		movzbl	%al, %edx
 357 0386 8B45A0   		movl	-96(%rbp), %eax
 358 0389 3B8534FF 		cmpl	-204(%rbp), %eax
 358      FFFF
 359 038f 0F94C0   		sete	%al
 360 0392 0FB6C0   		movzbl	%al, %eax
 361 0395 21D0     		andl	%edx, %eax
 362 0397 85C0     		testl	%eax, %eax
 363 0399 746E     		je	.L23
 364              	.LBB8:
 123:main.c        **** {
 124:main.c        **** 	char line_new[9];
 125:main.c        **** 	line_new[0] = x + '0';
 365              		.loc 1 125 0
 366 039b 8B8518FF 		movl	-232(%rbp), %eax
 366      FFFF
 367 03a1 83C030   		addl	$48, %eax
 368 03a4 8845D0   		movb	%al, -48(%rbp)
 126:main.c        **** 	line_new[1] = ',';
 369              		.loc 1 126 0
 370 03a7 C645D12C 		movb	$44, -47(%rbp)
 127:main.c        **** 	line_new[2] = y + '0';
 371              		.loc 1 127 0
 372 03ab 8B851CFF 		movl	-228(%rbp), %eax
 372      FFFF
 373 03b1 83C030   		addl	$48, %eax
 374 03b4 8845D2   		movb	%al, -46(%rbp)
 128:main.c        **** 	line_new[3] = ',';
 375              		.loc 1 128 0
 376 03b7 C645D32C 		movb	$44, -45(%rbp)
 129:main.c        **** 	line_new[4] = dir + '0';
 377              		.loc 1 129 0
 378 03bb 8B8534FF 		movl	-204(%rbp), %eax
 378      FFFF
 379 03c1 83C030   		addl	$48, %eax
 380 03c4 8845D4   		movb	%al, -44(%rbp)
 130:main.c        **** 	line_new[5] = ',';
 381              		.loc 1 130 0
 382 03c7 C645D52C 		movb	$44, -43(%rbp)
 131:main.c        **** 	line_new[6] = track_ok + '0';
 383              		.loc 1 131 0
 384 03cb 8B853CFF 		movl	-196(%rbp), %eax
 384      FFFF
 385 03d1 83C030   		addl	$48, %eax
 386 03d4 8845D6   		movb	%al, -42(%rbp)
 132:main.c        **** 	line_new[7] = ',';
 387              		.loc 1 132 0
 388 03d7 C645D72C 		movb	$44, -41(%rbp)
 133:main.c        **** 	line_new[8] = nxt_signal + '0';
 389              		.loc 1 133 0
 390 03db 8B8530FF 		movl	-208(%rbp), %eax
 390      FFFF
 391 03e1 83C030   		addl	$48, %eax
 392 03e4 8845D8   		movb	%al, -40(%rbp)
 134:main.c        **** 	
 135:main.c        **** 	status = 1;
 393              		.loc 1 135 0
 394 03e7 C7852CFF 		movl	$1, -212(%rbp)
 394      FFFF0100 
 394      0000
 136:main.c        **** 
 137:main.c        **** 	fputs(line_new, file_new);
 395              		.loc 1 137 0
 396 03f1 488B9548 		movq	-184(%rbp), %rdx
 396      FFFFFF
 397 03f8 488D45D0 		leaq	-48(%rbp), %rax
 398 03fc 4889D6   		movq	%rdx, %rsi
 399 03ff 4889C7   		movq	%rax, %rdi
 400 0402 E8000000 		call	fputs
 400      00
 401              	.LBE8:
 402 0407 EB16     		jmp	.L22
 403              	.L23:
 138:main.c        **** }
 139:main.c        **** 
 140:main.c        **** else
 141:main.c        **** 	fputs(line, file_new);
 404              		.loc 1 141 0
 405 0409 488B9548 		movq	-184(%rbp), %rdx
 405      FFFFFF
 406 0410 488D45C0 		leaq	-64(%rbp), %rax
 407 0414 4889D6   		movq	%rdx, %rsi
 408 0417 4889C7   		movq	%rax, %rdi
 409 041a E8000000 		call	fputs
 409      00
 410              	.L22:
 411              	.LBE7:
 112:main.c        **** {
 412              		.loc 1 112 0
 413 041f 488B9540 		movq	-192(%rbp), %rdx
 413      FFFFFF
 414 0426 488D45C0 		leaq	-64(%rbp), %rax
 415 042a BE0A0000 		movl	$10, %esi
 415      00
 416 042f 4889C7   		movq	%rax, %rdi
 417 0432 E8000000 		call	fgets
 417      00
 418 0437 4885C0   		testq	%rax, %rax
 419 043a 0F85E8FE 		jne	.L25
 419      FFFF
 142:main.c        **** }
 143:main.c        **** 
 144:main.c        **** if(status == 0)
 420              		.loc 1 144 0
 421 0440 83BD2CFF 		cmpl	$0, -212(%rbp)
 421      FFFF00
 422 0447 7566     		jne	.L26
 423              	.LBB9:
 145:main.c        **** {
 146:main.c        **** 	char line_new[10];
 147:main.c        **** 	line_new[0] = x + '0';
 424              		.loc 1 147 0
 425 0449 8B8518FF 		movl	-232(%rbp), %eax
 425      FFFF
 426 044f 83C030   		addl	$48, %eax
 427 0452 8845D0   		movb	%al, -48(%rbp)
 148:main.c        **** 	line_new[1] = ',';
 428              		.loc 1 148 0
 429 0455 C645D12C 		movb	$44, -47(%rbp)
 149:main.c        **** 	line_new[2] = y + '0';
 430              		.loc 1 149 0
 431 0459 8B851CFF 		movl	-228(%rbp), %eax
 431      FFFF
 432 045f 83C030   		addl	$48, %eax
 433 0462 8845D2   		movb	%al, -46(%rbp)
 150:main.c        **** 	line_new[3] = ',';
 434              		.loc 1 150 0
 435 0465 C645D32C 		movb	$44, -45(%rbp)
 151:main.c        **** 	line_new[4] = dir + '0';
 436              		.loc 1 151 0
 437 0469 8B8534FF 		movl	-204(%rbp), %eax
 437      FFFF
 438 046f 83C030   		addl	$48, %eax
 439 0472 8845D4   		movb	%al, -44(%rbp)
 152:main.c        **** 	line_new[5] = ',';
 440              		.loc 1 152 0
 441 0475 C645D52C 		movb	$44, -43(%rbp)
 153:main.c        **** 	line_new[6] = track_ok + '0';
 442              		.loc 1 153 0
 443 0479 8B853CFF 		movl	-196(%rbp), %eax
 443      FFFF
 444 047f 83C030   		addl	$48, %eax
 445 0482 8845D6   		movb	%al, -42(%rbp)
 154:main.c        **** 	line_new[7] = ',';
 446              		.loc 1 154 0
 447 0485 C645D72C 		movb	$44, -41(%rbp)
 155:main.c        **** 	line_new[8] = nxt_signal + '0';
 448              		.loc 1 155 0
 449 0489 8B8530FF 		movl	-208(%rbp), %eax
 449      FFFF
 450 048f 83C030   		addl	$48, %eax
 451 0492 8845D8   		movb	%al, -40(%rbp)
 156:main.c        **** 	line_new[9] = '\n';
 452              		.loc 1 156 0
 453 0495 C645D90A 		movb	$10, -39(%rbp)
 157:main.c        **** 	
 158:main.c        **** 	fputs(line_new, file_new);
 454              		.loc 1 158 0
 455 0499 488B9548 		movq	-184(%rbp), %rdx
 455      FFFFFF
 456 04a0 488D45D0 		leaq	-48(%rbp), %rax
 457 04a4 4889D6   		movq	%rdx, %rsi
 458 04a7 4889C7   		movq	%rax, %rdi
 459 04aa E8000000 		call	fputs
 459      00
 460              	.L26:
 461              	.LBE9:
 159:main.c        **** }
 160:main.c        **** 
 161:main.c        **** 
 162:main.c        **** fclose(file);
 462              		.loc 1 162 0
 463 04af 488B8540 		movq	-192(%rbp), %rax
 463      FFFFFF
 464 04b6 4889C7   		movq	%rax, %rdi
 465 04b9 E8000000 		call	fclose
 465      00
 163:main.c        **** fclose(file_new);
 466              		.loc 1 163 0
 467 04be 488B8548 		movq	-184(%rbp), %rax
 467      FFFFFF
 468 04c5 4889C7   		movq	%rax, %rdi
 469 04c8 E8000000 		call	fclose
 469      00
 164:main.c        **** remove("/home/aditya/Downloads/track_data.csv");
 470              		.loc 1 164 0
 471 04cd BF000000 		movl	$.LC1, %edi
 471      00
 472 04d2 E8000000 		call	remove
 472      00
 165:main.c        **** rename("/home/aditya/Downloads/updated.csv","/home/aditya/Downloads/track_data.csv");
 473              		.loc 1 165 0
 474 04d7 BE000000 		movl	$.LC1, %esi
 474      00
 475 04dc BF000000 		movl	$.LC3, %edi
 475      00
 476 04e1 E8000000 		call	rename
 476      00
 166:main.c        **** 
 167:main.c        **** 
 168:main.c        **** }
 477              		.loc 1 168 0
 478 04e6 90       		nop
 479 04e7 488B45E8 		movq	-24(%rbp), %rax
 480 04eb 64483304 		xorq	%fs:40, %rax
 480      25280000 
 480      00
 481 04f4 7405     		je	.L27
 482 04f6 E8000000 		call	__stack_chk_fail
 482      00
 483              	.L27:
 484 04fb 4881C4F8 		addq	$248, %rsp
 484      000000
 485 0502 5B       		popq	%rbx
 486 0503 5D       		popq	%rbp
 487              		.cfi_def_cfa 7, 8
 488 0504 C3       		ret
 489              		.cfi_endproc
 490              	.LFE7:
 492              		.globl	csvlooker
 494              	csvlooker:
 495              	.LFB8:
 169:main.c        **** 
 170:main.c        **** 
 171:main.c        **** 
 172:main.c        **** 
 173:main.c        **** void csvlooker(unsigned int a,unsigned finarray[]){
 496              		.loc 1 173 0
 497              		.cfi_startproc
 498 0505 55       		pushq	%rbp
 499              		.cfi_def_cfa_offset 16
 500              		.cfi_offset 6, -16
 501 0506 4889E5   		movq	%rsp, %rbp
 502              		.cfi_def_cfa_register 6
 503 0509 4881ECB0 		subq	$432, %rsp
 503      010000
 504 0510 89BD5CFE 		movl	%edi, -420(%rbp)
 504      FFFF
 505 0516 4889B550 		movq	%rsi, -432(%rbp)
 505      FEFFFF
 506              		.loc 1 173 0
 507 051d 64488B04 		movq	%fs:40, %rax
 507      25280000 
 507      00
 508 0526 488945F8 		movq	%rax, -8(%rbp)
 509 052a 31C0     		xorl	%eax, %eax
 174:main.c        **** 	unsigned int x,y;
 175:main.c        **** 	unsigned int bin[8];
 176:main.c        **** 	y=a%16;
 510              		.loc 1 176 0
 511 052c 8B855CFE 		movl	-420(%rbp), %eax
 511      FFFF
 512 0532 83E00F   		andl	$15, %eax
 513 0535 898570FE 		movl	%eax, -400(%rbp)
 513      FFFF
 177:main.c        **** 	x=a>>4; 
 514              		.loc 1 177 0
 515 053b 8B855CFE 		movl	-420(%rbp), %eax
 515      FFFF
 516 0541 C1E804   		shrl	$4, %eax
 517 0544 898574FE 		movl	%eax, -396(%rbp)
 517      FFFF
 178:main.c        **** 	unsigned int Dir[8],Tok[8],NxtSig[8],temp;
 179:main.c        **** 	int i;
 180:main.c        **** 	for(i=0;i<8;i++){
 518              		.loc 1 180 0
 519 054a C78568FE 		movl	$0, -408(%rbp)
 519      FFFF0000 
 519      0000
 520 0554 EB1A     		jmp	.L29
 521              	.L30:
 181:main.c        **** 		Dir[i]=0;
 522              		.loc 1 181 0 discriminator 3
 523 0556 8B8568FE 		movl	-408(%rbp), %eax
 523      FFFF
 524 055c 4898     		cltq
 525 055e C7848580 		movl	$0, -384(%rbp,%rax,4)
 525      FEFFFF00 
 525      000000
 180:main.c        **** 		Dir[i]=0;
 526              		.loc 1 180 0 discriminator 3
 527 0569 838568FE 		addl	$1, -408(%rbp)
 527      FFFF01
 528              	.L29:
 180:main.c        **** 		Dir[i]=0;
 529              		.loc 1 180 0 is_stmt 0 discriminator 1
 530 0570 83BD68FE 		cmpl	$7, -408(%rbp)
 530      FFFF07
 531 0577 7EDD     		jle	.L30
 182:main.c        **** 	}
 183:main.c        **** 	FILE *file;
 184:main.c        **** 	file = fopen("/home/aditya/Downloads/track_data.csv","r");
 532              		.loc 1 184 0 is_stmt 1
 533 0579 BE000000 		movl	$.LC0, %esi
 533      00
 534 057e BF000000 		movl	$.LC1, %edi
 534      00
 535 0583 E8000000 		call	fopen
 535      00
 536 0588 48898578 		movq	%rax, -392(%rbp)
 536      FEFFFF
 185:main.c        **** 	char line[15];
 186:main.c        **** 	while (fgets(line, sizeof(line), file)) {
 537              		.loc 1 186 0
 538 058f E9B10000 		jmp	.L31
 538      00
 539              	.L33:
 540              	.LBB10:
 187:main.c        **** 		int int_line[10];
 188:main.c        **** 		
 189:main.c        **** 		int_line[0] = line[0] - '0';
 541              		.loc 1 189 0
 542 0594 0FB645E0 		movzbl	-32(%rbp), %eax
 543 0598 0FBEC0   		movsbl	%al, %eax
 544 059b 83E830   		subl	$48, %eax
 545 059e 8985E0FE 		movl	%eax, -288(%rbp)
 545      FFFF
 190:main.c        **** 		int_line[2] = line[2] - '0';
 546              		.loc 1 190 0
 547 05a4 0FB645E2 		movzbl	-30(%rbp), %eax
 548 05a8 0FBEC0   		movsbl	%al, %eax
 549 05ab 83E830   		subl	$48, %eax
 550 05ae 8985E8FE 		movl	%eax, -280(%rbp)
 550      FFFF
 191:main.c        **** 		int_line[4] = line[4] - '0';
 551              		.loc 1 191 0
 552 05b4 0FB645E4 		movzbl	-28(%rbp), %eax
 553 05b8 0FBEC0   		movsbl	%al, %eax
 554 05bb 83E830   		subl	$48, %eax
 555 05be 8985F0FE 		movl	%eax, -272(%rbp)
 555      FFFF
 192:main.c        **** 		int_line[6] = line[6] - '0';
 556              		.loc 1 192 0
 557 05c4 0FB645E6 		movzbl	-26(%rbp), %eax
 558 05c8 0FBEC0   		movsbl	%al, %eax
 559 05cb 83E830   		subl	$48, %eax
 560 05ce 8985F8FE 		movl	%eax, -264(%rbp)
 560      FFFF
 193:main.c        **** 		int_line[8] = line[8] - '0';
 561              		.loc 1 193 0
 562 05d4 0FB645E8 		movzbl	-24(%rbp), %eax
 563 05d8 0FBEC0   		movsbl	%al, %eax
 564 05db 83E830   		subl	$48, %eax
 565 05de 898500FF 		movl	%eax, -256(%rbp)
 565      FFFF
 194:main.c        **** 
 195:main.c        **** 		if(int_line[0] == x & int_line[2] == y){
 566              		.loc 1 195 0
 567 05e4 8B85E0FE 		movl	-288(%rbp), %eax
 567      FFFF
 568 05ea 3B8574FE 		cmpl	-396(%rbp), %eax
 568      FFFF
 569 05f0 0F94C2   		sete	%dl
 570 05f3 8B85E8FE 		movl	-280(%rbp), %eax
 570      FFFF
 571 05f9 3B8570FE 		cmpl	-400(%rbp), %eax
 571      FFFF
 572 05ff 0F94C0   		sete	%al
 573 0602 21D0     		andl	%edx, %eax
 574 0604 84C0     		testb	%al, %al
 575 0606 743D     		je	.L31
 196:main.c        **** 			Dir[int_line[4]] = 1;
 576              		.loc 1 196 0
 577 0608 8B85F0FE 		movl	-272(%rbp), %eax
 577      FFFF
 578 060e 4898     		cltq
 579 0610 C7848580 		movl	$1, -384(%rbp,%rax,4)
 579      FEFFFF01 
 579      000000
 197:main.c        **** 			Tok[int_line[4]] = int_line[6];
 580              		.loc 1 197 0
 581 061b 8B85F0FE 		movl	-272(%rbp), %eax
 581      FFFF
 582 0621 8B95F8FE 		movl	-264(%rbp), %edx
 582      FFFF
 583 0627 4898     		cltq
 584 0629 899485A0 		movl	%edx, -352(%rbp,%rax,4)
 584      FEFFFF
 198:main.c        **** 			NxtSig[int_line[4]] = int_line[8];
 585              		.loc 1 198 0
 586 0630 8B85F0FE 		movl	-272(%rbp), %eax
 586      FFFF
 587 0636 8B9500FF 		movl	-256(%rbp), %edx
 587      FFFF
 588 063c 4898     		cltq
 589 063e 899485C0 		movl	%edx, -320(%rbp,%rax,4)
 589      FEFFFF
 590              	.L31:
 591              	.LBE10:
 186:main.c        **** 		int int_line[10];
 592              		.loc 1 186 0
 593 0645 488B9578 		movq	-392(%rbp), %rdx
 593      FEFFFF
 594 064c 488D45E0 		leaq	-32(%rbp), %rax
 595 0650 BE0F0000 		movl	$15, %esi
 595      00
 596 0655 4889C7   		movq	%rax, %rdi
 597 0658 E8000000 		call	fgets
 597      00
 598 065d 4885C0   		testq	%rax, %rax
 599 0660 0F852EFF 		jne	.L33
 599      FFFF
 199:main.c        **** 		}
 200:main.c        **** 	}
 201:main.c        **** 	unsigned int bits[64];
 202:main.c        **** 	for(i=0;i<8;i++){
 600              		.loc 1 202 0
 601 0666 C78568FE 		movl	$0, -408(%rbp)
 601      FFFF0000 
 601      0000
 602 0670 E9700200 		jmp	.L34
 602      00
 603              	.L37:
 203:main.c        **** 		if(Dir[i] == 0){
 604              		.loc 1 203 0
 605 0675 8B8568FE 		movl	-408(%rbp), %eax
 605      FFFF
 606 067b 4898     		cltq
 607 067d 8B848580 		movl	-384(%rbp,%rax,4), %eax
 607      FEFFFF
 608 0684 85C0     		testl	%eax, %eax
 609 0686 0F850401 		jne	.L35
 609      0000
 204:main.c        **** 			bits[i*8] = 0;
 610              		.loc 1 204 0
 611 068c 8B8568FE 		movl	-408(%rbp), %eax
 611      FFFF
 612 0692 C1E003   		sall	$3, %eax
 613 0695 4898     		cltq
 614 0697 C78485E0 		movl	$0, -288(%rbp,%rax,4)
 614      FEFFFF00 
 614      000000
 205:main.c        **** 			bits[i*8 + 1] = 0;
 615              		.loc 1 205 0
 616 06a2 8B8568FE 		movl	-408(%rbp), %eax
 616      FFFF
 617 06a8 C1E003   		sall	$3, %eax
 618 06ab 83C001   		addl	$1, %eax
 619 06ae 4898     		cltq
 620 06b0 C78485E0 		movl	$0, -288(%rbp,%rax,4)
 620      FEFFFF00 
 620      000000
 206:main.c        **** 			temp = i;
 621              		.loc 1 206 0
 622 06bb 8B8568FE 		movl	-408(%rbp), %eax
 622      FFFF
 623 06c1 898564FE 		movl	%eax, -412(%rbp)
 623      FFFF
 207:main.c        **** 
 208:main.c        **** 			bits[i*8 + 4] = temp - 2*(temp/2);
 624              		.loc 1 208 0
 625 06c7 8B8568FE 		movl	-408(%rbp), %eax
 625      FFFF
 626 06cd C1E003   		sall	$3, %eax
 627 06d0 8D4804   		leal	4(%rax), %ecx
 628 06d3 8B8564FE 		movl	-412(%rbp), %eax
 628      FFFF
 629 06d9 83E001   		andl	$1, %eax
 630 06dc 89C2     		movl	%eax, %edx
 631 06de 4863C1   		movslq	%ecx, %rax
 632 06e1 899485E0 		movl	%edx, -288(%rbp,%rax,4)
 632      FEFFFF
 209:main.c        **** 			temp = temp/2;
 633              		.loc 1 209 0
 634 06e8 8B8564FE 		movl	-412(%rbp), %eax
 634      FFFF
 635 06ee D1E8     		shrl	%eax
 636 06f0 898564FE 		movl	%eax, -412(%rbp)
 636      FFFF
 210:main.c        **** 
 211:main.c        **** 			bits[i*8 + 3] = temp - 2*(temp/2);
 637              		.loc 1 211 0
 638 06f6 8B8568FE 		movl	-408(%rbp), %eax
 638      FFFF
 639 06fc C1E003   		sall	$3, %eax
 640 06ff 8D4803   		leal	3(%rax), %ecx
 641 0702 8B8564FE 		movl	-412(%rbp), %eax
 641      FFFF
 642 0708 83E001   		andl	$1, %eax
 643 070b 89C2     		movl	%eax, %edx
 644 070d 4863C1   		movslq	%ecx, %rax
 645 0710 899485E0 		movl	%edx, -288(%rbp,%rax,4)
 645      FEFFFF
 212:main.c        **** 			temp=temp/2;
 646              		.loc 1 212 0
 647 0717 8B8564FE 		movl	-412(%rbp), %eax
 647      FFFF
 648 071d D1E8     		shrl	%eax
 649 071f 898564FE 		movl	%eax, -412(%rbp)
 649      FFFF
 213:main.c        **** 
 214:main.c        **** 			bits[i*8 + 2] = temp;
 650              		.loc 1 214 0
 651 0725 8B8568FE 		movl	-408(%rbp), %eax
 651      FFFF
 652 072b C1E003   		sall	$3, %eax
 653 072e 83C002   		addl	$2, %eax
 654 0731 4898     		cltq
 655 0733 8B9564FE 		movl	-412(%rbp), %edx
 655      FFFF
 656 0739 899485E0 		movl	%edx, -288(%rbp,%rax,4)
 656      FEFFFF
 215:main.c        **** 
 216:main.c        **** 			bits[i*8 + 5] = 0;
 657              		.loc 1 216 0
 658 0740 8B8568FE 		movl	-408(%rbp), %eax
 658      FFFF
 659 0746 C1E003   		sall	$3, %eax
 660 0749 83C005   		addl	$5, %eax
 661 074c 4898     		cltq
 662 074e C78485E0 		movl	$0, -288(%rbp,%rax,4)
 662      FEFFFF00 
 662      000000
 217:main.c        **** 			bits[i*8 + 6] = 0;
 663              		.loc 1 217 0
 664 0759 8B8568FE 		movl	-408(%rbp), %eax
 664      FFFF
 665 075f C1E003   		sall	$3, %eax
 666 0762 83C006   		addl	$6, %eax
 667 0765 4898     		cltq
 668 0767 C78485E0 		movl	$0, -288(%rbp,%rax,4)
 668      FEFFFF00 
 668      000000
 218:main.c        **** 			bits[i*8 + 7] = 0;
 669              		.loc 1 218 0
 670 0772 8B8568FE 		movl	-408(%rbp), %eax
 670      FFFF
 671 0778 C1E003   		sall	$3, %eax
 672 077b 83C007   		addl	$7, %eax
 673 077e 4898     		cltq
 674 0780 C78485E0 		movl	$0, -288(%rbp,%rax,4)
 674      FEFFFF00 
 674      000000
 675 078b E94E0100 		jmp	.L36
 675      00
 676              	.L35:
 219:main.c        **** 
 220:main.c        **** 		}else{
 221:main.c        **** 			bits[i*8] = 1;
 677              		.loc 1 221 0
 678 0790 8B8568FE 		movl	-408(%rbp), %eax
 678      FFFF
 679 0796 C1E003   		sall	$3, %eax
 680 0799 4898     		cltq
 681 079b C78485E0 		movl	$1, -288(%rbp,%rax,4)
 681      FEFFFF01 
 681      000000
 222:main.c        **** 			bits[i*8 + 1] = Tok[i];
 682              		.loc 1 222 0
 683 07a6 8B8568FE 		movl	-408(%rbp), %eax
 683      FFFF
 684 07ac C1E003   		sall	$3, %eax
 685 07af 8D4801   		leal	1(%rax), %ecx
 686 07b2 8B8568FE 		movl	-408(%rbp), %eax
 686      FFFF
 687 07b8 4898     		cltq
 688 07ba 8B9485A0 		movl	-352(%rbp,%rax,4), %edx
 688      FEFFFF
 689 07c1 4863C1   		movslq	%ecx, %rax
 690 07c4 899485E0 		movl	%edx, -288(%rbp,%rax,4)
 690      FEFFFF
 223:main.c        **** 			temp = i;
 691              		.loc 1 223 0
 692 07cb 8B8568FE 		movl	-408(%rbp), %eax
 692      FFFF
 693 07d1 898564FE 		movl	%eax, -412(%rbp)
 693      FFFF
 224:main.c        **** 			bits[i*8 + 4] = temp - 2*(temp/2);
 694              		.loc 1 224 0
 695 07d7 8B8568FE 		movl	-408(%rbp), %eax
 695      FFFF
 696 07dd C1E003   		sall	$3, %eax
 697 07e0 8D4804   		leal	4(%rax), %ecx
 698 07e3 8B8564FE 		movl	-412(%rbp), %eax
 698      FFFF
 699 07e9 83E001   		andl	$1, %eax
 700 07ec 89C2     		movl	%eax, %edx
 701 07ee 4863C1   		movslq	%ecx, %rax
 702 07f1 899485E0 		movl	%edx, -288(%rbp,%rax,4)
 702      FEFFFF
 225:main.c        **** 			temp = temp/2;
 703              		.loc 1 225 0
 704 07f8 8B8564FE 		movl	-412(%rbp), %eax
 704      FFFF
 705 07fe D1E8     		shrl	%eax
 706 0800 898564FE 		movl	%eax, -412(%rbp)
 706      FFFF
 226:main.c        **** 			bits[i*8 + 3] = temp - 2*(temp/2);
 707              		.loc 1 226 0
 708 0806 8B8568FE 		movl	-408(%rbp), %eax
 708      FFFF
 709 080c C1E003   		sall	$3, %eax
 710 080f 8D4803   		leal	3(%rax), %ecx
 711 0812 8B8564FE 		movl	-412(%rbp), %eax
 711      FFFF
 712 0818 83E001   		andl	$1, %eax
 713 081b 89C2     		movl	%eax, %edx
 714 081d 4863C1   		movslq	%ecx, %rax
 715 0820 899485E0 		movl	%edx, -288(%rbp,%rax,4)
 715      FEFFFF
 227:main.c        **** 			temp=temp/2;
 716              		.loc 1 227 0
 717 0827 8B8564FE 		movl	-412(%rbp), %eax
 717      FFFF
 718 082d D1E8     		shrl	%eax
 719 082f 898564FE 		movl	%eax, -412(%rbp)
 719      FFFF
 228:main.c        **** 			bits[i*8 + 2] = temp;
 720              		.loc 1 228 0
 721 0835 8B8568FE 		movl	-408(%rbp), %eax
 721      FFFF
 722 083b C1E003   		sall	$3, %eax
 723 083e 83C002   		addl	$2, %eax
 724 0841 4898     		cltq
 725 0843 8B9564FE 		movl	-412(%rbp), %edx
 725      FFFF
 726 0849 899485E0 		movl	%edx, -288(%rbp,%rax,4)
 726      FEFFFF
 229:main.c        **** 			temp = NxtSig[i];
 727              		.loc 1 229 0
 728 0850 8B8568FE 		movl	-408(%rbp), %eax
 728      FFFF
 729 0856 4898     		cltq
 730 0858 8B8485C0 		movl	-320(%rbp,%rax,4), %eax
 730      FEFFFF
 731 085f 898564FE 		movl	%eax, -412(%rbp)
 731      FFFF
 230:main.c        **** 			bits[i*8 + 7] = temp - 2*(temp/2);
 732              		.loc 1 230 0
 733 0865 8B8568FE 		movl	-408(%rbp), %eax
 733      FFFF
 734 086b C1E003   		sall	$3, %eax
 735 086e 8D4807   		leal	7(%rax), %ecx
 736 0871 8B8564FE 		movl	-412(%rbp), %eax
 736      FFFF
 737 0877 83E001   		andl	$1, %eax
 738 087a 89C2     		movl	%eax, %edx
 739 087c 4863C1   		movslq	%ecx, %rax
 740 087f 899485E0 		movl	%edx, -288(%rbp,%rax,4)
 740      FEFFFF
 231:main.c        **** 			temp = temp/2;
 741              		.loc 1 231 0
 742 0886 8B8564FE 		movl	-412(%rbp), %eax
 742      FFFF
 743 088c D1E8     		shrl	%eax
 744 088e 898564FE 		movl	%eax, -412(%rbp)
 744      FFFF
 232:main.c        **** 			bits[i*8 + 6] = temp - 2*(temp/2);
 745              		.loc 1 232 0
 746 0894 8B8568FE 		movl	-408(%rbp), %eax
 746      FFFF
 747 089a C1E003   		sall	$3, %eax
 748 089d 8D4806   		leal	6(%rax), %ecx
 749 08a0 8B8564FE 		movl	-412(%rbp), %eax
 749      FFFF
 750 08a6 83E001   		andl	$1, %eax
 751 08a9 89C2     		movl	%eax, %edx
 752 08ab 4863C1   		movslq	%ecx, %rax
 753 08ae 899485E0 		movl	%edx, -288(%rbp,%rax,4)
 753      FEFFFF
 233:main.c        **** 			temp=temp/2;
 754              		.loc 1 233 0
 755 08b5 8B8564FE 		movl	-412(%rbp), %eax
 755      FFFF
 756 08bb D1E8     		shrl	%eax
 757 08bd 898564FE 		movl	%eax, -412(%rbp)
 757      FFFF
 234:main.c        **** 			bits[i*8 + 5] = temp;
 758              		.loc 1 234 0
 759 08c3 8B8568FE 		movl	-408(%rbp), %eax
 759      FFFF
 760 08c9 C1E003   		sall	$3, %eax
 761 08cc 83C005   		addl	$5, %eax
 762 08cf 4898     		cltq
 763 08d1 8B9564FE 		movl	-412(%rbp), %edx
 763      FFFF
 764 08d7 899485E0 		movl	%edx, -288(%rbp,%rax,4)
 764      FEFFFF
 765              	.L36:
 202:main.c        **** 		if(Dir[i] == 0){
 766              		.loc 1 202 0 discriminator 2
 767 08de 838568FE 		addl	$1, -408(%rbp)
 767      FFFF01
 768              	.L34:
 202:main.c        **** 		if(Dir[i] == 0){
 769              		.loc 1 202 0 is_stmt 0 discriminator 1
 770 08e5 83BD68FE 		cmpl	$7, -408(%rbp)
 770      FFFF07
 771 08ec 0F8E83FD 		jle	.L37
 771      FFFF
 235:main.c        **** 		}
 236:main.c        **** 
 237:main.c        **** 	}
 238:main.c        **** 	for(i=0;i<8;i++){
 772              		.loc 1 238 0 is_stmt 1
 773 08f2 C78568FE 		movl	$0, -408(%rbp)
 773      FFFF0000 
 773      0000
 774 08fc E9840000 		jmp	.L38
 774      00
 775              	.L41:
 239:main.c        **** 		temp=0;
 776              		.loc 1 239 0
 777 0901 C78564FE 		movl	$0, -412(%rbp)
 777      FFFF0000 
 777      0000
 778              	.LBB11:
 240:main.c        **** 		for(int j=0;j<8;j++)
 779              		.loc 1 240 0
 780 090b C7856CFE 		movl	$0, -404(%rbp)
 780      FFFF0000 
 780      0000
 781 0915 EB3C     		jmp	.L39
 782              	.L40:
 241:main.c        **** 		temp += bits[8*i + j] *(1<<(7-j)) ;
 783              		.loc 1 241 0 discriminator 3
 784 0917 8B8568FE 		movl	-408(%rbp), %eax
 784      FFFF
 785 091d 8D14C500 		leal	0(,%rax,8), %edx
 785      000000
 786 0924 8B856CFE 		movl	-404(%rbp), %eax
 786      FFFF
 787 092a 01D0     		addl	%edx, %eax
 788 092c 4898     		cltq
 789 092e 8B9485E0 		movl	-288(%rbp,%rax,4), %edx
 789      FEFFFF
 790 0935 B8070000 		movl	$7, %eax
 790      00
 791 093a 2B856CFE 		subl	-404(%rbp), %eax
 791      FFFF
 792 0940 89C1     		movl	%eax, %ecx
 793 0942 D3E2     		sall	%cl, %edx
 794 0944 89D0     		movl	%edx, %eax
 795 0946 018564FE 		addl	%eax, -412(%rbp)
 795      FFFF
 240:main.c        **** 		for(int j=0;j<8;j++)
 796              		.loc 1 240 0 discriminator 3
 797 094c 83856CFE 		addl	$1, -404(%rbp)
 797      FFFF01
 798              	.L39:
 240:main.c        **** 		for(int j=0;j<8;j++)
 799              		.loc 1 240 0 is_stmt 0 discriminator 1
 800 0953 83BD6CFE 		cmpl	$7, -404(%rbp)
 800      FFFF07
 801 095a 7EBB     		jle	.L40
 802              	.LBE11:
 242:main.c        **** 		finarray[i] = temp;
 803              		.loc 1 242 0 is_stmt 1 discriminator 2
 804 095c 8B8568FE 		movl	-408(%rbp), %eax
 804      FFFF
 805 0962 4898     		cltq
 806 0964 488D1485 		leaq	0(,%rax,4), %rdx
 806      00000000 
 807 096c 488B8550 		movq	-432(%rbp), %rax
 807      FEFFFF
 808 0973 4801C2   		addq	%rax, %rdx
 809 0976 8B8564FE 		movl	-412(%rbp), %eax
 809      FFFF
 810 097c 8902     		movl	%eax, (%rdx)
 238:main.c        **** 		temp=0;
 811              		.loc 1 238 0 discriminator 2
 812 097e 838568FE 		addl	$1, -408(%rbp)
 812      FFFF01
 813              	.L38:
 238:main.c        **** 		temp=0;
 814              		.loc 1 238 0 is_stmt 0 discriminator 1
 815 0985 83BD68FE 		cmpl	$7, -408(%rbp)
 815      FFFF07
 816 098c 0F8E6FFF 		jle	.L41
 816      FFFF
 243:main.c        **** 	}
 244:main.c        **** }
 817              		.loc 1 244 0 is_stmt 1
 818 0992 90       		nop
 819 0993 488B45F8 		movq	-8(%rbp), %rax
 820 0997 64483304 		xorq	%fs:40, %rax
 820      25280000 
 820      00
 821 09a0 7405     		je	.L42
 822 09a2 E8000000 		call	__stack_chk_fail
 822      00
 823              	.L42:
 824 09a7 C9       		leave
 825              		.cfi_def_cfa 7, 8
 826 09a8 C3       		ret
 827              		.cfi_endproc
 828              	.LFE8:
 830              		.globl	equal
 832              	equal:
 833              	.LFB9:
 245:main.c        **** 
 246:main.c        **** bool equal(unsigned a[],unsigned b[]){
 834              		.loc 1 246 0
 835              		.cfi_startproc
 836 09a9 55       		pushq	%rbp
 837              		.cfi_def_cfa_offset 16
 838              		.cfi_offset 6, -16
 839 09aa 4889E5   		movq	%rsp, %rbp
 840              		.cfi_def_cfa_register 6
 841 09ad 48897DF8 		movq	%rdi, -8(%rbp)
 842 09b1 488975F0 		movq	%rsi, -16(%rbp)
 247:main.c        **** 	return (a[0]==b[0] && a[1]==b[1] && a[2]==b[2] && a[3]==b[3]);
 843              		.loc 1 247 0
 844 09b5 488B45F8 		movq	-8(%rbp), %rax
 845 09b9 8B10     		movl	(%rax), %edx
 846 09bb 488B45F0 		movq	-16(%rbp), %rax
 847 09bf 8B00     		movl	(%rax), %eax
 848 09c1 39C2     		cmpl	%eax, %edx
 849 09c3 754F     		jne	.L44
 850              		.loc 1 247 0 is_stmt 0 discriminator 1
 851 09c5 488B45F8 		movq	-8(%rbp), %rax
 852 09c9 4883C004 		addq	$4, %rax
 853 09cd 8B10     		movl	(%rax), %edx
 854 09cf 488B45F0 		movq	-16(%rbp), %rax
 855 09d3 4883C004 		addq	$4, %rax
 856 09d7 8B00     		movl	(%rax), %eax
 857 09d9 39C2     		cmpl	%eax, %edx
 858 09db 7537     		jne	.L44
 859              		.loc 1 247 0 discriminator 3
 860 09dd 488B45F8 		movq	-8(%rbp), %rax
 861 09e1 4883C008 		addq	$8, %rax
 862 09e5 8B10     		movl	(%rax), %edx
 863 09e7 488B45F0 		movq	-16(%rbp), %rax
 864 09eb 4883C008 		addq	$8, %rax
 865 09ef 8B00     		movl	(%rax), %eax
 866 09f1 39C2     		cmpl	%eax, %edx
 867 09f3 751F     		jne	.L44
 868              		.loc 1 247 0 discriminator 5
 869 09f5 488B45F8 		movq	-8(%rbp), %rax
 870 09f9 4883C00C 		addq	$12, %rax
 871 09fd 8B10     		movl	(%rax), %edx
 872 09ff 488B45F0 		movq	-16(%rbp), %rax
 873 0a03 4883C00C 		addq	$12, %rax
 874 0a07 8B00     		movl	(%rax), %eax
 875 0a09 39C2     		cmpl	%eax, %edx
 876 0a0b 7507     		jne	.L44
 877              		.loc 1 247 0 discriminator 7
 878 0a0d B8010000 		movl	$1, %eax
 878      00
 879 0a12 EB05     		jmp	.L45
 880              	.L44:
 881              		.loc 1 247 0 discriminator 8
 882 0a14 B8000000 		movl	$0, %eax
 882      00
 883              	.L45:
 884              		.loc 1 247 0 discriminator 10
 885 0a19 83E001   		andl	$1, %eax
 248:main.c        **** }
 886              		.loc 1 248 0 is_stmt 1 discriminator 10
 887 0a1c 5D       		popq	%rbp
 888              		.cfi_def_cfa 7, 8
 889 0a1d C3       		ret
 890              		.cfi_endproc
 891              	.LFE9:
 893              		.globl	key
 894              		.data
 895              		.align 32
 898              	key:
 899 0000 01000000 		.long	1
 900 0004 00000000 		.long	0
 901 0008 00000000 		.long	0
 902 000c 00000000 		.long	0
 903 0010 00000000 		.long	0
 904 0014 00000000 		.long	0
 905 0018 00000000 		.long	0
 906 001c 00000000 		.long	0
 907 0020 00000000 		.long	0
 908 0024 00000000 		.long	0
 909 0028 00000000 		.long	0
 910 002c 00000000 		.long	0
 911 0030 00000000 		.long	0
 912 0034 00000000 		.long	0
 913 0038 00000000 		.long	0
 914 003c 00000000 		.long	0
 915 0040 00000000 		.long	0
 916 0044 00000000 		.long	0
 917 0048 00000000 		.long	0
 918 004c 00000000 		.long	0
 919 0050 00000000 		.long	0
 920 0054 00000000 		.long	0
 921 0058 00000000 		.long	0
 922 005c 00000000 		.long	0
 923 0060 00000000 		.long	0
 924 0064 00000000 		.long	0
 925 0068 00000000 		.long	0
 926 006c 00000000 		.long	0
 927 0070 00000000 		.long	0
 928 0074 00000000 		.long	0
 929 0078 00000000 		.long	0
 930 007c 00000000 		.long	0
 931              		.text
 932              		.globl	encrypt
 934              	encrypt:
 935              	.LFB10:
 249:main.c        **** 
 250:main.c        **** 
 251:main.c        **** 
 252:main.c        **** 
 253:main.c        **** 
 254:main.c        **** 
 255:main.c        **** 
 256:main.c        **** unsigned int key[32]={1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 257:main.c        **** void encrypt(unsigned int *inp,unsigned int*out){
 936              		.loc 1 257 0
 937              		.cfi_startproc
 938 0a1e 55       		pushq	%rbp
 939              		.cfi_def_cfa_offset 16
 940              		.cfi_offset 6, -16
 941 0a1f 4889E5   		movq	%rsp, %rbp
 942              		.cfi_def_cfa_register 6
 943 0a22 4883EC50 		subq	$80, %rsp
 944 0a26 48897DB8 		movq	%rdi, -72(%rbp)
 945 0a2a 488975B0 		movq	%rsi, -80(%rbp)
 946              		.loc 1 257 0
 947 0a2e 64488B04 		movq	%fs:40, %rax
 947      25280000 
 947      00
 948 0a37 488945F8 		movq	%rax, -8(%rbp)
 949 0a3b 31C0     		xorl	%eax, %eax
 258:main.c        **** 	unsigned int p=*inp*1+*(inp+1)*(1<<8)+*(inp+2)*(1<<16)+*(inp+3)*(1<<24);
 950              		.loc 1 258 0
 951 0a3d 488B45B8 		movq	-72(%rbp), %rax
 952 0a41 8B00     		movl	(%rax), %eax
 953 0a43 488B55B8 		movq	-72(%rbp), %rdx
 954 0a47 4883C208 		addq	$8, %rdx
 955 0a4b 8B12     		movl	(%rdx), %edx
 956 0a4d 488B4DB8 		movq	-72(%rbp), %rcx
 957 0a51 4883C10C 		addq	$12, %rcx
 958 0a55 8B09     		movl	(%rcx), %ecx
 959 0a57 C1E108   		sall	$8, %ecx
 960 0a5a 01CA     		addl	%ecx, %edx
 961 0a5c 89D1     		movl	%edx, %ecx
 962 0a5e C1E108   		sall	$8, %ecx
 963 0a61 488B55B8 		movq	-72(%rbp), %rdx
 964 0a65 4883C204 		addq	$4, %rdx
 965 0a69 8B12     		movl	(%rdx), %edx
 966 0a6b 01CA     		addl	%ecx, %edx
 967 0a6d C1E208   		sall	$8, %edx
 968 0a70 01D0     		addl	%edx, %eax
 969 0a72 8945D8   		movl	%eax, -40(%rbp)
 259:main.c        **** 	unsigned int  c=p,n=0;
 970              		.loc 1 259 0
 971 0a75 8B45D8   		movl	-40(%rbp), %eax
 972 0a78 8945C0   		movl	%eax, -64(%rbp)
 973 0a7b C745C400 		movl	$0, -60(%rbp)
 973      000000
 260:main.c        **** 	unsigned int t[4]={0,0,0,0};
 974              		.loc 1 260 0
 975 0a82 C745E000 		movl	$0, -32(%rbp)
 975      000000
 976 0a89 C745E400 		movl	$0, -28(%rbp)
 976      000000
 977 0a90 C745E800 		movl	$0, -24(%rbp)
 977      000000
 978 0a97 C745EC00 		movl	$0, -20(%rbp)
 978      000000
 979              	.LBB12:
 261:main.c        **** 	for (int i = 0; i < 32; i++) {
 980              		.loc 1 261 0
 981 0a9e C745C800 		movl	$0, -56(%rbp)
 981      000000
 982 0aa5 EB19     		jmp	.L48
 983              	.L50:
 262:main.c        ****     	if(key[i]==1)n++;	
 984              		.loc 1 262 0
 985 0aa7 8B45C8   		movl	-56(%rbp), %eax
 986 0aaa 4898     		cltq
 987 0aac 8B048500 		movl	key(,%rax,4), %eax
 987      000000
 988 0ab3 83F801   		cmpl	$1, %eax
 989 0ab6 7504     		jne	.L49
 990              		.loc 1 262 0 is_stmt 0 discriminator 1
 991 0ab8 8345C401 		addl	$1, -60(%rbp)
 992              	.L49:
 261:main.c        **** 	for (int i = 0; i < 32; i++) {
 993              		.loc 1 261 0 is_stmt 1 discriminator 2
 994 0abc 8345C801 		addl	$1, -56(%rbp)
 995              	.L48:
 261:main.c        **** 	for (int i = 0; i < 32; i++) {
 996              		.loc 1 261 0 is_stmt 0 discriminator 1
 997 0ac0 837DC81F 		cmpl	$31, -56(%rbp)
 998 0ac4 7EE1     		jle	.L50
 999              	.LBE12:
 1000              	.LBB13:
 263:main.c        **** 	}
 264:main.c        **** 	for (int i = 0; i < 32; i++) t[i%4]=t[i%4]^key[i];
 1001              		.loc 1 264 0 is_stmt 1
 1002 0ac6 C745CC00 		movl	$0, -52(%rbp)
 1002      000000
 1003 0acd EB3D     		jmp	.L51
 1004              	.L52:
 1005              		.loc 1 264 0 is_stmt 0 discriminator 3
 1006 0acf 8B45CC   		movl	-52(%rbp), %eax
 1007 0ad2 99       		cltd
 1008 0ad3 C1EA1E   		shrl	$30, %edx
 1009 0ad6 01D0     		addl	%edx, %eax
 1010 0ad8 83E003   		andl	$3, %eax
 1011 0adb 29D0     		subl	%edx, %eax
 1012 0add 89C1     		movl	%eax, %ecx
 1013 0adf 8B45CC   		movl	-52(%rbp), %eax
 1014 0ae2 99       		cltd
 1015 0ae3 C1EA1E   		shrl	$30, %edx
 1016 0ae6 01D0     		addl	%edx, %eax
 1017 0ae8 83E003   		andl	$3, %eax
 1018 0aeb 29D0     		subl	%edx, %eax
 1019 0aed 4898     		cltq
 1020 0aef 8B5485E0 		movl	-32(%rbp,%rax,4), %edx
 1021 0af3 8B45CC   		movl	-52(%rbp), %eax
 1022 0af6 4898     		cltq
 1023 0af8 8B048500 		movl	key(,%rax,4), %eax
 1023      000000
 1024 0aff 31C2     		xorl	%eax, %edx
 1025 0b01 4863C1   		movslq	%ecx, %rax
 1026 0b04 895485E0 		movl	%edx, -32(%rbp,%rax,4)
 1027 0b08 8345CC01 		addl	$1, -52(%rbp)
 1028              	.L51:
 1029              		.loc 1 264 0 discriminator 1
 1030 0b0c 837DCC1F 		cmpl	$31, -52(%rbp)
 1031 0b10 7EBD     		jle	.L52
 1032              	.LBE13:
 265:main.c        **** 	unsigned int t1=t[0]+t[1]*(1u<<1)+t[2]*(1u<<2)+t[3]*(1u<<3);
 1033              		.loc 1 265 0 is_stmt 1
 1034 0b12 8B45E0   		movl	-32(%rbp), %eax
 1035 0b15 8B55E8   		movl	-24(%rbp), %edx
 1036 0b18 8B4DEC   		movl	-20(%rbp), %ecx
 1037 0b1b 01C9     		addl	%ecx, %ecx
 1038 0b1d 01CA     		addl	%ecx, %edx
 1039 0b1f 8D0C12   		leal	(%rdx,%rdx), %ecx
 1040 0b22 8B55E4   		movl	-28(%rbp), %edx
 1041 0b25 01CA     		addl	%ecx, %edx
 1042 0b27 01D2     		addl	%edx, %edx
 1043 0b29 01D0     		addl	%edx, %eax
 1044 0b2b 8945D0   		movl	%eax, -48(%rbp)
 1045              	.LBB14:
 266:main.c        **** 	for(int i=0;i<n;i++){
 1046              		.loc 1 266 0
 1047 0b2e C745D400 		movl	$0, -44(%rbp)
 1047      000000
 1048 0b35 EB37     		jmp	.L53
 1049              	.L54:
 1050              	.LBB15:
 267:main.c        **** 		unsigned int temp=t1;
 1051              		.loc 1 267 0 discriminator 3
 1052 0b37 8B45D0   		movl	-48(%rbp), %eax
 1053 0b3a 8945DC   		movl	%eax, -36(%rbp)
 268:main.c        **** 		temp=(temp<<4)+temp;
 1054              		.loc 1 268 0 discriminator 3
 1055 0b3d 8B45DC   		movl	-36(%rbp), %eax
 1056 0b40 C1E004   		sall	$4, %eax
 1057 0b43 0145DC   		addl	%eax, -36(%rbp)
 269:main.c        **** 		temp=(temp<<8)+temp;
 1058              		.loc 1 269 0 discriminator 3
 1059 0b46 8B45DC   		movl	-36(%rbp), %eax
 1060 0b49 C1E008   		sall	$8, %eax
 1061 0b4c 0145DC   		addl	%eax, -36(%rbp)
 270:main.c        **** 		temp=(temp<<16)+temp;
 1062              		.loc 1 270 0 discriminator 3
 1063 0b4f 8B45DC   		movl	-36(%rbp), %eax
 1064 0b52 C1E010   		sall	$16, %eax
 1065 0b55 0145DC   		addl	%eax, -36(%rbp)
 271:main.c        **** 		c=c^temp;
 1066              		.loc 1 271 0 discriminator 3
 1067 0b58 8B45DC   		movl	-36(%rbp), %eax
 1068 0b5b 3145C0   		xorl	%eax, -64(%rbp)
 272:main.c        **** 		t1 = (t1+1)%(16);
 1069              		.loc 1 272 0 discriminator 3
 1070 0b5e 8B45D0   		movl	-48(%rbp), %eax
 1071 0b61 83C001   		addl	$1, %eax
 1072 0b64 83E00F   		andl	$15, %eax
 1073 0b67 8945D0   		movl	%eax, -48(%rbp)
 1074              	.LBE15:
 266:main.c        **** 		unsigned int temp=t1;
 1075              		.loc 1 266 0 discriminator 3
 1076 0b6a 8345D401 		addl	$1, -44(%rbp)
 1077              	.L53:
 266:main.c        **** 		unsigned int temp=t1;
 1078              		.loc 1 266 0 is_stmt 0 discriminator 1
 1079 0b6e 8B45D4   		movl	-44(%rbp), %eax
 1080 0b71 3B45C4   		cmpl	-60(%rbp), %eax
 1081 0b74 72C1     		jb	.L54
 1082              	.LBE14:
 273:main.c        **** 	}
 274:main.c        **** 	*out=c%(1<<8);c=c>>8;
 1083              		.loc 1 274 0 is_stmt 1
 1084 0b76 8B45C0   		movl	-64(%rbp), %eax
 1085 0b79 0FB6D0   		movzbl	%al, %edx
 1086 0b7c 488B45B0 		movq	-80(%rbp), %rax
 1087 0b80 8910     		movl	%edx, (%rax)
 1088 0b82 C16DC008 		shrl	$8, -64(%rbp)
 275:main.c        **** 	*(out+1)=c%(1<<8);c=c>>8;
 1089              		.loc 1 275 0
 1090 0b86 488B45B0 		movq	-80(%rbp), %rax
 1091 0b8a 488D5004 		leaq	4(%rax), %rdx
 1092 0b8e 8B45C0   		movl	-64(%rbp), %eax
 1093 0b91 0FB6C0   		movzbl	%al, %eax
 1094 0b94 8902     		movl	%eax, (%rdx)
 1095 0b96 C16DC008 		shrl	$8, -64(%rbp)
 276:main.c        **** 	*(out+2)=c%(1<<8);c=c>>8;
 1096              		.loc 1 276 0
 1097 0b9a 488B45B0 		movq	-80(%rbp), %rax
 1098 0b9e 488D5008 		leaq	8(%rax), %rdx
 1099 0ba2 8B45C0   		movl	-64(%rbp), %eax
 1100 0ba5 0FB6C0   		movzbl	%al, %eax
 1101 0ba8 8902     		movl	%eax, (%rdx)
 1102 0baa C16DC008 		shrl	$8, -64(%rbp)
 277:main.c        **** 	*(out+3)=c%(1<<8);c=c>>8;
 1103              		.loc 1 277 0
 1104 0bae 488B45B0 		movq	-80(%rbp), %rax
 1105 0bb2 488D500C 		leaq	12(%rax), %rdx
 1106 0bb6 8B45C0   		movl	-64(%rbp), %eax
 1107 0bb9 0FB6C0   		movzbl	%al, %eax
 1108 0bbc 8902     		movl	%eax, (%rdx)
 1109 0bbe C16DC008 		shrl	$8, -64(%rbp)
 278:main.c        **** }
 1110              		.loc 1 278 0
 1111 0bc2 90       		nop
 1112 0bc3 488B45F8 		movq	-8(%rbp), %rax
 1113 0bc7 64483304 		xorq	%fs:40, %rax
 1113      25280000 
 1113      00
 1114 0bd0 7405     		je	.L55
 1115 0bd2 E8000000 		call	__stack_chk_fail
 1115      00
 1116              	.L55:
 1117 0bd7 C9       		leave
 1118              		.cfi_def_cfa 7, 8
 1119 0bd8 C3       		ret
 1120              		.cfi_endproc
 1121              	.LFE10:
 1123              		.globl	decrypt
 1125              	decrypt:
 1126              	.LFB11:
 279:main.c        **** 
 280:main.c        **** void decrypt(unsigned int *inp,unsigned int*out){
 1127              		.loc 1 280 0
 1128              		.cfi_startproc
 1129 0bd9 55       		pushq	%rbp
 1130              		.cfi_def_cfa_offset 16
 1131              		.cfi_offset 6, -16
 1132 0bda 4889E5   		movq	%rsp, %rbp
 1133              		.cfi_def_cfa_register 6
 1134 0bdd 4883EC50 		subq	$80, %rsp
 1135 0be1 48897DB8 		movq	%rdi, -72(%rbp)
 1136 0be5 488975B0 		movq	%rsi, -80(%rbp)
 1137              		.loc 1 280 0
 1138 0be9 64488B04 		movq	%fs:40, %rax
 1138      25280000 
 1138      00
 1139 0bf2 488945F8 		movq	%rax, -8(%rbp)
 1140 0bf6 31C0     		xorl	%eax, %eax
 281:main.c        **** 	unsigned int c=*inp*1+*(inp+1)*(1<<8)+*(inp+2)*(1<<16)+*(inp+3)*(1<<24);
 1141              		.loc 1 281 0
 1142 0bf8 488B45B8 		movq	-72(%rbp), %rax
 1143 0bfc 8B00     		movl	(%rax), %eax
 1144 0bfe 488B55B8 		movq	-72(%rbp), %rdx
 1145 0c02 4883C208 		addq	$8, %rdx
 1146 0c06 8B12     		movl	(%rdx), %edx
 1147 0c08 488B4DB8 		movq	-72(%rbp), %rcx
 1148 0c0c 4883C10C 		addq	$12, %rcx
 1149 0c10 8B09     		movl	(%rcx), %ecx
 1150 0c12 C1E108   		sall	$8, %ecx
 1151 0c15 01CA     		addl	%ecx, %edx
 1152 0c17 89D1     		movl	%edx, %ecx
 1153 0c19 C1E108   		sall	$8, %ecx
 1154 0c1c 488B55B8 		movq	-72(%rbp), %rdx
 1155 0c20 4883C204 		addq	$4, %rdx
 1156 0c24 8B12     		movl	(%rdx), %edx
 1157 0c26 01CA     		addl	%ecx, %edx
 1158 0c28 C1E208   		sall	$8, %edx
 1159 0c2b 01D0     		addl	%edx, %eax
 1160 0c2d 8945D8   		movl	%eax, -40(%rbp)
 282:main.c        **** 	unsigned int  p=c,n=0;
 1161              		.loc 1 282 0
 1162 0c30 8B45D8   		movl	-40(%rbp), %eax
 1163 0c33 8945C0   		movl	%eax, -64(%rbp)
 1164 0c36 C745C400 		movl	$0, -60(%rbp)
 1164      000000
 283:main.c        **** 	unsigned int t[4]={0,0,0,0};
 1165              		.loc 1 283 0
 1166 0c3d C745E000 		movl	$0, -32(%rbp)
 1166      000000
 1167 0c44 C745E400 		movl	$0, -28(%rbp)
 1167      000000
 1168 0c4b C745E800 		movl	$0, -24(%rbp)
 1168      000000
 1169 0c52 C745EC00 		movl	$0, -20(%rbp)
 1169      000000
 1170              	.LBB16:
 284:main.c        **** 	for (int i = 0; i < 32; i++) {
 1171              		.loc 1 284 0
 1172 0c59 C745C800 		movl	$0, -56(%rbp)
 1172      000000
 1173 0c60 EB18     		jmp	.L57
 1174              	.L59:
 285:main.c        ****     	if(key[i]==0)n++;
 1175              		.loc 1 285 0
 1176 0c62 8B45C8   		movl	-56(%rbp), %eax
 1177 0c65 4898     		cltq
 1178 0c67 8B048500 		movl	key(,%rax,4), %eax
 1178      000000
 1179 0c6e 85C0     		testl	%eax, %eax
 1180 0c70 7504     		jne	.L58
 1181              		.loc 1 285 0 is_stmt 0 discriminator 1
 1182 0c72 8345C401 		addl	$1, -60(%rbp)
 1183              	.L58:
 284:main.c        **** 	for (int i = 0; i < 32; i++) {
 1184              		.loc 1 284 0 is_stmt 1 discriminator 2
 1185 0c76 8345C801 		addl	$1, -56(%rbp)
 1186              	.L57:
 284:main.c        **** 	for (int i = 0; i < 32; i++) {
 1187              		.loc 1 284 0 is_stmt 0 discriminator 1
 1188 0c7a 837DC81F 		cmpl	$31, -56(%rbp)
 1189 0c7e 7EE2     		jle	.L59
 1190              	.LBE16:
 1191              	.LBB17:
 286:main.c        **** 	}
 287:main.c        **** 	for (int i = 0; i < 32; i++) t[i%4]=t[i%4]^key[i];
 1192              		.loc 1 287 0 is_stmt 1
 1193 0c80 C745CC00 		movl	$0, -52(%rbp)
 1193      000000
 1194 0c87 EB3D     		jmp	.L60
 1195              	.L61:
 1196              		.loc 1 287 0 is_stmt 0 discriminator 3
 1197 0c89 8B45CC   		movl	-52(%rbp), %eax
 1198 0c8c 99       		cltd
 1199 0c8d C1EA1E   		shrl	$30, %edx
 1200 0c90 01D0     		addl	%edx, %eax
 1201 0c92 83E003   		andl	$3, %eax
 1202 0c95 29D0     		subl	%edx, %eax
 1203 0c97 89C1     		movl	%eax, %ecx
 1204 0c99 8B45CC   		movl	-52(%rbp), %eax
 1205 0c9c 99       		cltd
 1206 0c9d C1EA1E   		shrl	$30, %edx
 1207 0ca0 01D0     		addl	%edx, %eax
 1208 0ca2 83E003   		andl	$3, %eax
 1209 0ca5 29D0     		subl	%edx, %eax
 1210 0ca7 4898     		cltq
 1211 0ca9 8B5485E0 		movl	-32(%rbp,%rax,4), %edx
 1212 0cad 8B45CC   		movl	-52(%rbp), %eax
 1213 0cb0 4898     		cltq
 1214 0cb2 8B048500 		movl	key(,%rax,4), %eax
 1214      000000
 1215 0cb9 31C2     		xorl	%eax, %edx
 1216 0cbb 4863C1   		movslq	%ecx, %rax
 1217 0cbe 895485E0 		movl	%edx, -32(%rbp,%rax,4)
 1218 0cc2 8345CC01 		addl	$1, -52(%rbp)
 1219              	.L60:
 1220              		.loc 1 287 0 discriminator 1
 1221 0cc6 837DCC1F 		cmpl	$31, -52(%rbp)
 1222 0cca 7EBD     		jle	.L61
 1223              	.LBE17:
 288:main.c        **** 	unsigned int t1=t[0]+t[1]*(1u<<1)+t[2]*(1u<<2)+t[3]*(1u<<3);
 1224              		.loc 1 288 0 is_stmt 1
 1225 0ccc 8B45E0   		movl	-32(%rbp), %eax
 1226 0ccf 8B55E8   		movl	-24(%rbp), %edx
 1227 0cd2 8B4DEC   		movl	-20(%rbp), %ecx
 1228 0cd5 01C9     		addl	%ecx, %ecx
 1229 0cd7 01CA     		addl	%ecx, %edx
 1230 0cd9 8D0C12   		leal	(%rdx,%rdx), %ecx
 1231 0cdc 8B55E4   		movl	-28(%rbp), %edx
 1232 0cdf 01CA     		addl	%ecx, %edx
 1233 0ce1 01D2     		addl	%edx, %edx
 1234 0ce3 01D0     		addl	%edx, %eax
 1235 0ce5 8945D0   		movl	%eax, -48(%rbp)
 289:main.c        **** 	t1+=15;
 1236              		.loc 1 289 0
 1237 0ce8 8345D00F 		addl	$15, -48(%rbp)
 290:main.c        **** 	t1=t1%16;
 1238              		.loc 1 290 0
 1239 0cec 8365D00F 		andl	$15, -48(%rbp)
 1240              	.LBB18:
 291:main.c        **** 	for(int i=0;i<n;i++){
 1241              		.loc 1 291 0
 1242 0cf0 C745D400 		movl	$0, -44(%rbp)
 1242      000000
 1243 0cf7 EB33     		jmp	.L62
 1244              	.L63:
 1245              	.LBB19:
 292:main.c        **** 		unsigned int temp=t1;
 1246              		.loc 1 292 0 discriminator 3
 1247 0cf9 8B45D0   		movl	-48(%rbp), %eax
 1248 0cfc 8945DC   		movl	%eax, -36(%rbp)
 293:main.c        **** 		temp=(temp<<4)+temp;
 1249              		.loc 1 293 0 discriminator 3
 1250 0cff 8B45DC   		movl	-36(%rbp), %eax
 1251 0d02 C1E004   		sall	$4, %eax
 1252 0d05 0145DC   		addl	%eax, -36(%rbp)
 294:main.c        **** 		temp=(temp<<8)+temp;
 1253              		.loc 1 294 0 discriminator 3
 1254 0d08 8B45DC   		movl	-36(%rbp), %eax
 1255 0d0b C1E008   		sall	$8, %eax
 1256 0d0e 0145DC   		addl	%eax, -36(%rbp)
 295:main.c        **** 		temp=(temp<<16)+temp;
 1257              		.loc 1 295 0 discriminator 3
 1258 0d11 8B45DC   		movl	-36(%rbp), %eax
 1259 0d14 C1E010   		sall	$16, %eax
 1260 0d17 0145DC   		addl	%eax, -36(%rbp)
 296:main.c        **** 		p=p^temp;
 1261              		.loc 1 296 0 discriminator 3
 1262 0d1a 8B45DC   		movl	-36(%rbp), %eax
 1263 0d1d 3145C0   		xorl	%eax, -64(%rbp)
 297:main.c        **** 		t1+=15;
 1264              		.loc 1 297 0 discriminator 3
 1265 0d20 8345D00F 		addl	$15, -48(%rbp)
 298:main.c        **** 		t1=t1%16;
 1266              		.loc 1 298 0 discriminator 3
 1267 0d24 8365D00F 		andl	$15, -48(%rbp)
 1268              	.LBE19:
 291:main.c        **** 		unsigned int temp=t1;
 1269              		.loc 1 291 0 discriminator 3
 1270 0d28 8345D401 		addl	$1, -44(%rbp)
 1271              	.L62:
 291:main.c        **** 		unsigned int temp=t1;
 1272              		.loc 1 291 0 is_stmt 0 discriminator 1
 1273 0d2c 8B45D4   		movl	-44(%rbp), %eax
 1274 0d2f 3B45C4   		cmpl	-60(%rbp), %eax
 1275 0d32 72C5     		jb	.L63
 1276              	.LBE18:
 299:main.c        **** 	}
 300:main.c        **** 	*out=p%(1<<8);p=p>>8;
 1277              		.loc 1 300 0 is_stmt 1
 1278 0d34 8B45C0   		movl	-64(%rbp), %eax
 1279 0d37 0FB6D0   		movzbl	%al, %edx
 1280 0d3a 488B45B0 		movq	-80(%rbp), %rax
 1281 0d3e 8910     		movl	%edx, (%rax)
 1282 0d40 C16DC008 		shrl	$8, -64(%rbp)
 301:main.c        **** 	*(out+1)=p%(1<<8);p=p>>8;
 1283              		.loc 1 301 0
 1284 0d44 488B45B0 		movq	-80(%rbp), %rax
 1285 0d48 488D5004 		leaq	4(%rax), %rdx
 1286 0d4c 8B45C0   		movl	-64(%rbp), %eax
 1287 0d4f 0FB6C0   		movzbl	%al, %eax
 1288 0d52 8902     		movl	%eax, (%rdx)
 1289 0d54 C16DC008 		shrl	$8, -64(%rbp)
 302:main.c        **** 	*(out+2)=p%(1<<8);p=p>>8;
 1290              		.loc 1 302 0
 1291 0d58 488B45B0 		movq	-80(%rbp), %rax
 1292 0d5c 488D5008 		leaq	8(%rax), %rdx
 1293 0d60 8B45C0   		movl	-64(%rbp), %eax
 1294 0d63 0FB6C0   		movzbl	%al, %eax
 1295 0d66 8902     		movl	%eax, (%rdx)
 1296 0d68 C16DC008 		shrl	$8, -64(%rbp)
 303:main.c        **** 	*(out+3)=p%(1<<8);p=p>>8;
 1297              		.loc 1 303 0
 1298 0d6c 488B45B0 		movq	-80(%rbp), %rax
 1299 0d70 488D500C 		leaq	12(%rax), %rdx
 1300 0d74 8B45C0   		movl	-64(%rbp), %eax
 1301 0d77 0FB6C0   		movzbl	%al, %eax
 1302 0d7a 8902     		movl	%eax, (%rdx)
 1303 0d7c C16DC008 		shrl	$8, -64(%rbp)
 304:main.c        **** }
 1304              		.loc 1 304 0
 1305 0d80 90       		nop
 1306 0d81 488B45F8 		movq	-8(%rbp), %rax
 1307 0d85 64483304 		xorq	%fs:40, %rax
 1307      25280000 
 1307      00
 1308 0d8e 7405     		je	.L64
 1309 0d90 E8000000 		call	__stack_chk_fail
 1309      00
 1310              	.L64:
 1311 0d95 C9       		leave
 1312              		.cfi_def_cfa 7, 8
 1313 0d96 C3       		ret
 1314              		.cfi_endproc
 1315              	.LFE11:
 1317              		.local	ptr
 1318              		.comm	ptr,8,8
 1319              		.local	enableBenchmarking
 1320              		.comm	enableBenchmarking,1,1
 1322              	isHexDigit:
 1323              	.LFB12:
 305:main.c        **** 
 306:main.c        **** 
 307:main.c        **** 
 308:main.c        **** 
 309:main.c        **** 
 310:main.c        **** 
 311:main.c        **** bool sigIsRaised(void);
 312:main.c        **** void sigRegisterHandler(void);
 313:main.c        **** 
 314:main.c        **** static const char *ptr;
 315:main.c        **** static bool enableBenchmarking = false;
 316:main.c        **** 
 317:main.c        **** static bool isHexDigit(char ch) {
 1324              		.loc 1 317 0
 1325              		.cfi_startproc
 1326 0d97 55       		pushq	%rbp
 1327              		.cfi_def_cfa_offset 16
 1328              		.cfi_offset 6, -16
 1329 0d98 4889E5   		movq	%rsp, %rbp
 1330              		.cfi_def_cfa_register 6
 1331 0d9b 89F8     		movl	%edi, %eax
 1332 0d9d 8845FC   		movb	%al, -4(%rbp)
 318:main.c        **** 	return
 319:main.c        **** 		(ch >= '0' && ch <= '9') ||
 320:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 1333              		.loc 1 320 0
 1334 0da0 807DFC2F 		cmpb	$47, -4(%rbp)
 1335 0da4 7E06     		jle	.L66
 319:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 1336              		.loc 1 319 0
 1337 0da6 807DFC39 		cmpb	$57, -4(%rbp)
 1338 0daa 7E18     		jle	.L67
 1339              	.L66:
 319:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 1340              		.loc 1 319 0 is_stmt 0 discriminator 1
 1341 0dac 807DFC60 		cmpb	$96, -4(%rbp)
 1342 0db0 7E06     		jle	.L68
 1343              		.loc 1 320 0 is_stmt 1
 1344 0db2 807DFC66 		cmpb	$102, -4(%rbp)
 1345 0db6 7E0C     		jle	.L67
 1346              	.L68:
 1347              		.loc 1 320 0 is_stmt 0 discriminator 2
 1348 0db8 807DFC40 		cmpb	$64, -4(%rbp)
 1349 0dbc 7E0D     		jle	.L69
 321:main.c        **** 		(ch >= 'A' && ch <= 'F');
 1350              		.loc 1 321 0 is_stmt 1
 1351 0dbe 807DFC46 		cmpb	$70, -4(%rbp)
 1352 0dc2 7F07     		jg	.L69
 1353              	.L67:
 320:main.c        **** 		(ch >= 'A' && ch <= 'F');
 1354              		.loc 1 320 0 discriminator 1
 1355 0dc4 B8010000 		movl	$1, %eax
 1355      00
 1356 0dc9 EB05     		jmp	.L70
 1357              	.L69:
 320:main.c        **** 		(ch >= 'A' && ch <= 'F');
 1358              		.loc 1 320 0 is_stmt 0 discriminator 3
 1359 0dcb B8000000 		movl	$0, %eax
 1359      00
 1360              	.L70:
 319:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 1361              		.loc 1 319 0 is_stmt 1
 1362 0dd0 83E001   		andl	$1, %eax
 322:main.c        **** }
 1363              		.loc 1 322 0
 1364 0dd3 5D       		popq	%rbp
 1365              		.cfi_def_cfa 7, 8
 1366 0dd4 C3       		ret
 1367              		.cfi_endproc
 1368              	.LFE12:
 1370              		.section	.rodata
 1371              	.LC4:
 1372 0053 66666625 		.string	"fff%d\n"
 1372      640A00
 1373              		.text
 1375              	fun:
 1376              	.LFB13:
 323:main.c        **** 
 324:main.c        **** static void fun(const uint8 *data,size_t length){
 1377              		.loc 1 324 0
 1378              		.cfi_startproc
 1379 0dd5 55       		pushq	%rbp
 1380              		.cfi_def_cfa_offset 16
 1381              		.cfi_offset 6, -16
 1382 0dd6 4889E5   		movq	%rsp, %rbp
 1383              		.cfi_def_cfa_register 6
 1384 0dd9 4883EC10 		subq	$16, %rsp
 1385 0ddd 48897DF8 		movq	%rdi, -8(%rbp)
 1386 0de1 488975F0 		movq	%rsi, -16(%rbp)
 325:main.c        **** 	while( length --){
 1387              		.loc 1 325 0
 1388 0de5 EB23     		jmp	.L73
 1389              	.L74:
 326:main.c        **** 		printf("fff%d\n",*data++);
 1390              		.loc 1 326 0
 1391 0de7 488B45F8 		movq	-8(%rbp), %rax
 1392 0deb 488D5001 		leaq	1(%rax), %rdx
 1393 0def 488955F8 		movq	%rdx, -8(%rbp)
 1394 0df3 0FB600   		movzbl	(%rax), %eax
 1395 0df6 0FB6C0   		movzbl	%al, %eax
 1396 0df9 89C6     		movl	%eax, %esi
 1397 0dfb BF000000 		movl	$.LC4, %edi
 1397      00
 1398 0e00 B8000000 		movl	$0, %eax
 1398      00
 1399 0e05 E8000000 		call	printf
 1399      00
 1400              	.L73:
 325:main.c        **** 	while( length --){
 1401              		.loc 1 325 0
 1402 0e0a 488B45F0 		movq	-16(%rbp), %rax
 1403 0e0e 488D50FF 		leaq	-1(%rax), %rdx
 1404 0e12 488955F0 		movq	%rdx, -16(%rbp)
 1405 0e16 4885C0   		testq	%rax, %rax
 1406 0e19 75CC     		jne	.L74
 327:main.c        **** 	}
 328:main.c        **** }
 1407              		.loc 1 328 0
 1408 0e1b 90       		nop
 1409 0e1c C9       		leave
 1410              		.cfi_def_cfa 7, 8
 1411 0e1d C3       		ret
 1412              		.cfi_endproc
 1413              	.LFE13:
 1416              	calcChecksum:
 1417              	.LFB14:
 329:main.c        **** 
 330:main.c        **** static uint16 calcChecksum(const uint8 *data, size_t length) {
 1418              		.loc 1 330 0
 1419              		.cfi_startproc
 1420 0e1e 55       		pushq	%rbp
 1421              		.cfi_def_cfa_offset 16
 1422              		.cfi_offset 6, -16
 1423 0e1f 4889E5   		movq	%rsp, %rbp
 1424              		.cfi_def_cfa_register 6
 1425 0e22 48897DE8 		movq	%rdi, -24(%rbp)
 1426 0e26 488975E0 		movq	%rsi, -32(%rbp)
 331:main.c        **** 	uint16 cksum = 0x0000;
 1427              		.loc 1 331 0
 1428 0e2a 66C745FE 		movw	$0, -2(%rbp)
 1428      0000
 332:main.c        **** 	while ( length-- ) {
 1429              		.loc 1 332 0
 1430 0e30 EB16     		jmp	.L76
 1431              	.L77:
 333:main.c        **** 		cksum = (uint16)(cksum + *data++);
 1432              		.loc 1 333 0
 1433 0e32 488B45E8 		movq	-24(%rbp), %rax
 1434 0e36 488D5001 		leaq	1(%rax), %rdx
 1435 0e3a 488955E8 		movq	%rdx, -24(%rbp)
 1436 0e3e 0FB600   		movzbl	(%rax), %eax
 1437 0e41 0FB6C0   		movzbl	%al, %eax
 1438 0e44 660145FE 		addw	%ax, -2(%rbp)
 1439              	.L76:
 332:main.c        **** 	while ( length-- ) {
 1440              		.loc 1 332 0
 1441 0e48 488B45E0 		movq	-32(%rbp), %rax
 1442 0e4c 488D50FF 		leaq	-1(%rax), %rdx
 1443 0e50 488955E0 		movq	%rdx, -32(%rbp)
 1444 0e54 4885C0   		testq	%rax, %rax
 1445 0e57 75D9     		jne	.L77
 334:main.c        **** 	}
 335:main.c        **** 	return cksum;
 1446              		.loc 1 335 0
 1447 0e59 0FB745FE 		movzwl	-2(%rbp), %eax
 336:main.c        **** }
 1448              		.loc 1 336 0
 1449 0e5d 5D       		popq	%rbp
 1450              		.cfi_def_cfa 7, 8
 1451 0e5e C3       		ret
 1452              		.cfi_endproc
 1453              	.LFE14:
 1456              	getHexNibble:
 1457              	.LFB15:
 337:main.c        **** 
 338:main.c        **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
 1458              		.loc 1 338 0
 1459              		.cfi_startproc
 1460 0e5f 55       		pushq	%rbp
 1461              		.cfi_def_cfa_offset 16
 1462              		.cfi_offset 6, -16
 1463 0e60 4889E5   		movq	%rsp, %rbp
 1464              		.cfi_def_cfa_register 6
 1465 0e63 89F8     		movl	%edi, %eax
 1466 0e65 488975F0 		movq	%rsi, -16(%rbp)
 1467 0e69 8845FC   		movb	%al, -4(%rbp)
 339:main.c        **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
 1468              		.loc 1 339 0
 1469 0e6c 807DFC2F 		cmpb	$47, -4(%rbp)
 1470 0e70 7E1A     		jle	.L80
 1471              		.loc 1 339 0 is_stmt 0 discriminator 1
 1472 0e72 807DFC39 		cmpb	$57, -4(%rbp)
 1473 0e76 7F14     		jg	.L80
 340:main.c        **** 		*nibble = (uint8)(hexDigit - '0');
 1474              		.loc 1 340 0 is_stmt 1
 1475 0e78 0FB645FC 		movzbl	-4(%rbp), %eax
 1476 0e7c 8D50D0   		leal	-48(%rax), %edx
 1477 0e7f 488B45F0 		movq	-16(%rbp), %rax
 1478 0e83 8810     		movb	%dl, (%rax)
 341:main.c        **** 		return false;
 1479              		.loc 1 341 0
 1480 0e85 B8000000 		movl	$0, %eax
 1480      00
 1481 0e8a EB45     		jmp	.L81
 1482              	.L80:
 342:main.c        **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
 1483              		.loc 1 342 0
 1484 0e8c 807DFC60 		cmpb	$96, -4(%rbp)
 1485 0e90 7E1A     		jle	.L82
 1486              		.loc 1 342 0 is_stmt 0 discriminator 1
 1487 0e92 807DFC66 		cmpb	$102, -4(%rbp)
 1488 0e96 7F14     		jg	.L82
 343:main.c        **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
 1489              		.loc 1 343 0 is_stmt 1
 1490 0e98 0FB645FC 		movzbl	-4(%rbp), %eax
 1491 0e9c 8D50A9   		leal	-87(%rax), %edx
 1492 0e9f 488B45F0 		movq	-16(%rbp), %rax
 1493 0ea3 8810     		movb	%dl, (%rax)
 344:main.c        **** 		return false;
 1494              		.loc 1 344 0
 1495 0ea5 B8000000 		movl	$0, %eax
 1495      00
 1496 0eaa EB25     		jmp	.L81
 1497              	.L82:
 345:main.c        **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
 1498              		.loc 1 345 0
 1499 0eac 807DFC40 		cmpb	$64, -4(%rbp)
 1500 0eb0 7E1A     		jle	.L83
 1501              		.loc 1 345 0 is_stmt 0 discriminator 1
 1502 0eb2 807DFC46 		cmpb	$70, -4(%rbp)
 1503 0eb6 7F14     		jg	.L83
 346:main.c        **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
 1504              		.loc 1 346 0 is_stmt 1
 1505 0eb8 0FB645FC 		movzbl	-4(%rbp), %eax
 1506 0ebc 8D50C9   		leal	-55(%rax), %edx
 1507 0ebf 488B45F0 		movq	-16(%rbp), %rax
 1508 0ec3 8810     		movb	%dl, (%rax)
 347:main.c        **** 		return false;
 1509              		.loc 1 347 0
 1510 0ec5 B8000000 		movl	$0, %eax
 1510      00
 1511 0eca EB05     		jmp	.L81
 1512              	.L83:
 348:main.c        **** 	} else {
 349:main.c        **** 		return true;
 1513              		.loc 1 349 0
 1514 0ecc B8010000 		movl	$1, %eax
 1514      00
 1515              	.L81:
 350:main.c        **** 	}
 351:main.c        **** }
 1516              		.loc 1 351 0
 1517 0ed1 5D       		popq	%rbp
 1518              		.cfi_def_cfa 7, 8
 1519 0ed2 C3       		ret
 1520              		.cfi_endproc
 1521              	.LFE15:
 1524              	getHexByte:
 1525              	.LFB16:
 352:main.c        **** 
 353:main.c        **** static int getHexByte(uint8 *byte) {
 1526              		.loc 1 353 0
 1527              		.cfi_startproc
 1528 0ed3 55       		pushq	%rbp
 1529              		.cfi_def_cfa_offset 16
 1530              		.cfi_offset 6, -16
 1531 0ed4 4889E5   		movq	%rsp, %rbp
 1532              		.cfi_def_cfa_register 6
 1533 0ed7 4883EC20 		subq	$32, %rsp
 1534 0edb 48897DE8 		movq	%rdi, -24(%rbp)
 1535              		.loc 1 353 0
 1536 0edf 64488B04 		movq	%fs:40, %rax
 1536      25280000 
 1536      00
 1537 0ee8 488945F8 		movq	%rax, -8(%rbp)
 1538 0eec 31C0     		xorl	%eax, %eax
 354:main.c        **** 	uint8 upperNibble;
 355:main.c        **** 	uint8 lowerNibble;
 356:main.c        **** 	if ( !getHexNibble(ptr[0], &upperNibble) && !getHexNibble(ptr[1], &lowerNibble) ) {
 1539              		.loc 1 356 0
 1540 0eee 488B0500 		movq	ptr(%rip), %rax
 1540      000000
 1541 0ef5 0FB600   		movzbl	(%rax), %eax
 1542 0ef8 0FBEC0   		movsbl	%al, %eax
 1543 0efb 488D55F6 		leaq	-10(%rbp), %rdx
 1544 0eff 4889D6   		movq	%rdx, %rsi
 1545 0f02 89C7     		movl	%eax, %edi
 1546 0f04 E856FFFF 		call	getHexNibble
 1546      FF
 1547 0f09 83F001   		xorl	$1, %eax
 1548 0f0c 84C0     		testb	%al, %al
 1549 0f0e 744C     		je	.L85
 1550              		.loc 1 356 0 is_stmt 0 discriminator 1
 1551 0f10 488B0500 		movq	ptr(%rip), %rax
 1551      000000
 1552 0f17 4883C001 		addq	$1, %rax
 1553 0f1b 0FB600   		movzbl	(%rax), %eax
 1554 0f1e 0FBEC0   		movsbl	%al, %eax
 1555 0f21 488D55F7 		leaq	-9(%rbp), %rdx
 1556 0f25 4889D6   		movq	%rdx, %rsi
 1557 0f28 89C7     		movl	%eax, %edi
 1558 0f2a E830FFFF 		call	getHexNibble
 1558      FF
 1559 0f2f 83F001   		xorl	$1, %eax
 1560 0f32 84C0     		testb	%al, %al
 1561 0f34 7426     		je	.L85
 357:main.c        **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 1562              		.loc 1 357 0 is_stmt 1
 1563 0f36 0FB645F6 		movzbl	-10(%rbp), %eax
 1564 0f3a 0FB6C0   		movzbl	%al, %eax
 1565 0f3d C1E004   		sall	$4, %eax
 1566 0f40 89C2     		movl	%eax, %edx
 1567 0f42 0FB645F7 		movzbl	-9(%rbp), %eax
 1568 0f46 09D0     		orl	%edx, %eax
 1569 0f48 89C2     		movl	%eax, %edx
 1570 0f4a 488B45E8 		movq	-24(%rbp), %rax
 1571 0f4e 8810     		movb	%dl, (%rax)
 358:main.c        **** 		byte += 2;
 1572              		.loc 1 358 0
 1573 0f50 488345E8 		addq	$2, -24(%rbp)
 1573      02
 359:main.c        **** 		return 0;
 1574              		.loc 1 359 0
 1575 0f55 B8000000 		movl	$0, %eax
 1575      00
 1576 0f5a EB05     		jmp	.L87
 1577              	.L85:
 360:main.c        **** 	} else {
 361:main.c        **** 		return 1;
 1578              		.loc 1 361 0
 1579 0f5c B8010000 		movl	$1, %eax
 1579      00
 1580              	.L87:
 362:main.c        **** 	}
 363:main.c        **** }
 1581              		.loc 1 363 0 discriminator 1
 1582 0f61 488B4DF8 		movq	-8(%rbp), %rcx
 1583 0f65 6448330C 		xorq	%fs:40, %rcx
 1583      25280000 
 1583      00
 1584 0f6e 7405     		je	.L88
 1585              		.loc 1 363 0 is_stmt 0
 1586 0f70 E8000000 		call	__stack_chk_fail
 1586      00
 1587              	.L88:
 1588 0f75 C9       		leave
 1589              		.cfi_def_cfa 7, 8
 1590 0f76 C3       		ret
 1591              		.cfi_endproc
 1592              	.LFE16:
 1594              		.section	.rodata
 1595              	.LC5:
 1596 005a 556E7061 		.string	"Unparseable hex number"
 1596      72736561 
 1596      626C6520 
 1596      68657820 
 1596      6E756D62 
 1597              	.LC6:
 1598 0071 4368616E 		.string	"Channel out of range"
 1598      6E656C20 
 1598      6F757420 
 1598      6F662072 
 1598      616E6765 
 1599              	.LC7:
 1600 0086 436F6E64 		.string	"Conduit out of range"
 1600      75697420 
 1600      6F757420 
 1600      6F662072 
 1600      616E6765 
 1601              	.LC8:
 1602 009b 496C6C65 		.string	"Illegal character"
 1602      67616C20 
 1602      63686172 
 1602      61637465 
 1602      7200
 1603              	.LC9:
 1604 00ad 556E7465 		.string	"Unterminated string"
 1604      726D696E 
 1604      61746564 
 1604      20737472 
 1604      696E6700 
 1605              	.LC10:
 1606 00c1 4E6F206D 		.string	"No memory"
 1606      656D6F72 
 1606      7900
 1607              	.LC11:
 1608 00cb 456D7074 		.string	"Empty string"
 1608      79207374 
 1608      72696E67 
 1608      00
 1609              	.LC12:
 1610 00d8 4F646420 		.string	"Odd number of digits"
 1610      6E756D62 
 1610      6572206F 
 1610      66206469 
 1610      67697473 
 1611              	.LC13:
 1612 00ed 43616E6E 		.string	"Cannot load file"
 1612      6F74206C 
 1612      6F616420 
 1612      66696C65 
 1612      00
 1613              	.LC14:
 1614 00fe 43616E6E 		.string	"Cannot save file"
 1614      6F742073 
 1614      61766520 
 1614      66696C65 
 1614      00
 1615              	.LC15:
 1616 010f 42616420 		.string	"Bad arguments"
 1616      61726775 
 1616      6D656E74 
 1616      7300
 1617 011d 000000   		.align 32
 1620              	errMessages:
 1621 0120 00000000 		.quad	0
 1621      00000000 
 1622 0128 00000000 		.quad	0
 1622      00000000 
 1623 0130 00000000 		.quad	.LC5
 1623      00000000 
 1624 0138 00000000 		.quad	.LC6
 1624      00000000 
 1625 0140 00000000 		.quad	.LC7
 1625      00000000 
 1626 0148 00000000 		.quad	.LC8
 1626      00000000 
 1627 0150 00000000 		.quad	.LC9
 1627      00000000 
 1628 0158 00000000 		.quad	.LC10
 1628      00000000 
 1629 0160 00000000 		.quad	.LC11
 1629      00000000 
 1630 0168 00000000 		.quad	.LC12
 1630      00000000 
 1631 0170 00000000 		.quad	.LC13
 1631      00000000 
 1632 0178 00000000 		.quad	.LC14
 1632      00000000 
 1633 0180 00000000 		.quad	.LC15
 1633      00000000 
 1634              	.LC16:
 1635 0188 646F5265 		.string	"doRead()"
 1635      61642829 
 1635      00
 1636              		.text
 1638              	doRead:
 1639              	.LFB17:
 364:main.c        **** 
 365:main.c        **** static const char *const errMessages[] = {
 366:main.c        **** 	NULL,
 367:main.c        **** 	NULL,
 368:main.c        **** 	"Unparseable hex number",
 369:main.c        **** 	"Channel out of range",
 370:main.c        **** 	"Conduit out of range",
 371:main.c        **** 	"Illegal character",
 372:main.c        **** 	"Unterminated string",
 373:main.c        **** 	"No memory",
 374:main.c        **** 	"Empty string",
 375:main.c        **** 	"Odd number of digits",
 376:main.c        **** 	"Cannot load file",
 377:main.c        **** 	"Cannot save file",
 378:main.c        **** 	"Bad arguments"
 379:main.c        **** };
 380:main.c        **** 
 381:main.c        **** typedef enum {
 382:main.c        **** 	FLP_SUCCESS,
 383:main.c        **** 	FLP_LIBERR,
 384:main.c        **** 	FLP_BAD_HEX,
 385:main.c        **** 	FLP_CHAN_RANGE,
 386:main.c        **** 	FLP_CONDUIT_RANGE,
 387:main.c        **** 	FLP_ILL_CHAR,
 388:main.c        **** 	FLP_UNTERM_STRING,
 389:main.c        **** 	FLP_NO_MEMORY,
 390:main.c        **** 	FLP_EMPTY_STRING,
 391:main.c        **** 	FLP_ODD_DIGITS,
 392:main.c        **** 	FLP_CANNOT_LOAD,
 393:main.c        **** 	FLP_CANNOT_SAVE,
 394:main.c        **** 	FLP_ARGS
 395:main.c        **** } ReturnCode;
 396:main.c        **** 
 397:main.c        **** static ReturnCode doRead(
 398:main.c        **** 	struct FLContext *handle, uint8 chan, uint32 length, FILE *destFile, uint16 *checksum,
 399:main.c        **** 	const char **error)
 400:main.c        **** {
 1640              		.loc 1 400 0 is_stmt 1
 1641              		.cfi_startproc
 1642 0f77 55       		pushq	%rbp
 1643              		.cfi_def_cfa_offset 16
 1644              		.cfi_offset 6, -16
 1645 0f78 4889E5   		movq	%rsp, %rbp
 1646              		.cfi_def_cfa_register 6
 1647 0f7b 4883EC60 		subq	$96, %rsp
 1648 0f7f 48897DC8 		movq	%rdi, -56(%rbp)
 1649 0f83 89F0     		movl	%esi, %eax
 1650 0f85 8955C0   		movl	%edx, -64(%rbp)
 1651 0f88 48894DB8 		movq	%rcx, -72(%rbp)
 1652 0f8c 4C8945B0 		movq	%r8, -80(%rbp)
 1653 0f90 4C894DA8 		movq	%r9, -88(%rbp)
 1654 0f94 8845C4   		movb	%al, -60(%rbp)
 1655              		.loc 1 400 0
 1656 0f97 64488B04 		movq	%fs:40, %rax
 1656      25280000 
 1656      00
 1657 0fa0 488945F8 		movq	%rax, -8(%rbp)
 1658 0fa4 31C0     		xorl	%eax, %eax
 401:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 1659              		.loc 1 401 0
 1660 0fa6 C745D800 		movl	$0, -40(%rbp)
 1660      000000
 402:main.c        **** 	uint32 bytesWritten;
 403:main.c        **** 	FLStatus fStatus;
 404:main.c        **** 	uint32 chunkSize;
 405:main.c        **** 	const uint8 *recvData;
 406:main.c        **** 	uint32 actualLength;
 407:main.c        **** 	const uint8 *ptr;
 408:main.c        **** 	uint16 csVal = 0x0000;
 1661              		.loc 1 408 0
 1662 0fad 66C745D2 		movw	$0, -46(%rbp)
 1662      0000
 409:main.c        **** 	#define READ_MAX 65536
 410:main.c        **** 
 411:main.c        **** 	// Read first chunk
 412:main.c        **** 	chunkSize = length >= READ_MAX ? READ_MAX : length;
 1663              		.loc 1 412 0
 1664 0fb3 B8000001 		movl	$65536, %eax
 1664      00
 1665 0fb8 817DC000 		cmpl	$65536, -64(%rbp)
 1665      000100
 1666 0fbf 0F4645C0 		cmovbe	-64(%rbp), %eax
 1667 0fc3 8945DC   		movl	%eax, -36(%rbp)
 413:main.c        **** 	fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 1668              		.loc 1 413 0
 1669 0fc6 0FB675C4 		movzbl	-60(%rbp), %esi
 1670 0fca 488B4DA8 		movq	-88(%rbp), %rcx
 1671 0fce 8B55DC   		movl	-36(%rbp), %edx
 1672 0fd1 488B45C8 		movq	-56(%rbp), %rax
 1673 0fd5 4989C8   		movq	%rcx, %r8
 1674 0fd8 B9000000 		movl	$0, %ecx
 1674      00
 1675 0fdd 4889C7   		movq	%rax, %rdi
 1676 0fe0 E8000000 		call	flReadChannelAsyncSubmit
 1676      00
 1677 0fe5 8945E0   		movl	%eax, -32(%rbp)
 414:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 1678              		.loc 1 414 0
 1679 0fe8 837DE000 		cmpl	$0, -32(%rbp)
 1680 0fec 741D     		je	.L90
 1681              		.loc 1 414 0 is_stmt 0 discriminator 1
 1682 0fee 488B45A8 		movq	-88(%rbp), %rax
 1683 0ff2 BE000000 		movl	$.LC16, %esi
 1683      00
 1684 0ff7 4889C7   		movq	%rax, %rdi
 1685 0ffa E8000000 		call	errPrefix
 1685      00
 1686 0fff C745D801 		movl	$1, -40(%rbp)
 1686      000000
 1687 1006 E9FB0100 		jmp	.L91
 1687      00
 1688              	.L90:
 415:main.c        **** 	length = length - chunkSize;
 1689              		.loc 1 415 0 is_stmt 1
 1690 100b 8B45DC   		movl	-36(%rbp), %eax
 1691 100e 2945C0   		subl	%eax, -64(%rbp)
 416:main.c        **** 
 417:main.c        **** 	while ( length ) {
 1692              		.loc 1 417 0
 1693 1011 E91E0100 		jmp	.L92
 1693      00
 1694              	.L98:
 418:main.c        **** 		// Read chunk N
 419:main.c        **** 		chunkSize = length >= READ_MAX ? READ_MAX : length;
 1695              		.loc 1 419 0
 1696 1016 B8000001 		movl	$65536, %eax
 1696      00
 1697 101b 817DC000 		cmpl	$65536, -64(%rbp)
 1697      000100
 1698 1022 0F4645C0 		cmovbe	-64(%rbp), %eax
 1699 1026 8945DC   		movl	%eax, -36(%rbp)
 420:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 1700              		.loc 1 420 0
 1701 1029 0FB675C4 		movzbl	-60(%rbp), %esi
 1702 102d 488B4DA8 		movq	-88(%rbp), %rcx
 1703 1031 8B55DC   		movl	-36(%rbp), %edx
 1704 1034 488B45C8 		movq	-56(%rbp), %rax
 1705 1038 4989C8   		movq	%rcx, %r8
 1706 103b B9000000 		movl	$0, %ecx
 1706      00
 1707 1040 4889C7   		movq	%rax, %rdi
 1708 1043 E8000000 		call	flReadChannelAsyncSubmit
 1708      00
 1709 1048 8945E0   		movl	%eax, -32(%rbp)
 421:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 1710              		.loc 1 421 0
 1711 104b 837DE000 		cmpl	$0, -32(%rbp)
 1712 104f 741D     		je	.L93
 1713              		.loc 1 421 0 is_stmt 0 discriminator 1
 1714 1051 488B45A8 		movq	-88(%rbp), %rax
 1715 1055 BE000000 		movl	$.LC16, %esi
 1715      00
 1716 105a 4889C7   		movq	%rax, %rdi
 1717 105d E8000000 		call	errPrefix
 1717      00
 1718 1062 C745D801 		movl	$1, -40(%rbp)
 1718      000000
 1719 1069 E9980100 		jmp	.L91
 1719      00
 1720              	.L93:
 422:main.c        **** 		length = length - chunkSize;
 1721              		.loc 1 422 0 is_stmt 1
 1722 106e 8B45DC   		movl	-36(%rbp), %eax
 1723 1071 2945C0   		subl	%eax, -64(%rbp)
 423:main.c        **** 		
 424:main.c        **** 		// Await chunk N-1
 425:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 1724              		.loc 1 425 0
 1725 1074 488B7DA8 		movq	-88(%rbp), %rdi
 1726 1078 488D4DD4 		leaq	-44(%rbp), %rcx
 1727 107c 488D55D4 		leaq	-44(%rbp), %rdx
 1728 1080 488D75E8 		leaq	-24(%rbp), %rsi
 1729 1084 488B45C8 		movq	-56(%rbp), %rax
 1730 1088 4989F8   		movq	%rdi, %r8
 1731 108b 4889C7   		movq	%rax, %rdi
 1732 108e E8000000 		call	flReadChannelAsyncAwait
 1732      00
 1733 1093 8945E0   		movl	%eax, -32(%rbp)
 426:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 1734              		.loc 1 426 0
 1735 1096 837DE000 		cmpl	$0, -32(%rbp)
 1736 109a 741D     		je	.L94
 1737              		.loc 1 426 0 is_stmt 0 discriminator 1
 1738 109c 488B45A8 		movq	-88(%rbp), %rax
 1739 10a0 BE000000 		movl	$.LC16, %esi
 1739      00
 1740 10a5 4889C7   		movq	%rax, %rdi
 1741 10a8 E8000000 		call	errPrefix
 1741      00
 1742 10ad C745D801 		movl	$1, -40(%rbp)
 1742      000000
 1743 10b4 E94D0100 		jmp	.L91
 1743      00
 1744              	.L94:
 427:main.c        **** 
 428:main.c        **** 		// Write chunk N-1 to file
 429:main.c        **** 		bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 1745              		.loc 1 429 0 is_stmt 1
 1746 10b9 8B45D4   		movl	-44(%rbp), %eax
 1747 10bc 89C6     		movl	%eax, %esi
 1748 10be 488B45E8 		movq	-24(%rbp), %rax
 1749 10c2 488B55B8 		movq	-72(%rbp), %rdx
 1750 10c6 4889D1   		movq	%rdx, %rcx
 1751 10c9 4889F2   		movq	%rsi, %rdx
 1752 10cc BE010000 		movl	$1, %esi
 1752      00
 1753 10d1 4889C7   		movq	%rax, %rdi
 1754 10d4 E8000000 		call	fwrite
 1754      00
 1755 10d9 8945E4   		movl	%eax, -28(%rbp)
 430:main.c        **** 		CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 1756              		.loc 1 430 0
 1757 10dc 8B45D4   		movl	-44(%rbp), %eax
 1758 10df 3945E4   		cmpl	%eax, -28(%rbp)
 1759 10e2 741D     		je	.L95
 1760              		.loc 1 430 0 is_stmt 0 discriminator 1
 1761 10e4 488B45A8 		movq	-88(%rbp), %rax
 1762 10e8 BE000000 		movl	$.LC16, %esi
 1762      00
 1763 10ed 4889C7   		movq	%rax, %rdi
 1764 10f0 E8000000 		call	errPrefix
 1764      00
 1765 10f5 C745D80B 		movl	$11, -40(%rbp)
 1765      000000
 1766 10fc E9050100 		jmp	.L91
 1766      00
 1767              	.L95:
 431:main.c        **** 
 432:main.c        **** 		// Checksum chunk N-1
 433:main.c        **** 		chunkSize = actualLength;
 1768              		.loc 1 433 0 is_stmt 1
 1769 1101 8B45D4   		movl	-44(%rbp), %eax
 1770 1104 8945DC   		movl	%eax, -36(%rbp)
 434:main.c        **** 		ptr = recvData;
 1771              		.loc 1 434 0
 1772 1107 488B45E8 		movq	-24(%rbp), %rax
 1773 110b 488945F0 		movq	%rax, -16(%rbp)
 435:main.c        **** 		while ( chunkSize-- ) {
 1774              		.loc 1 435 0
 1775 110f EB16     		jmp	.L96
 1776              	.L97:
 436:main.c        **** 			csVal = (uint16)(csVal + *ptr++);
 1777              		.loc 1 436 0
 1778 1111 488B45F0 		movq	-16(%rbp), %rax
 1779 1115 488D5001 		leaq	1(%rax), %rdx
 1780 1119 488955F0 		movq	%rdx, -16(%rbp)
 1781 111d 0FB600   		movzbl	(%rax), %eax
 1782 1120 0FB6C0   		movzbl	%al, %eax
 1783 1123 660145D2 		addw	%ax, -46(%rbp)
 1784              	.L96:
 435:main.c        **** 		while ( chunkSize-- ) {
 1785              		.loc 1 435 0
 1786 1127 8B45DC   		movl	-36(%rbp), %eax
 1787 112a 8D50FF   		leal	-1(%rax), %edx
 1788 112d 8955DC   		movl	%edx, -36(%rbp)
 1789 1130 85C0     		testl	%eax, %eax
 1790 1132 75DD     		jne	.L97
 1791              	.L92:
 417:main.c        **** 		// Read chunk N
 1792              		.loc 1 417 0
 1793 1134 837DC000 		cmpl	$0, -64(%rbp)
 1794 1138 0F85D8FE 		jne	.L98
 1794      FFFF
 437:main.c        **** 		}
 438:main.c        **** 	}
 439:main.c        **** 
 440:main.c        **** 	// Await last chunk
 441:main.c        **** 	fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 1795              		.loc 1 441 0
 1796 113e 488B7DA8 		movq	-88(%rbp), %rdi
 1797 1142 488D4DD4 		leaq	-44(%rbp), %rcx
 1798 1146 488D55D4 		leaq	-44(%rbp), %rdx
 1799 114a 488D75E8 		leaq	-24(%rbp), %rsi
 1800 114e 488B45C8 		movq	-56(%rbp), %rax
 1801 1152 4989F8   		movq	%rdi, %r8
 1802 1155 4889C7   		movq	%rax, %rdi
 1803 1158 E8000000 		call	flReadChannelAsyncAwait
 1803      00
 1804 115d 8945E0   		movl	%eax, -32(%rbp)
 442:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 1805              		.loc 1 442 0
 1806 1160 837DE000 		cmpl	$0, -32(%rbp)
 1807 1164 741D     		je	.L99
 1808              		.loc 1 442 0 is_stmt 0 discriminator 1
 1809 1166 488B45A8 		movq	-88(%rbp), %rax
 1810 116a BE000000 		movl	$.LC16, %esi
 1810      00
 1811 116f 4889C7   		movq	%rax, %rdi
 1812 1172 E8000000 		call	errPrefix
 1812      00
 1813 1177 C745D801 		movl	$1, -40(%rbp)
 1813      000000
 1814 117e E9830000 		jmp	.L91
 1814      00
 1815              	.L99:
 443:main.c        **** 	
 444:main.c        **** 	// Write last chunk to file
 445:main.c        **** 	bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 1816              		.loc 1 445 0 is_stmt 1
 1817 1183 8B45D4   		movl	-44(%rbp), %eax
 1818 1186 89C6     		movl	%eax, %esi
 1819 1188 488B45E8 		movq	-24(%rbp), %rax
 1820 118c 488B55B8 		movq	-72(%rbp), %rdx
 1821 1190 4889D1   		movq	%rdx, %rcx
 1822 1193 4889F2   		movq	%rsi, %rdx
 1823 1196 BE010000 		movl	$1, %esi
 1823      00
 1824 119b 4889C7   		movq	%rax, %rdi
 1825 119e E8000000 		call	fwrite
 1825      00
 1826 11a3 8945E4   		movl	%eax, -28(%rbp)
 446:main.c        **** 	CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 1827              		.loc 1 446 0
 1828 11a6 8B45D4   		movl	-44(%rbp), %eax
 1829 11a9 3945E4   		cmpl	%eax, -28(%rbp)
 1830 11ac 741A     		je	.L100
 1831              		.loc 1 446 0 is_stmt 0 discriminator 1
 1832 11ae 488B45A8 		movq	-88(%rbp), %rax
 1833 11b2 BE000000 		movl	$.LC16, %esi
 1833      00
 1834 11b7 4889C7   		movq	%rax, %rdi
 1835 11ba E8000000 		call	errPrefix
 1835      00
 1836 11bf C745D80B 		movl	$11, -40(%rbp)
 1836      000000
 1837 11c6 EB3E     		jmp	.L91
 1838              	.L100:
 447:main.c        **** 
 448:main.c        **** 	// Checksum last chunk
 449:main.c        **** 	chunkSize = actualLength;
 1839              		.loc 1 449 0 is_stmt 1
 1840 11c8 8B45D4   		movl	-44(%rbp), %eax
 1841 11cb 8945DC   		movl	%eax, -36(%rbp)
 450:main.c        **** 	ptr = recvData;
 1842              		.loc 1 450 0
 1843 11ce 488B45E8 		movq	-24(%rbp), %rax
 1844 11d2 488945F0 		movq	%rax, -16(%rbp)
 451:main.c        **** 	while ( chunkSize-- ) {
 1845              		.loc 1 451 0
 1846 11d6 EB16     		jmp	.L101
 1847              	.L102:
 452:main.c        **** 		csVal = (uint16)(csVal + *ptr++);
 1848              		.loc 1 452 0
 1849 11d8 488B45F0 		movq	-16(%rbp), %rax
 1850 11dc 488D5001 		leaq	1(%rax), %rdx
 1851 11e0 488955F0 		movq	%rdx, -16(%rbp)
 1852 11e4 0FB600   		movzbl	(%rax), %eax
 1853 11e7 0FB6C0   		movzbl	%al, %eax
 1854 11ea 660145D2 		addw	%ax, -46(%rbp)
 1855              	.L101:
 451:main.c        **** 	while ( chunkSize-- ) {
 1856              		.loc 1 451 0
 1857 11ee 8B45DC   		movl	-36(%rbp), %eax
 1858 11f1 8D50FF   		leal	-1(%rax), %edx
 1859 11f4 8955DC   		movl	%edx, -36(%rbp)
 1860 11f7 85C0     		testl	%eax, %eax
 1861 11f9 75DD     		jne	.L102
 453:main.c        **** 	}
 454:main.c        **** 	
 455:main.c        **** 	// Return checksum to caller
 456:main.c        **** 	*checksum = csVal;
 1862              		.loc 1 456 0
 1863 11fb 488B45B0 		movq	-80(%rbp), %rax
 1864 11ff 0FB755D2 		movzwl	-46(%rbp), %edx
 1865 1203 668910   		movw	%dx, (%rax)
 1866              	.L91:
 457:main.c        **** cleanup:
 458:main.c        **** 	return retVal;
 1867              		.loc 1 458 0
 1868 1206 8B45D8   		movl	-40(%rbp), %eax
 459:main.c        **** }
 1869              		.loc 1 459 0
 1870 1209 488B4DF8 		movq	-8(%rbp), %rcx
 1871 120d 6448330C 		xorq	%fs:40, %rcx
 1871      25280000 
 1871      00
 1872 1216 7405     		je	.L104
 1873 1218 E8000000 		call	__stack_chk_fail
 1873      00
 1874              	.L104:
 1875 121d C9       		leave
 1876              		.cfi_def_cfa 7, 8
 1877 121e C3       		ret
 1878              		.cfi_endproc
 1879              	.LFE17:
 1881              		.section	.rodata
 1882              	.LC17:
 1883 0191 646F5772 		.string	"doWrite()"
 1883      69746528 
 1883      2900
 1884              		.text
 1886              	doWrite:
 1887              	.LFB18:
 460:main.c        **** 
 461:main.c        **** static ReturnCode doWrite(
 462:main.c        **** 	struct FLContext *handle, uint8 chan, FILE *srcFile, size_t *length, uint16 *checksum,
 463:main.c        **** 	const char **error)
 464:main.c        **** {
 1888              		.loc 1 464 0
 1889              		.cfi_startproc
 1890 121f 55       		pushq	%rbp
 1891              		.cfi_def_cfa_offset 16
 1892              		.cfi_offset 6, -16
 1893 1220 4889E5   		movq	%rsp, %rbp
 1894              		.cfi_def_cfa_register 6
 1895 1223 4881EC70 		subq	$65648, %rsp
 1895      000100
 1896 122a 4889BDB8 		movq	%rdi, -65608(%rbp)
 1896      FFFEFF
 1897 1231 89F0     		movl	%esi, %eax
 1898 1233 488995A8 		movq	%rdx, -65624(%rbp)
 1898      FFFEFF
 1899 123a 48898DA0 		movq	%rcx, -65632(%rbp)
 1899      FFFEFF
 1900 1241 4C898598 		movq	%r8, -65640(%rbp)
 1900      FFFEFF
 1901 1248 4C898D90 		movq	%r9, -65648(%rbp)
 1901      FFFEFF
 1902 124f 8885B4FF 		movb	%al, -65612(%rbp)
 1902      FEFF
 1903              		.loc 1 464 0
 1904 1255 64488B04 		movq	%fs:40, %rax
 1904      25280000 
 1904      00
 1905 125e 488945F8 		movq	%rax, -8(%rbp)
 1906 1262 31C0     		xorl	%eax, %eax
 465:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 1907              		.loc 1 465 0
 1908 1264 C785C8FF 		movl	$0, -65592(%rbp)
 1908      FEFF0000 
 1908      0000
 466:main.c        **** 	size_t bytesRead, i;
 467:main.c        **** 	FLStatus fStatus;
 468:main.c        **** 	const uint8 *ptr;
 469:main.c        **** 	uint16 csVal = 0x0000;
 1909              		.loc 1 469 0
 1910 126e 66C785C6 		movw	$0, -65594(%rbp)
 1910      FFFEFF00 
 1910      00
 470:main.c        **** 	size_t lenVal = 0;
 1911              		.loc 1 470 0
 1912 1277 48C785E0 		movq	$0, -65568(%rbp)
 1912      FFFEFF00 
 1912      000000
 1913              	.L111:
 471:main.c        **** 	#define WRITE_MAX (65536 - 5)
 472:main.c        **** 	uint8 buffer[WRITE_MAX];
 473:main.c        **** 
 474:main.c        **** 	do {
 475:main.c        **** 		// Read Nth chunk
 476:main.c        **** 		bytesRead = fread(buffer, 1, WRITE_MAX, srcFile);
 1914              		.loc 1 476 0
 1915 1282 488B95A8 		movq	-65624(%rbp), %rdx
 1915      FFFEFF
 1916 1289 488D85F0 		leaq	-65552(%rbp), %rax
 1916      FFFEFF
 1917 1290 4889D1   		movq	%rdx, %rcx
 1918 1293 BAFBFF00 		movl	$65531, %edx
 1918      00
 1919 1298 BE010000 		movl	$1, %esi
 1919      00
 1920 129d 4889C7   		movq	%rax, %rdi
 1921 12a0 E8000000 		call	fread
 1921      00
 1922 12a5 488985E8 		movq	%rax, -65560(%rbp)
 1922      FFFEFF
 477:main.c        **** 		if ( bytesRead ) {
 1923              		.loc 1 477 0
 1924 12ac 4883BDE8 		cmpq	$0, -65560(%rbp)
 1924      FFFEFF00 
 1925 12b4 0F84C200 		je	.L106
 1925      0000
 478:main.c        **** 			// Update running total
 479:main.c        **** 			lenVal = lenVal + bytesRead;
 1926              		.loc 1 479 0
 1927 12ba 488B85E8 		movq	-65560(%rbp), %rax
 1927      FFFEFF
 1928 12c1 480185E0 		addq	%rax, -65568(%rbp)
 1928      FFFEFF
 480:main.c        **** 
 481:main.c        **** 			// Submit Nth chunk
 482:main.c        **** 			fStatus = flWriteChannelAsync(handle, chan, bytesRead, buffer, error);
 1929              		.loc 1 482 0
 1930 12c8 0FB6B5B4 		movzbl	-65612(%rbp), %esi
 1930      FFFEFF
 1931 12cf 488BBD90 		movq	-65648(%rbp), %rdi
 1931      FFFEFF
 1932 12d6 488D8DF0 		leaq	-65552(%rbp), %rcx
 1932      FFFEFF
 1933 12dd 488B95E8 		movq	-65560(%rbp), %rdx
 1933      FFFEFF
 1934 12e4 488B85B8 		movq	-65608(%rbp), %rax
 1934      FFFEFF
 1935 12eb 4989F8   		movq	%rdi, %r8
 1936 12ee 4889C7   		movq	%rax, %rdi
 1937 12f1 E8000000 		call	flWriteChannelAsync
 1937      00
 1938 12f6 8985CCFF 		movl	%eax, -65588(%rbp)
 1938      FEFF
 483:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 1939              		.loc 1 483 0
 1940 12fc 83BDCCFF 		cmpl	$0, -65588(%rbp)
 1940      FEFF00
 1941 1303 7423     		je	.L107
 1942              		.loc 1 483 0 is_stmt 0 discriminator 1
 1943 1305 488B8590 		movq	-65648(%rbp), %rax
 1943      FFFEFF
 1944 130c BE000000 		movl	$.LC17, %esi
 1944      00
 1945 1311 4889C7   		movq	%rax, %rdi
 1946 1314 E8000000 		call	errPrefix
 1946      00
 1947 1319 C785C8FF 		movl	$1, -65592(%rbp)
 1947      FEFF0100 
 1947      0000
 1948 1323 E9CF0000 		jmp	.L108
 1948      00
 1949              	.L107:
 484:main.c        **** 
 485:main.c        **** 			// Checksum Nth chunk
 486:main.c        **** 			i = bytesRead;
 1950              		.loc 1 486 0 is_stmt 1
 1951 1328 488B85E8 		movq	-65560(%rbp), %rax
 1951      FFFEFF
 1952 132f 488985D0 		movq	%rax, -65584(%rbp)
 1952      FFFEFF
 487:main.c        **** 			ptr = buffer;
 1953              		.loc 1 487 0
 1954 1336 488D85F0 		leaq	-65552(%rbp), %rax
 1954      FFFEFF
 1955 133d 488985D8 		movq	%rax, -65576(%rbp)
 1955      FFFEFF
 488:main.c        **** 			while ( i-- ) {
 1956              		.loc 1 488 0
 1957 1344 EB1F     		jmp	.L109
 1958              	.L110:
 489:main.c        **** 				csVal = (uint16)(csVal + *ptr++);
 1959              		.loc 1 489 0
 1960 1346 488B85D8 		movq	-65576(%rbp), %rax
 1960      FFFEFF
 1961 134d 488D5001 		leaq	1(%rax), %rdx
 1962 1351 488995D8 		movq	%rdx, -65576(%rbp)
 1962      FFFEFF
 1963 1358 0FB600   		movzbl	(%rax), %eax
 1964 135b 0FB6C0   		movzbl	%al, %eax
 1965 135e 660185C6 		addw	%ax, -65594(%rbp)
 1965      FFFEFF
 1966              	.L109:
 488:main.c        **** 			while ( i-- ) {
 1967              		.loc 1 488 0
 1968 1365 488B85D0 		movq	-65584(%rbp), %rax
 1968      FFFEFF
 1969 136c 488D50FF 		leaq	-1(%rax), %rdx
 1970 1370 488995D0 		movq	%rdx, -65584(%rbp)
 1970      FFFEFF
 1971 1377 4885C0   		testq	%rax, %rax
 1972 137a 75CA     		jne	.L110
 1973              	.L106:
 490:main.c        **** 			}
 491:main.c        **** 		}
 492:main.c        **** 	} while ( bytesRead == WRITE_MAX );
 1974              		.loc 1 492 0
 1975 137c 4881BDE8 		cmpq	$65531, -65560(%rbp)
 1975      FFFEFFFB 
 1975      FF0000
 1976 1387 0F84F5FE 		je	.L111
 1976      FFFF
 493:main.c        **** 
 494:main.c        **** 	// Wait for writes to be received. This is optional, but it's only fair if we're benchmarking to
 495:main.c        **** 	// actually wait for the work to be completed.
 496:main.c        **** 	fStatus = flAwaitAsyncWrites(handle, error);
 1977              		.loc 1 496 0
 1978 138d 488B9590 		movq	-65648(%rbp), %rdx
 1978      FFFEFF
 1979 1394 488B85B8 		movq	-65608(%rbp), %rax
 1979      FFFEFF
 1980 139b 4889D6   		movq	%rdx, %rsi
 1981 139e 4889C7   		movq	%rax, %rdi
 1982 13a1 E8000000 		call	flAwaitAsyncWrites
 1982      00
 1983 13a6 8985CCFF 		movl	%eax, -65588(%rbp)
 1983      FEFF
 497:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 1984              		.loc 1 497 0
 1985 13ac 83BDCCFF 		cmpl	$0, -65588(%rbp)
 1985      FEFF00
 1986 13b3 7420     		je	.L112
 1987              		.loc 1 497 0 is_stmt 0 discriminator 1
 1988 13b5 488B8590 		movq	-65648(%rbp), %rax
 1988      FFFEFF
 1989 13bc BE000000 		movl	$.LC17, %esi
 1989      00
 1990 13c1 4889C7   		movq	%rax, %rdi
 1991 13c4 E8000000 		call	errPrefix
 1991      00
 1992 13c9 C785C8FF 		movl	$1, -65592(%rbp)
 1992      FEFF0100 
 1992      0000
 1993 13d3 EB22     		jmp	.L108
 1994              	.L112:
 498:main.c        **** 
 499:main.c        **** 	// Return checksum & length to caller
 500:main.c        **** 	*checksum = csVal;
 1995              		.loc 1 500 0 is_stmt 1
 1996 13d5 488B8598 		movq	-65640(%rbp), %rax
 1996      FFFEFF
 1997 13dc 0FB795C6 		movzwl	-65594(%rbp), %edx
 1997      FFFEFF
 1998 13e3 668910   		movw	%dx, (%rax)
 501:main.c        **** 	*length = lenVal;
 1999              		.loc 1 501 0
 2000 13e6 488B85A0 		movq	-65632(%rbp), %rax
 2000      FFFEFF
 2001 13ed 488B95E0 		movq	-65568(%rbp), %rdx
 2001      FFFEFF
 2002 13f4 488910   		movq	%rdx, (%rax)
 2003              	.L108:
 502:main.c        **** cleanup:
 503:main.c        **** 	return retVal;
 2004              		.loc 1 503 0
 2005 13f7 8B85C8FF 		movl	-65592(%rbp), %eax
 2005      FEFF
 504:main.c        **** }
 2006              		.loc 1 504 0
 2007 13fd 488B4DF8 		movq	-8(%rbp), %rcx
 2008 1401 6448330C 		xorq	%fs:40, %rcx
 2008      25280000 
 2008      00
 2009 140a 7405     		je	.L114
 2010 140c E8000000 		call	__stack_chk_fail
 2010      00
 2011              	.L114:
 2012 1411 C9       		leave
 2013              		.cfi_def_cfa 7, 8
 2014 1412 C3       		ret
 2015              		.cfi_endproc
 2016              	.LFE18:
 2018              		.section	.rodata
 2019              	.LC18:
 2020 019b 776200   		.string	"wb"
 2021 019e 0000     		.align 8
 2022              	.LC21:
 2023 01a0 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 2023      20256420 
 2023      62797465 
 2023      73202863 
 2023      6865636B 
 2024              	.LC22:
 2025 01dd 726200   		.string	"rb"
 2026              		.align 8
 2027              	.LC23:
 2028 01e0 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 2028      6520257A 
 2028      75206279 
 2028      74657320 
 2028      28636865 
 2029              	.LC24:
 2030 021e 25732061 		.string	"%s at column %d\n  %s\n  "
 2030      7420636F 
 2030      6C756D6E 
 2030      2025640A 
 2030      20202573 
 2031              	.LC25:
 2032 0236 5E0A00   		.string	"^\n"
 2033              		.text
 2035              	parseLine:
 2036              	.LFB19:
 505:main.c        **** 
 506:main.c        **** static int parseLine(struct FLContext *handle, const char *line, const char **error) {
 2037              		.loc 1 506 0
 2038              		.cfi_startproc
 2039 1413 55       		pushq	%rbp
 2040              		.cfi_def_cfa_offset 16
 2041              		.cfi_offset 6, -16
 2042 1414 4889E5   		movq	%rsp, %rbp
 2043              		.cfi_def_cfa_register 6
 2044 1417 4881EC10 		subq	$272, %rsp
 2044      010000
 2045 141e 4889BD08 		movq	%rdi, -248(%rbp)
 2045      FFFFFF
 2046 1425 4889B500 		movq	%rsi, -256(%rbp)
 2046      FFFFFF
 2047 142c 488995F8 		movq	%rdx, -264(%rbp)
 2047      FEFFFF
 2048              		.loc 1 506 0
 2049 1433 64488B04 		movq	%fs:40, %rax
 2049      25280000 
 2049      00
 2050 143c 488945F8 		movq	%rax, -8(%rbp)
 2051 1440 31C0     		xorl	%eax, %eax
 507:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, status;
 2052              		.loc 1 507 0
 2053 1442 C78514FF 		movl	$0, -236(%rbp)
 2053      FFFF0000 
 2053      0000
 508:main.c        **** 	FLStatus fStatus;
 509:main.c        **** 	struct Buffer dataFromFPGA = {0,};
 2054              		.loc 1 509 0
 2055 144c 48C745D0 		movq	$0, -48(%rbp)
 2055      00000000 
 2056 1454 48C745D8 		movq	$0, -40(%rbp)
 2056      00000000 
 2057 145c 48C745E0 		movq	$0, -32(%rbp)
 2057      00000000 
 2058 1464 48C745E8 		movq	$0, -24(%rbp)
 2058      00000000 
 510:main.c        **** 	BufferStatus bStatus;
 511:main.c        **** 	uint8 *data = NULL;
 2059              		.loc 1 511 0
 2060 146c 48C78548 		movq	$0, -184(%rbp)
 2060      FFFFFF00 
 2060      000000
 512:main.c        **** 	char *fileName = NULL;
 2061              		.loc 1 512 0
 2062 1477 48C78550 		movq	$0, -176(%rbp)
 2062      FFFFFF00 
 2062      000000
 513:main.c        **** 	FILE *file = NULL;
 2063              		.loc 1 513 0
 2064 1482 48C78558 		movq	$0, -168(%rbp)
 2064      FFFFFF00 
 2064      000000
 514:main.c        **** 	double totalTime, speed;
 515:main.c        **** 	#ifdef WIN32
 516:main.c        **** 		LARGE_INTEGER tvStart, tvEnd, freq;
 517:main.c        **** 		DWORD_PTR mask = 1;
 518:main.c        **** 		SetThreadAffinityMask(GetCurrentThread(), mask);
 519:main.c        **** 		QueryPerformanceFrequency(&freq);
 520:main.c        **** 	#else
 521:main.c        **** 		struct timeval tvStart, tvEnd;
 522:main.c        **** 		long long startTime, endTime;
 523:main.c        **** 	#endif
 524:main.c        **** 	bStatus = bufInitialise(&dataFromFPGA, 1024, 0x00, error);
 2065              		.loc 1 524 0
 2066 148d 488B95F8 		movq	-264(%rbp), %rdx
 2066      FEFFFF
 2067 1494 488D45D0 		leaq	-48(%rbp), %rax
 2068 1498 4889D1   		movq	%rdx, %rcx
 2069 149b BA000000 		movl	$0, %edx
 2069      00
 2070 14a0 BE000400 		movl	$1024, %esi
 2070      00
 2071 14a5 4889C7   		movq	%rax, %rdi
 2072 14a8 E8000000 		call	bufInitialise
 2072      00
 2073 14ad 898520FF 		movl	%eax, -224(%rbp)
 2073      FFFF
 525:main.c        **** 	CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 2074              		.loc 1 525 0
 2075 14b3 83BD20FF 		cmpl	$0, -224(%rbp)
 2075      FFFF00
 2076 14ba 740F     		je	.L116
 2077              		.loc 1 525 0 is_stmt 0 discriminator 1
 2078 14bc C78514FF 		movl	$1, -236(%rbp)
 2078      FFFF0100 
 2078      0000
 2079 14c6 E9000F00 		jmp	.L117
 2079      00
 2080              	.L116:
 526:main.c        **** 	ptr = line;
 2081              		.loc 1 526 0 is_stmt 1
 2082 14cb 488B8500 		movq	-256(%rbp), %rax
 2082      FFFFFF
 2083 14d2 48890500 		movq	%rax, ptr(%rip)
 2083      000000
 527:main.c        **** 	do {
 528:main.c        **** 		while ( *ptr == ';' ) {
 2084              		.loc 1 528 0
 2085 14d9 EB12     		jmp	.L118
 2086              	.L119:
 529:main.c        **** 			ptr++;
 2087              		.loc 1 529 0
 2088 14db 488B0500 		movq	ptr(%rip), %rax
 2088      000000
 2089 14e2 4883C001 		addq	$1, %rax
 2090 14e6 48890500 		movq	%rax, ptr(%rip)
 2090      000000
 2091              	.L118:
 528:main.c        **** 			ptr++;
 2092              		.loc 1 528 0
 2093 14ed 488B0500 		movq	ptr(%rip), %rax
 2093      000000
 2094 14f4 0FB600   		movzbl	(%rax), %eax
 2095 14f7 3C3B     		cmpb	$59, %al
 2096 14f9 74E0     		je	.L119
 530:main.c        **** 		}
 531:main.c        **** 		switch ( *ptr ) {
 2097              		.loc 1 531 0
 2098 14fb 488B0500 		movq	ptr(%rip), %rax
 2098      000000
 2099 1502 0FB600   		movzbl	(%rax), %eax
 2100 1505 0FBEC0   		movsbl	%al, %eax
 2101 1508 83F872   		cmpl	$114, %eax
 2102 150b 7417     		je	.L121
 2103 150d 83F877   		cmpl	$119, %eax
 2104 1510 0F84DF06 		je	.L122
 2104      0000
 2105 1516 83F82B   		cmpl	$43, %eax
 2106 1519 0F846F0D 		je	.L123
 2106      0000
 2107 151f E9560E00 		jmp	.L193
 2107      00
 2108              	.L121:
 2109              	.LBB20:
 532:main.c        **** 		case 'r':{
 533:main.c        **** 			uint32 chan;
 534:main.c        **** 			uint32 length = 1;
 2110              		.loc 1 534 0
 2111 1524 C78518FF 		movl	$1, -232(%rbp)
 2111      FFFF0100 
 2111      0000
 535:main.c        **** 			char *end;
 536:main.c        **** 			ptr++;
 2112              		.loc 1 536 0
 2113 152e 488B0500 		movq	ptr(%rip), %rax
 2113      000000
 2114 1535 4883C001 		addq	$1, %rax
 2115 1539 48890500 		movq	%rax, ptr(%rip)
 2115      000000
 537:main.c        **** 			
 538:main.c        **** 			// Get the channel to be read:
 539:main.c        **** 			errno = 0;
 2116              		.loc 1 539 0
 2117 1540 E8000000 		call	__errno_location
 2117      00
 2118 1545 C7000000 		movl	$0, (%rax)
 2118      0000
 540:main.c        **** 			chan = (uint32)strtoul(ptr, &end, 16);
 2119              		.loc 1 540 0
 2120 154b 488B0500 		movq	ptr(%rip), %rax
 2120      000000
 2121 1552 488D8D40 		leaq	-192(%rbp), %rcx
 2121      FFFFFF
 2122 1559 BA100000 		movl	$16, %edx
 2122      00
 2123 155e 4889CE   		movq	%rcx, %rsi
 2124 1561 4889C7   		movq	%rax, %rdi
 2125 1564 E8000000 		call	strtoul
 2125      00
 2126 1569 898530FF 		movl	%eax, -208(%rbp)
 2126      FFFF
 541:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 2127              		.loc 1 541 0
 2128 156f E8000000 		call	__errno_location
 2128      00
 2129 1574 8B00     		movl	(%rax), %eax
 2130 1576 85C0     		testl	%eax, %eax
 2131 1578 740F     		je	.L124
 2132              		.loc 1 541 0 is_stmt 0 discriminator 1
 2133 157a C78514FF 		movl	$2, -236(%rbp)
 2133      FFFF0200 
 2133      0000
 2134 1584 E9420E00 		jmp	.L117
 2134      00
 2135              	.L124:
 542:main.c        **** 
 543:main.c        **** 			// Ensure that it's 0-127
 544:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 2136              		.loc 1 544 0 is_stmt 1
 2137 1589 83BD30FF 		cmpl	$127, -208(%rbp)
 2137      FFFF7F
 2138 1590 760F     		jbe	.L126
 2139              		.loc 1 544 0 is_stmt 0 discriminator 1
 2140 1592 C78514FF 		movl	$3, -236(%rbp)
 2140      FFFF0300 
 2140      0000
 2141 159c E92A0E00 		jmp	.L117
 2141      00
 2142              	.L126:
 545:main.c        **** 			ptr = end;
 2143              		.loc 1 545 0 is_stmt 1
 2144 15a1 488B8540 		movq	-192(%rbp), %rax
 2144      FFFFFF
 2145 15a8 48890500 		movq	%rax, ptr(%rip)
 2145      000000
 546:main.c        **** 
 547:main.c        **** 			// Only three valid chars at this point:
 548:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 2146              		.loc 1 548 0
 2147 15af 488B0500 		movq	ptr(%rip), %rax
 2147      000000
 2148 15b6 0FB600   		movzbl	(%rax), %eax
 2149 15b9 84C0     		testb	%al, %al
 2150 15bb 742B     		je	.L127
 2151              		.loc 1 548 0 is_stmt 0 discriminator 1
 2152 15bd 488B0500 		movq	ptr(%rip), %rax
 2152      000000
 2153 15c4 0FB600   		movzbl	(%rax), %eax
 2154 15c7 3C3B     		cmpb	$59, %al
 2155 15c9 741D     		je	.L127
 2156              		.loc 1 548 0 discriminator 2
 2157 15cb 488B0500 		movq	ptr(%rip), %rax
 2157      000000
 2158 15d2 0FB600   		movzbl	(%rax), %eax
 2159 15d5 3C20     		cmpb	$32, %al
 2160 15d7 740F     		je	.L127
 2161              		.loc 1 548 0 discriminator 3
 2162 15d9 C78514FF 		movl	$5, -236(%rbp)
 2162      FFFF0500 
 2162      0000
 2163 15e3 E9E30D00 		jmp	.L117
 2163      00
 2164              	.L127:
 549:main.c        **** 
 550:main.c        **** 			if ( *ptr == ' ' ) {
 2165              		.loc 1 550 0 is_stmt 1
 2166 15e8 488B0500 		movq	ptr(%rip), %rax
 2166      000000
 2167 15ef 0FB600   		movzbl	(%rax), %eax
 2168 15f2 3C20     		cmpb	$32, %al
 2169 15f4 0F851D02 		jne	.L128
 2169      0000
 551:main.c        **** 				ptr++;
 2170              		.loc 1 551 0
 2171 15fa 488B0500 		movq	ptr(%rip), %rax
 2171      000000
 2172 1601 4883C001 		addq	$1, %rax
 2173 1605 48890500 		movq	%rax, ptr(%rip)
 2173      000000
 552:main.c        **** 
 553:main.c        **** 				// Get the read count:
 554:main.c        **** 				errno = 0;
 2174              		.loc 1 554 0
 2175 160c E8000000 		call	__errno_location
 2175      00
 2176 1611 C7000000 		movl	$0, (%rax)
 2176      0000
 555:main.c        **** 				length = (uint32)strtoul(ptr, &end, 16);
 2177              		.loc 1 555 0
 2178 1617 488B0500 		movq	ptr(%rip), %rax
 2178      000000
 2179 161e 488D8D40 		leaq	-192(%rbp), %rcx
 2179      FFFFFF
 2180 1625 BA100000 		movl	$16, %edx
 2180      00
 2181 162a 4889CE   		movq	%rcx, %rsi
 2182 162d 4889C7   		movq	%rax, %rdi
 2183 1630 E8000000 		call	strtoul
 2183      00
 2184 1635 898518FF 		movl	%eax, -232(%rbp)
 2184      FFFF
 556:main.c        **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 2185              		.loc 1 556 0
 2186 163b E8000000 		call	__errno_location
 2186      00
 2187 1640 8B00     		movl	(%rax), %eax
 2188 1642 85C0     		testl	%eax, %eax
 2189 1644 740F     		je	.L129
 2190              		.loc 1 556 0 is_stmt 0 discriminator 1
 2191 1646 C78514FF 		movl	$2, -236(%rbp)
 2191      FFFF0200 
 2191      0000
 2192 1650 E9760D00 		jmp	.L117
 2192      00
 2193              	.L129:
 557:main.c        **** 				ptr = end;
 2194              		.loc 1 557 0 is_stmt 1
 2195 1655 488B8540 		movq	-192(%rbp), %rax
 2195      FFFFFF
 2196 165c 48890500 		movq	%rax, ptr(%rip)
 2196      000000
 558:main.c        **** 				
 559:main.c        **** 				// Only three valid chars at this point:
 560:main.c        **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 2197              		.loc 1 560 0
 2198 1663 488B0500 		movq	ptr(%rip), %rax
 2198      000000
 2199 166a 0FB600   		movzbl	(%rax), %eax
 2200 166d 84C0     		testb	%al, %al
 2201 166f 742B     		je	.L130
 2202              		.loc 1 560 0 is_stmt 0 discriminator 1
 2203 1671 488B0500 		movq	ptr(%rip), %rax
 2203      000000
 2204 1678 0FB600   		movzbl	(%rax), %eax
 2205 167b 3C3B     		cmpb	$59, %al
 2206 167d 741D     		je	.L130
 2207              		.loc 1 560 0 discriminator 2
 2208 167f 488B0500 		movq	ptr(%rip), %rax
 2208      000000
 2209 1686 0FB600   		movzbl	(%rax), %eax
 2210 1689 3C20     		cmpb	$32, %al
 2211 168b 740F     		je	.L130
 2212              		.loc 1 560 0 discriminator 3
 2213 168d C78514FF 		movl	$5, -236(%rbp)
 2213      FFFF0500 
 2213      0000
 2214 1697 E92F0D00 		jmp	.L117
 2214      00
 2215              	.L130:
 561:main.c        **** 				if ( *ptr == ' ' ) {
 2216              		.loc 1 561 0 is_stmt 1
 2217 169c 488B0500 		movq	ptr(%rip), %rax
 2217      000000
 2218 16a3 0FB600   		movzbl	(%rax), %eax
 2219 16a6 3C20     		cmpb	$32, %al
 2220 16a8 0F856901 		jne	.L128
 2220      0000
 2221              	.LBB21:
 562:main.c        **** 					const char *p;
 563:main.c        **** 					const char quoteChar = *++ptr;
 2222              		.loc 1 563 0
 2223 16ae 488B0500 		movq	ptr(%rip), %rax
 2223      000000
 2224 16b5 4883C001 		addq	$1, %rax
 2225 16b9 48890500 		movq	%rax, ptr(%rip)
 2225      000000
 2226 16c0 488B0500 		movq	ptr(%rip), %rax
 2226      000000
 2227 16c7 0FB600   		movzbl	(%rax), %eax
 2228 16ca 888511FF 		movb	%al, -239(%rbp)
 2228      FFFF
 564:main.c        **** 					CHECK_STATUS(
 2229              		.loc 1 564 0
 2230 16d0 80BD11FF 		cmpb	$34, -239(%rbp)
 2230      FFFF22
 2231 16d7 7418     		je	.L131
 2232              		.loc 1 564 0 is_stmt 0 discriminator 1
 2233 16d9 80BD11FF 		cmpb	$39, -239(%rbp)
 2233      FFFF27
 2234 16e0 740F     		je	.L131
 2235              		.loc 1 564 0 discriminator 2
 2236 16e2 C78514FF 		movl	$5, -236(%rbp)
 2236      FFFF0500 
 2236      0000
 2237 16ec E9DA0C00 		jmp	.L117
 2237      00
 2238              	.L131:
 565:main.c        **** 						(quoteChar != '"' && quoteChar != '\''),
 566:main.c        **** 						FLP_ILL_CHAR, cleanup);
 567:main.c        **** 					
 568:main.c        **** 					// Get the file to write bytes to:
 569:main.c        **** 					ptr++;
 2239              		.loc 1 569 0 is_stmt 1
 2240 16f1 488B0500 		movq	ptr(%rip), %rax
 2240      000000
 2241 16f8 4883C001 		addq	$1, %rax
 2242 16fc 48890500 		movq	%rax, ptr(%rip)
 2242      000000
 570:main.c        **** 					p = ptr;
 2243              		.loc 1 570 0
 2244 1703 488B0500 		movq	ptr(%rip), %rax
 2244      000000
 2245 170a 48898560 		movq	%rax, -160(%rbp)
 2245      FFFFFF
 571:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 2246              		.loc 1 571 0
 2247 1711 EB08     		jmp	.L132
 2248              	.L134:
 572:main.c        **** 						p++;
 2249              		.loc 1 572 0
 2250 1713 48838560 		addq	$1, -160(%rbp)
 2250      FFFFFF01 
 2251              	.L132:
 571:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 2252              		.loc 1 571 0
 2253 171b 488B8560 		movq	-160(%rbp), %rax
 2253      FFFFFF
 2254 1722 0FB600   		movzbl	(%rax), %eax
 2255 1725 3A8511FF 		cmpb	-239(%rbp), %al
 2255      FFFF
 2256 172b 740E     		je	.L133
 571:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 2257              		.loc 1 571 0 is_stmt 0 discriminator 1
 2258 172d 488B8560 		movq	-160(%rbp), %rax
 2258      FFFFFF
 2259 1734 0FB600   		movzbl	(%rax), %eax
 2260 1737 84C0     		testb	%al, %al
 2261 1739 75D8     		jne	.L134
 2262              	.L133:
 573:main.c        **** 					}
 574:main.c        **** 					CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 2263              		.loc 1 574 0 is_stmt 1
 2264 173b 488B8560 		movq	-160(%rbp), %rax
 2264      FFFFFF
 2265 1742 0FB600   		movzbl	(%rax), %eax
 2266 1745 84C0     		testb	%al, %al
 2267 1747 750F     		jne	.L135
 2268              		.loc 1 574 0 is_stmt 0 discriminator 1
 2269 1749 C78514FF 		movl	$6, -236(%rbp)
 2269      FFFF0600 
 2269      0000
 2270 1753 E9730C00 		jmp	.L117
 2270      00
 2271              	.L135:
 575:main.c        **** 					fileName = malloc((size_t)(p - ptr + 1));
 2272              		.loc 1 575 0 is_stmt 1
 2273 1758 488B8560 		movq	-160(%rbp), %rax
 2273      FFFFFF
 2274 175f 488B1500 		movq	ptr(%rip), %rdx
 2274      000000
 2275 1766 4829D0   		subq	%rdx, %rax
 2276 1769 4883C001 		addq	$1, %rax
 2277 176d 4889C7   		movq	%rax, %rdi
 2278 1770 E8000000 		call	malloc
 2278      00
 2279 1775 48898550 		movq	%rax, -176(%rbp)
 2279      FFFFFF
 576:main.c        **** 					CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 2280              		.loc 1 576 0
 2281 177c 4883BD50 		cmpq	$0, -176(%rbp)
 2281      FFFFFF00 
 2282 1784 750F     		jne	.L136
 2283              		.loc 1 576 0 is_stmt 0 discriminator 1
 2284 1786 C78514FF 		movl	$7, -236(%rbp)
 2284      FFFF0700 
 2284      0000
 2285 1790 E9360C00 		jmp	.L117
 2285      00
 2286              	.L136:
 577:main.c        **** 					CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 2287              		.loc 1 577 0 is_stmt 1
 2288 1795 488B8560 		movq	-160(%rbp), %rax
 2288      FFFFFF
 2289 179c 488B1500 		movq	ptr(%rip), %rdx
 2289      000000
 2290 17a3 4839D0   		cmpq	%rdx, %rax
 2291 17a6 750F     		jne	.L137
 2292              		.loc 1 577 0 is_stmt 0 discriminator 1
 2293 17a8 C78514FF 		movl	$8, -236(%rbp)
 2293      FFFF0800 
 2293      0000
 2294 17b2 E9140C00 		jmp	.L117
 2294      00
 2295              	.L137:
 578:main.c        **** 					strncpy(fileName, ptr, (size_t)(p - ptr));
 2296              		.loc 1 578 0 is_stmt 1
 2297 17b7 488B8560 		movq	-160(%rbp), %rax
 2297      FFFFFF
 2298 17be 488B1500 		movq	ptr(%rip), %rdx
 2298      000000
 2299 17c5 4829D0   		subq	%rdx, %rax
 2300 17c8 4889C2   		movq	%rax, %rdx
 2301 17cb 488B0D00 		movq	ptr(%rip), %rcx
 2301      000000
 2302 17d2 488B8550 		movq	-176(%rbp), %rax
 2302      FFFFFF
 2303 17d9 4889CE   		movq	%rcx, %rsi
 2304 17dc 4889C7   		movq	%rax, %rdi
 2305 17df E8000000 		call	strncpy
 2305      00
 579:main.c        **** 					fileName[p - ptr] = '\0';
 2306              		.loc 1 579 0
 2307 17e4 488B8560 		movq	-160(%rbp), %rax
 2307      FFFFFF
 2308 17eb 488B1500 		movq	ptr(%rip), %rdx
 2308      000000
 2309 17f2 4829D0   		subq	%rdx, %rax
 2310 17f5 4889C2   		movq	%rax, %rdx
 2311 17f8 488B8550 		movq	-176(%rbp), %rax
 2311      FFFFFF
 2312 17ff 4801D0   		addq	%rdx, %rax
 2313 1802 C60000   		movb	$0, (%rax)
 580:main.c        **** 					ptr = p + 1;
 2314              		.loc 1 580 0
 2315 1805 488B8560 		movq	-160(%rbp), %rax
 2315      FFFFFF
 2316 180c 4883C001 		addq	$1, %rax
 2317 1810 48890500 		movq	%rax, ptr(%rip)
 2317      000000
 2318              	.L128:
 2319              	.LBE21:
 581:main.c        **** 				}
 582:main.c        **** 			}
 583:main.c        **** 			if ( fileName ) {
 2320              		.loc 1 583 0
 2321 1817 4883BD50 		cmpq	$0, -176(%rbp)
 2321      FFFFFF00 
 2322 181f 0F84EA01 		je	.L138
 2322      0000
 2323              	.LBB22:
 584:main.c        **** 				uint16 checksum = 0x0000;
 2324              		.loc 1 584 0
 2325 1825 66C78538 		movw	$0, -200(%rbp)
 2325      FFFFFF00 
 2325      00
 585:main.c        **** 
 586:main.c        **** 				// Open file for writing
 587:main.c        **** 				file = fopen(fileName, "wb");
 2326              		.loc 1 587 0
 2327 182e 488B8550 		movq	-176(%rbp), %rax
 2327      FFFFFF
 2328 1835 BE000000 		movl	$.LC18, %esi
 2328      00
 2329 183a 4889C7   		movq	%rax, %rdi
 2330 183d E8000000 		call	fopen
 2330      00
 2331 1842 48898558 		movq	%rax, -168(%rbp)
 2331      FFFFFF
 588:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 2332              		.loc 1 588 0
 2333 1849 4883BD58 		cmpq	$0, -168(%rbp)
 2333      FFFFFF00 
 2334 1851 750F     		jne	.L139
 2335              		.loc 1 588 0 is_stmt 0 discriminator 1
 2336 1853 C78514FF 		movl	$11, -236(%rbp)
 2336      FFFF0B00 
 2336      0000
 2337 185d E9690B00 		jmp	.L117
 2337      00
 2338              	.L139:
 589:main.c        **** 				free(fileName);
 2339              		.loc 1 589 0 is_stmt 1
 2340 1862 488B8550 		movq	-176(%rbp), %rax
 2340      FFFFFF
 2341 1869 4889C7   		movq	%rax, %rdi
 2342 186c E8000000 		call	free
 2342      00
 590:main.c        **** 				fileName = NULL;
 2343              		.loc 1 590 0
 2344 1871 48C78550 		movq	$0, -176(%rbp)
 2344      FFFFFF00 
 2344      000000
 591:main.c        **** 
 592:main.c        **** 				#ifdef WIN32
 593:main.c        **** 					QueryPerformanceCounter(&tvStart);
 594:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 595:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 596:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 597:main.c        **** 					totalTime /= freq.QuadPart;
 598:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 599:main.c        **** 				#else
 600:main.c        **** 					gettimeofday(&tvStart, NULL);
 2345              		.loc 1 600 0
 2346 187c 488D45B0 		leaq	-80(%rbp), %rax
 2347 1880 BE000000 		movl	$0, %esi
 2347      00
 2348 1885 4889C7   		movq	%rax, %rdi
 2349 1888 E8000000 		call	gettimeofday
 2349      00
 601:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 2350              		.loc 1 601 0
 2351 188d 8B8530FF 		movl	-208(%rbp), %eax
 2351      FFFF
 2352 1893 0FB6F0   		movzbl	%al, %esi
 2353 1896 4C8B85F8 		movq	-264(%rbp), %r8
 2353      FEFFFF
 2354 189d 488DBD38 		leaq	-200(%rbp), %rdi
 2354      FFFFFF
 2355 18a4 488B8D58 		movq	-168(%rbp), %rcx
 2355      FFFFFF
 2356 18ab 8B9518FF 		movl	-232(%rbp), %edx
 2356      FFFF
 2357 18b1 488B8508 		movq	-248(%rbp), %rax
 2357      FFFFFF
 2358 18b8 4D89C1   		movq	%r8, %r9
 2359 18bb 4989F8   		movq	%rdi, %r8
 2360 18be 4889C7   		movq	%rax, %rdi
 2361 18c1 E8B1F6FF 		call	doRead
 2361      FF
 2362 18c6 898528FF 		movl	%eax, -216(%rbp)
 2362      FFFF
 602:main.c        **** 					gettimeofday(&tvEnd, NULL);
 2363              		.loc 1 602 0
 2364 18cc 488D45C0 		leaq	-64(%rbp), %rax
 2365 18d0 BE000000 		movl	$0, %esi
 2365      00
 2366 18d5 4889C7   		movq	%rax, %rdi
 2367 18d8 E8000000 		call	gettimeofday
 2367      00
 603:main.c        **** 					startTime = tvStart.tv_sec;
 2368              		.loc 1 603 0
 2369 18dd 488B45B0 		movq	-80(%rbp), %rax
 2370 18e1 48894588 		movq	%rax, -120(%rbp)
 604:main.c        **** 					startTime *= 1000000;
 2371              		.loc 1 604 0
 2372 18e5 488B4588 		movq	-120(%rbp), %rax
 2373 18e9 4869C040 		imulq	$1000000, %rax, %rax
 2373      420F00
 2374 18f0 48894588 		movq	%rax, -120(%rbp)
 605:main.c        **** 					startTime += tvStart.tv_usec;
 2375              		.loc 1 605 0
 2376 18f4 488B45B8 		movq	-72(%rbp), %rax
 2377 18f8 48014588 		addq	%rax, -120(%rbp)
 606:main.c        **** 					endTime = tvEnd.tv_sec;
 2378              		.loc 1 606 0
 2379 18fc 488B45C0 		movq	-64(%rbp), %rax
 2380 1900 48894590 		movq	%rax, -112(%rbp)
 607:main.c        **** 					endTime *= 1000000;
 2381              		.loc 1 607 0
 2382 1904 488B4590 		movq	-112(%rbp), %rax
 2383 1908 4869C040 		imulq	$1000000, %rax, %rax
 2383      420F00
 2384 190f 48894590 		movq	%rax, -112(%rbp)
 608:main.c        **** 					endTime += tvEnd.tv_usec;
 2385              		.loc 1 608 0
 2386 1913 488B45C8 		movq	-56(%rbp), %rax
 2387 1917 48014590 		addq	%rax, -112(%rbp)
 609:main.c        **** 					totalTime = (double)(endTime - startTime);
 2388              		.loc 1 609 0
 2389 191b 488B4590 		movq	-112(%rbp), %rax
 2390 191f 482B4588 		subq	-120(%rbp), %rax
 2391 1923 660FEFC0 		pxor	%xmm0, %xmm0
 2392 1927 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2392      C0
 2393 192c F20F1145 		movsd	%xmm0, -104(%rbp)
 2393      98
 610:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 2394              		.loc 1 610 0
 2395 1931 F20F1045 		movsd	-104(%rbp), %xmm0
 2395      98
 2396 1936 F20F100D 		movsd	.LC19(%rip), %xmm1
 2396      00000000 
 2397 193e F20F5EC1 		divsd	%xmm1, %xmm0
 2398 1942 F20F1145 		movsd	%xmm0, -104(%rbp)
 2398      98
 611:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 2399              		.loc 1 611 0
 2400 1947 8B8518FF 		movl	-232(%rbp), %eax
 2400      FFFF
 2401 194d 4885C0   		testq	%rax, %rax
 2402 1950 780B     		js	.L141
 2403 1952 660FEFC0 		pxor	%xmm0, %xmm0
 2404 1956 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2404      C0
 2405 195b EB19     		jmp	.L142
 2406              	.L141:
 2407 195d 4889C2   		movq	%rax, %rdx
 2408 1960 48D1EA   		shrq	%rdx
 2409 1963 83E001   		andl	$1, %eax
 2410 1966 4809C2   		orq	%rax, %rdx
 2411 1969 660FEFC0 		pxor	%xmm0, %xmm0
 2412 196d F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 2412      C2
 2413 1972 F20F58C0 		addsd	%xmm0, %xmm0
 2414              	.L142:
 2415 1976 F20F1055 		movsd	-104(%rbp), %xmm2
 2415      98
 2416 197b F20F100D 		movsd	.LC20(%rip), %xmm1
 2416      00000000 
 2417 1983 F20F59CA 		mulsd	%xmm2, %xmm1
 2418 1987 F20F5EC1 		divsd	%xmm1, %xmm0
 2419 198b F20F1145 		movsd	%xmm0, -96(%rbp)
 2419      A0
 612:main.c        **** 				#endif
 613:main.c        **** 				if ( enableBenchmarking ) {
 2420              		.loc 1 613 0
 2421 1990 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 2421      000000
 2422 1997 84C0     		testb	%al, %al
 2423 1999 743A     		je	.L143
 614:main.c        **** 					printf(
 2424              		.loc 1 614 0
 2425 199b 0FB78538 		movzwl	-200(%rbp), %eax
 2425      FFFFFF
 2426 19a2 0FB7D0   		movzwl	%ax, %edx
 2427 19a5 488B75A0 		movq	-96(%rbp), %rsi
 2428 19a9 8B8D30FF 		movl	-208(%rbp), %ecx
 2428      FFFF
 2429 19af 8B8518FF 		movl	-232(%rbp), %eax
 2429      FFFF
 2430 19b5 4889B5F0 		movq	%rsi, -272(%rbp)
 2430      FEFFFF
 2431 19bc F20F1085 		movsd	-272(%rbp), %xmm0
 2431      F0FEFFFF 
 2432 19c4 89C6     		movl	%eax, %esi
 2433 19c6 BF000000 		movl	$.LC21, %edi
 2433      00
 2434 19cb B8010000 		movl	$1, %eax
 2434      00
 2435 19d0 E8000000 		call	printf
 2435      00
 2436              	.L143:
 615:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 616:main.c        **** 						length, checksum, chan, speed);
 617:main.c        **** 				}
 618:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 2437              		.loc 1 618 0
 2438 19d5 83BD28FF 		cmpl	$0, -216(%rbp)
 2438      FFFF00
 2439 19dc 7412     		je	.L144
 2440              		.loc 1 618 0 is_stmt 0 discriminator 1
 2441 19de 8B8528FF 		movl	-216(%rbp), %eax
 2441      FFFF
 2442 19e4 898514FF 		movl	%eax, -236(%rbp)
 2442      FFFF
 2443 19ea 90       		nop
 2444              	.LBE22:
 541:main.c        **** 
 2445              		.loc 1 541 0 is_stmt 1 discriminator 1
 2446 19eb E9DB0900 		jmp	.L117
 2446      00
 2447              	.L144:
 2448              	.LBB23:
 619:main.c        **** 
 620:main.c        **** 				// Close the file
 621:main.c        **** 				fclose(file);
 2449              		.loc 1 621 0
 2450 19f0 488B8558 		movq	-168(%rbp), %rax
 2450      FFFFFF
 2451 19f7 4889C7   		movq	%rax, %rdi
 2452 19fa E8000000 		call	fclose
 2452      00
 622:main.c        **** 				file = NULL;
 2453              		.loc 1 622 0
 2454 19ff 48C78558 		movq	$0, -168(%rbp)
 2454      FFFFFF00 
 2454      000000
 2455              	.LBE23:
 623:main.c        **** 			} else {
 624:main.c        **** 				size_t oldLength = dataFromFPGA.length;
 625:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 626:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 627:main.c        **** 				#ifdef WIN32
 628:main.c        **** 					QueryPerformanceCounter(&tvStart);
 629:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 630:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 631:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 632:main.c        **** 					totalTime /= freq.QuadPart;
 633:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 634:main.c        **** 				#else
 635:main.c        **** 					gettimeofday(&tvStart, NULL);
 636:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 637:main.c        **** 					gettimeofday(&tvEnd, NULL);
 638:main.c        **** 					startTime = tvStart.tv_sec;
 639:main.c        **** 					startTime *= 1000000;
 640:main.c        **** 					startTime += tvStart.tv_usec;
 641:main.c        **** 					endTime = tvEnd.tv_sec;
 642:main.c        **** 					endTime *= 1000000;
 643:main.c        **** 					endTime += tvEnd.tv_usec;
 644:main.c        **** 					totalTime = (double)(endTime - startTime);
 645:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 646:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 647:main.c        **** 					fun(dataFromFPGA.data + oldLength,length);
 648:main.c        **** 				#endif
 649:main.c        **** 				if ( enableBenchmarking ) {
 650:main.c        **** 					printf(
 651:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 652:main.c        **** 						length, calcChecksum(dataFromFPGA.data + oldLength, length), chan, speed);
 653:main.c        **** 				}
 654:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 655:main.c        **** 			}
 656:main.c        **** 			break;
 2456              		.loc 1 656 0
 2457 1a0a E9770900 		jmp	.L194
 2457      00
 2458              	.L138:
 2459              	.LBB24:
 624:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 2460              		.loc 1 624 0
 2461 1a0f 488B45D8 		movq	-40(%rbp), %rax
 2462 1a13 488945A8 		movq	%rax, -88(%rbp)
 625:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 2463              		.loc 1 625 0
 2464 1a17 8B9518FF 		movl	-232(%rbp), %edx
 2464      FFFF
 2465 1a1d 488B8DF8 		movq	-264(%rbp), %rcx
 2465      FEFFFF
 2466 1a24 488D45D0 		leaq	-48(%rbp), %rax
 2467 1a28 BE000000 		movl	$0, %esi
 2467      00
 2468 1a2d 4889C7   		movq	%rax, %rdi
 2469 1a30 E8000000 		call	bufAppendConst
 2469      00
 2470 1a35 898520FF 		movl	%eax, -224(%rbp)
 2470      FFFF
 626:main.c        **** 				#ifdef WIN32
 2471              		.loc 1 626 0
 2472 1a3b 83BD20FF 		cmpl	$0, -224(%rbp)
 2472      FFFF00
 2473 1a42 740F     		je	.L146
 626:main.c        **** 				#ifdef WIN32
 2474              		.loc 1 626 0 is_stmt 0 discriminator 1
 2475 1a44 C78514FF 		movl	$1, -236(%rbp)
 2475      FFFF0100 
 2475      0000
 2476 1a4e E9780900 		jmp	.L117
 2476      00
 2477              	.L146:
 635:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 2478              		.loc 1 635 0 is_stmt 1
 2479 1a53 488D45B0 		leaq	-80(%rbp), %rax
 2480 1a57 BE000000 		movl	$0, %esi
 2480      00
 2481 1a5c 4889C7   		movq	%rax, %rdi
 2482 1a5f E8000000 		call	gettimeofday
 2482      00
 636:main.c        **** 					gettimeofday(&tvEnd, NULL);
 2483              		.loc 1 636 0
 2484 1a64 488B55D0 		movq	-48(%rbp), %rdx
 2485 1a68 488B45A8 		movq	-88(%rbp), %rax
 2486 1a6c 488D0C02 		leaq	(%rdx,%rax), %rcx
 2487 1a70 8B9518FF 		movl	-232(%rbp), %edx
 2487      FFFF
 2488 1a76 8B8530FF 		movl	-208(%rbp), %eax
 2488      FFFF
 2489 1a7c 0FB6F0   		movzbl	%al, %esi
 2490 1a7f 488BBDF8 		movq	-264(%rbp), %rdi
 2490      FEFFFF
 2491 1a86 488B8508 		movq	-248(%rbp), %rax
 2491      FFFFFF
 2492 1a8d 4989F8   		movq	%rdi, %r8
 2493 1a90 4889C7   		movq	%rax, %rdi
 2494 1a93 E8000000 		call	flReadChannel
 2494      00
 2495 1a98 898524FF 		movl	%eax, -220(%rbp)
 2495      FFFF
 637:main.c        **** 					startTime = tvStart.tv_sec;
 2496              		.loc 1 637 0
 2497 1a9e 488D45C0 		leaq	-64(%rbp), %rax
 2498 1aa2 BE000000 		movl	$0, %esi
 2498      00
 2499 1aa7 4889C7   		movq	%rax, %rdi
 2500 1aaa E8000000 		call	gettimeofday
 2500      00
 638:main.c        **** 					startTime *= 1000000;
 2501              		.loc 1 638 0
 2502 1aaf 488B45B0 		movq	-80(%rbp), %rax
 2503 1ab3 48894588 		movq	%rax, -120(%rbp)
 639:main.c        **** 					startTime += tvStart.tv_usec;
 2504              		.loc 1 639 0
 2505 1ab7 488B4588 		movq	-120(%rbp), %rax
 2506 1abb 4869C040 		imulq	$1000000, %rax, %rax
 2506      420F00
 2507 1ac2 48894588 		movq	%rax, -120(%rbp)
 640:main.c        **** 					endTime = tvEnd.tv_sec;
 2508              		.loc 1 640 0
 2509 1ac6 488B45B8 		movq	-72(%rbp), %rax
 2510 1aca 48014588 		addq	%rax, -120(%rbp)
 641:main.c        **** 					endTime *= 1000000;
 2511              		.loc 1 641 0
 2512 1ace 488B45C0 		movq	-64(%rbp), %rax
 2513 1ad2 48894590 		movq	%rax, -112(%rbp)
 642:main.c        **** 					endTime += tvEnd.tv_usec;
 2514              		.loc 1 642 0
 2515 1ad6 488B4590 		movq	-112(%rbp), %rax
 2516 1ada 4869C040 		imulq	$1000000, %rax, %rax
 2516      420F00
 2517 1ae1 48894590 		movq	%rax, -112(%rbp)
 643:main.c        **** 					totalTime = (double)(endTime - startTime);
 2518              		.loc 1 643 0
 2519 1ae5 488B45C8 		movq	-56(%rbp), %rax
 2520 1ae9 48014590 		addq	%rax, -112(%rbp)
 644:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 2521              		.loc 1 644 0
 2522 1aed 488B4590 		movq	-112(%rbp), %rax
 2523 1af1 482B4588 		subq	-120(%rbp), %rax
 2524 1af5 660FEFC0 		pxor	%xmm0, %xmm0
 2525 1af9 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2525      C0
 2526 1afe F20F1145 		movsd	%xmm0, -104(%rbp)
 2526      98
 645:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 2527              		.loc 1 645 0
 2528 1b03 F20F1045 		movsd	-104(%rbp), %xmm0
 2528      98
 2529 1b08 F20F100D 		movsd	.LC19(%rip), %xmm1
 2529      00000000 
 2530 1b10 F20F5EC1 		divsd	%xmm1, %xmm0
 2531 1b14 F20F1145 		movsd	%xmm0, -104(%rbp)
 2531      98
 646:main.c        **** 					fun(dataFromFPGA.data + oldLength,length);
 2532              		.loc 1 646 0
 2533 1b19 8B8518FF 		movl	-232(%rbp), %eax
 2533      FFFF
 2534 1b1f 4885C0   		testq	%rax, %rax
 2535 1b22 780B     		js	.L147
 2536 1b24 660FEFC0 		pxor	%xmm0, %xmm0
 2537 1b28 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2537      C0
 2538 1b2d EB19     		jmp	.L148
 2539              	.L147:
 2540 1b2f 4889C2   		movq	%rax, %rdx
 2541 1b32 48D1EA   		shrq	%rdx
 2542 1b35 83E001   		andl	$1, %eax
 2543 1b38 4809C2   		orq	%rax, %rdx
 2544 1b3b 660FEFC0 		pxor	%xmm0, %xmm0
 2545 1b3f F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 2545      C2
 2546 1b44 F20F58C0 		addsd	%xmm0, %xmm0
 2547              	.L148:
 2548 1b48 F20F1055 		movsd	-104(%rbp), %xmm2
 2548      98
 2549 1b4d F20F100D 		movsd	.LC20(%rip), %xmm1
 2549      00000000 
 2550 1b55 F20F59CA 		mulsd	%xmm2, %xmm1
 2551 1b59 F20F5EC1 		divsd	%xmm1, %xmm0
 2552 1b5d F20F1145 		movsd	%xmm0, -96(%rbp)
 2552      A0
 647:main.c        **** 				#endif
 2553              		.loc 1 647 0
 2554 1b62 8B8518FF 		movl	-232(%rbp), %eax
 2554      FFFF
 2555 1b68 488B4DD0 		movq	-48(%rbp), %rcx
 2556 1b6c 488B55A8 		movq	-88(%rbp), %rdx
 2557 1b70 4801CA   		addq	%rcx, %rdx
 2558 1b73 4889C6   		movq	%rax, %rsi
 2559 1b76 4889D7   		movq	%rdx, %rdi
 2560 1b79 E857F2FF 		call	fun
 2560      FF
 649:main.c        **** 					printf(
 2561              		.loc 1 649 0
 2562 1b7e 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 2562      000000
 2563 1b85 84C0     		testb	%al, %al
 2564 1b87 744F     		je	.L149
 652:main.c        **** 				}
 2565              		.loc 1 652 0
 2566 1b89 8B8518FF 		movl	-232(%rbp), %eax
 2566      FFFF
 2567 1b8f 488B4DD0 		movq	-48(%rbp), %rcx
 2568 1b93 488B55A8 		movq	-88(%rbp), %rdx
 2569 1b97 4801CA   		addq	%rcx, %rdx
 2570 1b9a 4889C6   		movq	%rax, %rsi
 2571 1b9d 4889D7   		movq	%rdx, %rdi
 2572 1ba0 E879F2FF 		call	calcChecksum
 2572      FF
 650:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 2573              		.loc 1 650 0
 2574 1ba5 0FB7D0   		movzwl	%ax, %edx
 2575 1ba8 488B75A0 		movq	-96(%rbp), %rsi
 2576 1bac 8B8D30FF 		movl	-208(%rbp), %ecx
 2576      FFFF
 2577 1bb2 8B8518FF 		movl	-232(%rbp), %eax
 2577      FFFF
 2578 1bb8 4889B5F0 		movq	%rsi, -272(%rbp)
 2578      FEFFFF
 2579 1bbf F20F1085 		movsd	-272(%rbp), %xmm0
 2579      F0FEFFFF 
 2580 1bc7 89C6     		movl	%eax, %esi
 2581 1bc9 BF000000 		movl	$.LC21, %edi
 2581      00
 2582 1bce B8010000 		movl	$1, %eax
 2582      00
 2583 1bd3 E8000000 		call	printf
 2583      00
 2584              	.L149:
 654:main.c        **** 			}
 2585              		.loc 1 654 0
 2586 1bd8 83BD24FF 		cmpl	$0, -220(%rbp)
 2586      FFFF00
 2587 1bdf 0F84A107 		je	.L194
 2587      0000
 654:main.c        **** 			}
 2588              		.loc 1 654 0 is_stmt 0 discriminator 1
 2589 1be5 C78514FF 		movl	$1, -236(%rbp)
 2589      FFFF0100 
 2589      0000
 2590 1bef 90       		nop
 2591 1bf0 E9D60700 		jmp	.L117
 2591      00
 2592              	.L122:
 2593              	.LBE24:
 2594              	.LBE20:
 2595              	.LBB25:
 657:main.c        **** 		}
 658:main.c        **** 		case 'w':{
 659:main.c        **** 			unsigned long int chan;
 660:main.c        **** 			size_t length = 1, i;
 2596              		.loc 1 660 0 is_stmt 1
 2597 1bf5 48C78538 		movq	$1, -200(%rbp)
 2597      FFFFFF01 
 2597      000000
 661:main.c        **** 			char *end, ch;
 662:main.c        **** 			const char *p;
 663:main.c        **** 			ptr++;
 2598              		.loc 1 663 0
 2599 1c00 488B0500 		movq	ptr(%rip), %rax
 2599      000000
 2600 1c07 4883C001 		addq	$1, %rax
 2601 1c0b 48890500 		movq	%rax, ptr(%rip)
 2601      000000
 664:main.c        **** 			
 665:main.c        **** 			// Get the channel to be written:
 666:main.c        **** 			errno = 0;
 2602              		.loc 1 666 0
 2603 1c12 E8000000 		call	__errno_location
 2603      00
 2604 1c17 C7000000 		movl	$0, (%rax)
 2604      0000
 667:main.c        **** 			chan = strtoul(ptr, &end, 16);
 2605              		.loc 1 667 0
 2606 1c1d 488B0500 		movq	ptr(%rip), %rax
 2606      000000
 2607 1c24 488D8D40 		leaq	-192(%rbp), %rcx
 2607      FFFFFF
 2608 1c2b BA100000 		movl	$16, %edx
 2608      00
 2609 1c30 4889CE   		movq	%rcx, %rsi
 2610 1c33 4889C7   		movq	%rax, %rdi
 2611 1c36 E8000000 		call	strtoul
 2611      00
 2612 1c3b 48894580 		movq	%rax, -128(%rbp)
 668:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 2613              		.loc 1 668 0
 2614 1c3f E8000000 		call	__errno_location
 2614      00
 2615 1c44 8B00     		movl	(%rax), %eax
 2616 1c46 85C0     		testl	%eax, %eax
 2617 1c48 740F     		je	.L151
 2618              		.loc 1 668 0 is_stmt 0 discriminator 1
 2619 1c4a C78514FF 		movl	$2, -236(%rbp)
 2619      FFFF0200 
 2619      0000
 2620 1c54 E9720700 		jmp	.L117
 2620      00
 2621              	.L151:
 669:main.c        **** 
 670:main.c        **** 			// Ensure that it's 0-127
 671:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 2622              		.loc 1 671 0 is_stmt 1
 2623 1c59 48837D80 		cmpq	$127, -128(%rbp)
 2623      7F
 2624 1c5e 760F     		jbe	.L153
 2625              		.loc 1 671 0 is_stmt 0 discriminator 1
 2626 1c60 C78514FF 		movl	$3, -236(%rbp)
 2626      FFFF0300 
 2626      0000
 2627 1c6a E95C0700 		jmp	.L117
 2627      00
 2628              	.L153:
 672:main.c        **** 			ptr = end;
 2629              		.loc 1 672 0 is_stmt 1
 2630 1c6f 488B8540 		movq	-192(%rbp), %rax
 2630      FFFFFF
 2631 1c76 48890500 		movq	%rax, ptr(%rip)
 2631      000000
 673:main.c        **** 
 674:main.c        **** 			// There must be a space now:
 675:main.c        **** 			CHECK_STATUS(*ptr != ' ', FLP_ILL_CHAR, cleanup);
 2632              		.loc 1 675 0
 2633 1c7d 488B0500 		movq	ptr(%rip), %rax
 2633      000000
 2634 1c84 0FB600   		movzbl	(%rax), %eax
 2635 1c87 3C20     		cmpb	$32, %al
 2636 1c89 740F     		je	.L154
 2637              		.loc 1 675 0 is_stmt 0 discriminator 1
 2638 1c8b C78514FF 		movl	$5, -236(%rbp)
 2638      FFFF0500 
 2638      0000
 2639 1c95 E9310700 		jmp	.L117
 2639      00
 2640              	.L154:
 676:main.c        **** 
 677:main.c        **** 			// Now either a quote or a hex digit
 678:main.c        **** 		   ch = *++ptr;
 2641              		.loc 1 678 0 is_stmt 1
 2642 1c9a 488B0500 		movq	ptr(%rip), %rax
 2642      000000
 2643 1ca1 4883C001 		addq	$1, %rax
 2644 1ca5 48890500 		movq	%rax, ptr(%rip)
 2644      000000
 2645 1cac 488B0500 		movq	ptr(%rip), %rax
 2645      000000
 2646 1cb3 0FB600   		movzbl	(%rax), %eax
 2647 1cb6 888510FF 		movb	%al, -240(%rbp)
 2647      FFFF
 679:main.c        **** 			if ( ch == '"' || ch == '\'' ) {
 2648              		.loc 1 679 0
 2649 1cbc 80BD10FF 		cmpb	$34, -240(%rbp)
 2649      FFFF22
 2650 1cc3 740D     		je	.L155
 2651              		.loc 1 679 0 is_stmt 0 discriminator 1
 2652 1cc5 80BD10FF 		cmpb	$39, -240(%rbp)
 2652      FFFF27
 2653 1ccc 0F851203 		jne	.L156
 2653      0000
 2654              	.L155:
 2655              	.LBB26:
 680:main.c        **** 				uint16 checksum = 0x0000;
 2656              		.loc 1 680 0 is_stmt 1
 2657 1cd2 66C78512 		movw	$0, -238(%rbp)
 2657      FFFFFF00 
 2657      00
 681:main.c        **** 
 682:main.c        **** 				// Get the file to read bytes from:
 683:main.c        **** 				ptr++;
 2658              		.loc 1 683 0
 2659 1cdb 488B0500 		movq	ptr(%rip), %rax
 2659      000000
 2660 1ce2 4883C001 		addq	$1, %rax
 2661 1ce6 48890500 		movq	%rax, ptr(%rip)
 2661      000000
 684:main.c        **** 				p = ptr;
 2662              		.loc 1 684 0
 2663 1ced 488B0500 		movq	ptr(%rip), %rax
 2663      000000
 2664 1cf4 48898570 		movq	%rax, -144(%rbp)
 2664      FFFFFF
 685:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 2665              		.loc 1 685 0
 2666 1cfb EB08     		jmp	.L157
 2667              	.L159:
 686:main.c        **** 					p++;
 2668              		.loc 1 686 0
 2669 1cfd 48838570 		addq	$1, -144(%rbp)
 2669      FFFFFF01 
 2670              	.L157:
 685:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 2671              		.loc 1 685 0
 2672 1d05 488B8570 		movq	-144(%rbp), %rax
 2672      FFFFFF
 2673 1d0c 0FB600   		movzbl	(%rax), %eax
 2674 1d0f 3A8510FF 		cmpb	-240(%rbp), %al
 2674      FFFF
 2675 1d15 740E     		je	.L158
 685:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 2676              		.loc 1 685 0 is_stmt 0 discriminator 1
 2677 1d17 488B8570 		movq	-144(%rbp), %rax
 2677      FFFFFF
 2678 1d1e 0FB600   		movzbl	(%rax), %eax
 2679 1d21 84C0     		testb	%al, %al
 2680 1d23 75D8     		jne	.L159
 2681              	.L158:
 687:main.c        **** 				}
 688:main.c        **** 				CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 2682              		.loc 1 688 0 is_stmt 1
 2683 1d25 488B8570 		movq	-144(%rbp), %rax
 2683      FFFFFF
 2684 1d2c 0FB600   		movzbl	(%rax), %eax
 2685 1d2f 84C0     		testb	%al, %al
 2686 1d31 750F     		jne	.L160
 2687              		.loc 1 688 0 is_stmt 0 discriminator 1
 2688 1d33 C78514FF 		movl	$6, -236(%rbp)
 2688      FFFF0600 
 2688      0000
 2689 1d3d E9890600 		jmp	.L117
 2689      00
 2690              	.L160:
 689:main.c        **** 				fileName = malloc((size_t)(p - ptr + 1));
 2691              		.loc 1 689 0 is_stmt 1
 2692 1d42 488B8570 		movq	-144(%rbp), %rax
 2692      FFFFFF
 2693 1d49 488B1500 		movq	ptr(%rip), %rdx
 2693      000000
 2694 1d50 4829D0   		subq	%rdx, %rax
 2695 1d53 4883C001 		addq	$1, %rax
 2696 1d57 4889C7   		movq	%rax, %rdi
 2697 1d5a E8000000 		call	malloc
 2697      00
 2698 1d5f 48898550 		movq	%rax, -176(%rbp)
 2698      FFFFFF
 690:main.c        **** 				CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 2699              		.loc 1 690 0
 2700 1d66 4883BD50 		cmpq	$0, -176(%rbp)
 2700      FFFFFF00 
 2701 1d6e 750F     		jne	.L162
 2702              		.loc 1 690 0 is_stmt 0 discriminator 1
 2703 1d70 C78514FF 		movl	$7, -236(%rbp)
 2703      FFFF0700 
 2703      0000
 2704 1d7a E9600200 		jmp	.L161
 2704      00
 2705              	.L162:
 691:main.c        **** 				CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 2706              		.loc 1 691 0 is_stmt 1
 2707 1d7f 488B8570 		movq	-144(%rbp), %rax
 2707      FFFFFF
 2708 1d86 488B1500 		movq	ptr(%rip), %rdx
 2708      000000
 2709 1d8d 4839D0   		cmpq	%rdx, %rax
 2710 1d90 750F     		jne	.L163
 2711              		.loc 1 691 0 is_stmt 0 discriminator 1
 2712 1d92 C78514FF 		movl	$8, -236(%rbp)
 2712      FFFF0800 
 2712      0000
 2713 1d9c E93E0200 		jmp	.L161
 2713      00
 2714              	.L163:
 692:main.c        **** 				strncpy(fileName, ptr, (size_t)(p - ptr));
 2715              		.loc 1 692 0 is_stmt 1
 2716 1da1 488B8570 		movq	-144(%rbp), %rax
 2716      FFFFFF
 2717 1da8 488B1500 		movq	ptr(%rip), %rdx
 2717      000000
 2718 1daf 4829D0   		subq	%rdx, %rax
 2719 1db2 4889C2   		movq	%rax, %rdx
 2720 1db5 488B0D00 		movq	ptr(%rip), %rcx
 2720      000000
 2721 1dbc 488B8550 		movq	-176(%rbp), %rax
 2721      FFFFFF
 2722 1dc3 4889CE   		movq	%rcx, %rsi
 2723 1dc6 4889C7   		movq	%rax, %rdi
 2724 1dc9 E8000000 		call	strncpy
 2724      00
 693:main.c        **** 				fileName[p - ptr] = '\0';
 2725              		.loc 1 693 0
 2726 1dce 488B8570 		movq	-144(%rbp), %rax
 2726      FFFFFF
 2727 1dd5 488B1500 		movq	ptr(%rip), %rdx
 2727      000000
 2728 1ddc 4829D0   		subq	%rdx, %rax
 2729 1ddf 4889C2   		movq	%rax, %rdx
 2730 1de2 488B8550 		movq	-176(%rbp), %rax
 2730      FFFFFF
 2731 1de9 4801D0   		addq	%rdx, %rax
 2732 1dec C60000   		movb	$0, (%rax)
 694:main.c        **** 				ptr = p + 1;  // skip over closing quote
 2733              		.loc 1 694 0
 2734 1def 488B8570 		movq	-144(%rbp), %rax
 2734      FFFFFF
 2735 1df6 4883C001 		addq	$1, %rax
 2736 1dfa 48890500 		movq	%rax, ptr(%rip)
 2736      000000
 695:main.c        **** 
 696:main.c        **** 				// Open file for reading
 697:main.c        **** 				file = fopen(fileName, "rb");
 2737              		.loc 1 697 0
 2738 1e01 488B8550 		movq	-176(%rbp), %rax
 2738      FFFFFF
 2739 1e08 BE000000 		movl	$.LC22, %esi
 2739      00
 2740 1e0d 4889C7   		movq	%rax, %rdi
 2741 1e10 E8000000 		call	fopen
 2741      00
 2742 1e15 48898558 		movq	%rax, -168(%rbp)
 2742      FFFFFF
 698:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_LOAD, cleanup);
 2743              		.loc 1 698 0
 2744 1e1c 4883BD58 		cmpq	$0, -168(%rbp)
 2744      FFFFFF00 
 2745 1e24 750F     		jne	.L164
 2746              		.loc 1 698 0 is_stmt 0 discriminator 1
 2747 1e26 C78514FF 		movl	$10, -236(%rbp)
 2747      FFFF0A00 
 2747      0000
 2748 1e30 E9AA0100 		jmp	.L161
 2748      00
 2749              	.L164:
 699:main.c        **** 				free(fileName);
 2750              		.loc 1 699 0 is_stmt 1
 2751 1e35 488B8550 		movq	-176(%rbp), %rax
 2751      FFFFFF
 2752 1e3c 4889C7   		movq	%rax, %rdi
 2753 1e3f E8000000 		call	free
 2753      00
 700:main.c        **** 				fileName = NULL;
 2754              		.loc 1 700 0
 2755 1e44 48C78550 		movq	$0, -176(%rbp)
 2755      FFFFFF00 
 2755      000000
 701:main.c        **** 				
 702:main.c        **** 				#ifdef WIN32
 703:main.c        **** 					QueryPerformanceCounter(&tvStart);
 704:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 705:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 706:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 707:main.c        **** 					totalTime /= freq.QuadPart;
 708:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 709:main.c        **** 				#else
 710:main.c        **** 					gettimeofday(&tvStart, NULL);
 2756              		.loc 1 710 0
 2757 1e4f 488D45B0 		leaq	-80(%rbp), %rax
 2758 1e53 BE000000 		movl	$0, %esi
 2758      00
 2759 1e58 4889C7   		movq	%rax, %rdi
 2760 1e5b E8000000 		call	gettimeofday
 2760      00
 711:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 2761              		.loc 1 711 0
 2762 1e60 488B4580 		movq	-128(%rbp), %rax
 2763 1e64 0FB6F0   		movzbl	%al, %esi
 2764 1e67 4C8B85F8 		movq	-264(%rbp), %r8
 2764      FEFFFF
 2765 1e6e 488DBD12 		leaq	-238(%rbp), %rdi
 2765      FFFFFF
 2766 1e75 488D8D38 		leaq	-200(%rbp), %rcx
 2766      FFFFFF
 2767 1e7c 488B9558 		movq	-168(%rbp), %rdx
 2767      FFFFFF
 2768 1e83 488B8508 		movq	-248(%rbp), %rax
 2768      FFFFFF
 2769 1e8a 4D89C1   		movq	%r8, %r9
 2770 1e8d 4989F8   		movq	%rdi, %r8
 2771 1e90 4889C7   		movq	%rax, %rdi
 2772 1e93 E887F3FF 		call	doWrite
 2772      FF
 2773 1e98 898528FF 		movl	%eax, -216(%rbp)
 2773      FFFF
 712:main.c        **** 					gettimeofday(&tvEnd, NULL);
 2774              		.loc 1 712 0
 2775 1e9e 488D45C0 		leaq	-64(%rbp), %rax
 2776 1ea2 BE000000 		movl	$0, %esi
 2776      00
 2777 1ea7 4889C7   		movq	%rax, %rdi
 2778 1eaa E8000000 		call	gettimeofday
 2778      00
 713:main.c        **** 					startTime = tvStart.tv_sec;
 2779              		.loc 1 713 0
 2780 1eaf 488B45B0 		movq	-80(%rbp), %rax
 2781 1eb3 48894588 		movq	%rax, -120(%rbp)
 714:main.c        **** 					startTime *= 1000000;
 2782              		.loc 1 714 0
 2783 1eb7 488B4588 		movq	-120(%rbp), %rax
 2784 1ebb 4869C040 		imulq	$1000000, %rax, %rax
 2784      420F00
 2785 1ec2 48894588 		movq	%rax, -120(%rbp)
 715:main.c        **** 					startTime += tvStart.tv_usec;
 2786              		.loc 1 715 0
 2787 1ec6 488B45B8 		movq	-72(%rbp), %rax
 2788 1eca 48014588 		addq	%rax, -120(%rbp)
 716:main.c        **** 					endTime = tvEnd.tv_sec;
 2789              		.loc 1 716 0
 2790 1ece 488B45C0 		movq	-64(%rbp), %rax
 2791 1ed2 48894590 		movq	%rax, -112(%rbp)
 717:main.c        **** 					endTime *= 1000000;
 2792              		.loc 1 717 0
 2793 1ed6 488B4590 		movq	-112(%rbp), %rax
 2794 1eda 4869C040 		imulq	$1000000, %rax, %rax
 2794      420F00
 2795 1ee1 48894590 		movq	%rax, -112(%rbp)
 718:main.c        **** 					endTime += tvEnd.tv_usec;
 2796              		.loc 1 718 0
 2797 1ee5 488B45C8 		movq	-56(%rbp), %rax
 2798 1ee9 48014590 		addq	%rax, -112(%rbp)
 719:main.c        **** 					totalTime = (double)(endTime - startTime);
 2799              		.loc 1 719 0
 2800 1eed 488B4590 		movq	-112(%rbp), %rax
 2801 1ef1 482B4588 		subq	-120(%rbp), %rax
 2802 1ef5 660FEFC0 		pxor	%xmm0, %xmm0
 2803 1ef9 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2803      C0
 2804 1efe F20F1145 		movsd	%xmm0, -104(%rbp)
 2804      98
 720:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 2805              		.loc 1 720 0
 2806 1f03 F20F1045 		movsd	-104(%rbp), %xmm0
 2806      98
 2807 1f08 F20F100D 		movsd	.LC19(%rip), %xmm1
 2807      00000000 
 2808 1f10 F20F5EC1 		divsd	%xmm1, %xmm0
 2809 1f14 F20F1145 		movsd	%xmm0, -104(%rbp)
 2809      98
 721:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 2810              		.loc 1 721 0
 2811 1f19 488B8538 		movq	-200(%rbp), %rax
 2811      FFFFFF
 2812 1f20 4885C0   		testq	%rax, %rax
 2813 1f23 780B     		js	.L165
 2814 1f25 660FEFC0 		pxor	%xmm0, %xmm0
 2815 1f29 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2815      C0
 2816 1f2e EB19     		jmp	.L166
 2817              	.L165:
 2818 1f30 4889C2   		movq	%rax, %rdx
 2819 1f33 48D1EA   		shrq	%rdx
 2820 1f36 83E001   		andl	$1, %eax
 2821 1f39 4809C2   		orq	%rax, %rdx
 2822 1f3c 660FEFC0 		pxor	%xmm0, %xmm0
 2823 1f40 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 2823      C2
 2824 1f45 F20F58C0 		addsd	%xmm0, %xmm0
 2825              	.L166:
 2826 1f49 F20F1055 		movsd	-104(%rbp), %xmm2
 2826      98
 2827 1f4e F20F100D 		movsd	.LC20(%rip), %xmm1
 2827      00000000 
 2828 1f56 F20F59CA 		mulsd	%xmm2, %xmm1
 2829 1f5a F20F5EC1 		divsd	%xmm1, %xmm0
 2830 1f5e F20F1145 		movsd	%xmm0, -96(%rbp)
 2830      A0
 722:main.c        **** 				#endif
 723:main.c        **** 				if ( enableBenchmarking ) {
 2831              		.loc 1 723 0
 2832 1f63 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 2832      000000
 2833 1f6a 84C0     		testb	%al, %al
 2834 1f6c 743A     		je	.L167
 724:main.c        **** 					printf(
 2835              		.loc 1 724 0
 2836 1f6e 0FB78512 		movzwl	-238(%rbp), %eax
 2836      FFFFFF
 2837 1f75 0FB7D0   		movzwl	%ax, %edx
 2838 1f78 488B8538 		movq	-200(%rbp), %rax
 2838      FFFFFF
 2839 1f7f 488B75A0 		movq	-96(%rbp), %rsi
 2840 1f83 488B4D80 		movq	-128(%rbp), %rcx
 2841 1f87 4889B5F0 		movq	%rsi, -272(%rbp)
 2841      FEFFFF
 2842 1f8e F20F1085 		movsd	-272(%rbp), %xmm0
 2842      F0FEFFFF 
 2843 1f96 4889C6   		movq	%rax, %rsi
 2844 1f99 BF000000 		movl	$.LC23, %edi
 2844      00
 2845 1f9e B8010000 		movl	$1, %eax
 2845      00
 2846 1fa3 E8000000 		call	printf
 2846      00
 2847              	.L167:
 725:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 726:main.c        **** 						length, checksum, chan, speed);
 727:main.c        **** 				}
 728:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 2848              		.loc 1 728 0
 2849 1fa8 83BD28FF 		cmpl	$0, -216(%rbp)
 2849      FFFF00
 2850 1faf 740E     		je	.L168
 2851              		.loc 1 728 0 is_stmt 0 discriminator 1
 2852 1fb1 8B8528FF 		movl	-216(%rbp), %eax
 2852      FFFF
 2853 1fb7 898514FF 		movl	%eax, -236(%rbp)
 2853      FFFF
 2854 1fbd EB20     		jmp	.L161
 2855              	.L168:
 729:main.c        **** 
 730:main.c        **** 				// Close the file
 731:main.c        **** 				fclose(file);
 2856              		.loc 1 731 0 is_stmt 1
 2857 1fbf 488B8558 		movq	-168(%rbp), %rax
 2857      FFFFFF
 2858 1fc6 4889C7   		movq	%rax, %rdi
 2859 1fc9 E8000000 		call	fclose
 2859      00
 732:main.c        **** 				file = NULL;
 2860              		.loc 1 732 0
 2861 1fce 48C78558 		movq	$0, -168(%rbp)
 2861      FFFFFF00 
 2861      000000
 2862              	.LBE26:
 679:main.c        **** 				uint16 checksum = 0x0000;
 2863              		.loc 1 679 0
 2864 1fd9 90       		nop
 2865 1fda E9AB0300 		jmp	.L150
 2865      00
 2866              	.L161:
 668:main.c        **** 
 2867              		.loc 1 668 0 discriminator 2
 2868 1fdf E9E70300 		jmp	.L117
 2868      00
 2869              	.L156:
 733:main.c        **** 			} else if ( isHexDigit(ch) ) {
 2870              		.loc 1 733 0
 2871 1fe4 0FBE8510 		movsbl	-240(%rbp), %eax
 2871      FFFFFF
 2872 1feb 89C7     		movl	%eax, %edi
 2873 1fed E8A5EDFF 		call	isHexDigit
 2873      FF
 2874 1ff2 84C0     		testb	%al, %al
 2875 1ff4 0F848402 		je	.L170
 2875      0000
 2876              	.LBB27:
 734:main.c        **** 				// Read a sequence of hex bytes to write
 735:main.c        **** 				uint8 *dataPtr;
 736:main.c        **** 				p = ptr + 1;
 2877              		.loc 1 736 0
 2878 1ffa 488B0500 		movq	ptr(%rip), %rax
 2878      000000
 2879 2001 4883C001 		addq	$1, %rax
 2880 2005 48898570 		movq	%rax, -144(%rbp)
 2880      FFFFFF
 737:main.c        **** 				while ( isHexDigit(*p) ) {
 2881              		.loc 1 737 0
 2882 200c EB08     		jmp	.L171
 2883              	.L172:
 738:main.c        **** 					p++;
 2884              		.loc 1 738 0
 2885 200e 48838570 		addq	$1, -144(%rbp)
 2885      FFFFFF01 
 2886              	.L171:
 737:main.c        **** 				while ( isHexDigit(*p) ) {
 2887              		.loc 1 737 0
 2888 2016 488B8570 		movq	-144(%rbp), %rax
 2888      FFFFFF
 2889 201d 0FB600   		movzbl	(%rax), %eax
 2890 2020 0FBEC0   		movsbl	%al, %eax
 2891 2023 89C7     		movl	%eax, %edi
 2892 2025 E86DEDFF 		call	isHexDigit
 2892      FF
 2893 202a 84C0     		testb	%al, %al
 2894 202c 75E0     		jne	.L172
 739:main.c        **** 				}
 740:main.c        **** 				CHECK_STATUS((p - ptr) & 1, FLP_ODD_DIGITS, cleanup);
 2895              		.loc 1 740 0
 2896 202e 488B8570 		movq	-144(%rbp), %rax
 2896      FFFFFF
 2897 2035 488B1500 		movq	ptr(%rip), %rdx
 2897      000000
 2898 203c 4829D0   		subq	%rdx, %rax
 2899 203f 83E001   		andl	$1, %eax
 2900 2042 4885C0   		testq	%rax, %rax
 2901 2045 740F     		je	.L173
 2902              		.loc 1 740 0 is_stmt 0 discriminator 1
 2903 2047 C78514FF 		movl	$9, -236(%rbp)
 2903      FFFF0900 
 2903      0000
 2904 2051 E9750300 		jmp	.L117
 2904      00
 2905              	.L173:
 741:main.c        **** 				length = (size_t)(p - ptr) / 2;
 2906              		.loc 1 741 0 is_stmt 1
 2907 2056 488B8570 		movq	-144(%rbp), %rax
 2907      FFFFFF
 2908 205d 488B1500 		movq	ptr(%rip), %rdx
 2908      000000
 2909 2064 4829D0   		subq	%rdx, %rax
 2910 2067 48D1E8   		shrq	%rax
 2911 206a 48898538 		movq	%rax, -200(%rbp)
 2911      FFFFFF
 742:main.c        **** 				data = malloc(length);
 2912              		.loc 1 742 0
 2913 2071 488B8538 		movq	-200(%rbp), %rax
 2913      FFFFFF
 2914 2078 4889C7   		movq	%rax, %rdi
 2915 207b E8000000 		call	malloc
 2915      00
 2916 2080 48898548 		movq	%rax, -184(%rbp)
 2916      FFFFFF
 743:main.c        **** 				dataPtr = data;
 2917              		.loc 1 743 0
 2918 2087 488B8548 		movq	-184(%rbp), %rax
 2918      FFFFFF
 2919 208e 48898578 		movq	%rax, -136(%rbp)
 2919      FFFFFF
 744:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2920              		.loc 1 744 0
 2921 2095 48C78568 		movq	$0, -152(%rbp)
 2921      FFFFFF00 
 2921      000000
 2922 20a0 EB34     		jmp	.L174
 2923              	.L175:
 745:main.c        **** 					getHexByte(dataPtr++);
 2924              		.loc 1 745 0 discriminator 3
 2925 20a2 488B8578 		movq	-136(%rbp), %rax
 2925      FFFFFF
 2926 20a9 488D5001 		leaq	1(%rax), %rdx
 2927 20ad 48899578 		movq	%rdx, -136(%rbp)
 2927      FFFFFF
 2928 20b4 4889C7   		movq	%rax, %rdi
 2929 20b7 E817EEFF 		call	getHexByte
 2929      FF
 746:main.c        **** 					ptr += 2;
 2930              		.loc 1 746 0 discriminator 3
 2931 20bc 488B0500 		movq	ptr(%rip), %rax
 2931      000000
 2932 20c3 4883C002 		addq	$2, %rax
 2933 20c7 48890500 		movq	%rax, ptr(%rip)
 2933      000000
 744:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2934              		.loc 1 744 0 discriminator 3
 2935 20ce 48838568 		addq	$1, -152(%rbp)
 2935      FFFFFF01 
 2936              	.L174:
 744:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2937              		.loc 1 744 0 is_stmt 0 discriminator 1
 2938 20d6 488B8538 		movq	-200(%rbp), %rax
 2938      FFFFFF
 2939 20dd 48398568 		cmpq	%rax, -152(%rbp)
 2939      FFFFFF
 2940 20e4 72BC     		jb	.L175
 747:main.c        **** 				}
 748:main.c        **** 				#ifdef WIN32
 749:main.c        **** 					QueryPerformanceCounter(&tvStart);
 750:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 751:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 752:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 753:main.c        **** 					totalTime /= freq.QuadPart;
 754:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 755:main.c        **** 				#else
 756:main.c        **** 					gettimeofday(&tvStart, NULL);
 2941              		.loc 1 756 0 is_stmt 1
 2942 20e6 488D45B0 		leaq	-80(%rbp), %rax
 2943 20ea BE000000 		movl	$0, %esi
 2943      00
 2944 20ef 4889C7   		movq	%rax, %rdi
 2945 20f2 E8000000 		call	gettimeofday
 2945      00
 757:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 2946              		.loc 1 757 0
 2947 20f7 488B9538 		movq	-200(%rbp), %rdx
 2947      FFFFFF
 2948 20fe 488B4580 		movq	-128(%rbp), %rax
 2949 2102 0FB6F0   		movzbl	%al, %esi
 2950 2105 488BBDF8 		movq	-264(%rbp), %rdi
 2950      FEFFFF
 2951 210c 488B8D48 		movq	-184(%rbp), %rcx
 2951      FFFFFF
 2952 2113 488B8508 		movq	-248(%rbp), %rax
 2952      FFFFFF
 2953 211a 4989F8   		movq	%rdi, %r8
 2954 211d 4889C7   		movq	%rax, %rdi
 2955 2120 E8000000 		call	flWriteChannel
 2955      00
 2956 2125 898524FF 		movl	%eax, -220(%rbp)
 2956      FFFF
 758:main.c        **** 					gettimeofday(&tvEnd, NULL);
 2957              		.loc 1 758 0
 2958 212b 488D45C0 		leaq	-64(%rbp), %rax
 2959 212f BE000000 		movl	$0, %esi
 2959      00
 2960 2134 4889C7   		movq	%rax, %rdi
 2961 2137 E8000000 		call	gettimeofday
 2961      00
 759:main.c        **** 					startTime = tvStart.tv_sec;
 2962              		.loc 1 759 0
 2963 213c 488B45B0 		movq	-80(%rbp), %rax
 2964 2140 48894588 		movq	%rax, -120(%rbp)
 760:main.c        **** 					startTime *= 1000000;
 2965              		.loc 1 760 0
 2966 2144 488B4588 		movq	-120(%rbp), %rax
 2967 2148 4869C040 		imulq	$1000000, %rax, %rax
 2967      420F00
 2968 214f 48894588 		movq	%rax, -120(%rbp)
 761:main.c        **** 					startTime += tvStart.tv_usec;
 2969              		.loc 1 761 0
 2970 2153 488B45B8 		movq	-72(%rbp), %rax
 2971 2157 48014588 		addq	%rax, -120(%rbp)
 762:main.c        **** 					endTime = tvEnd.tv_sec;
 2972              		.loc 1 762 0
 2973 215b 488B45C0 		movq	-64(%rbp), %rax
 2974 215f 48894590 		movq	%rax, -112(%rbp)
 763:main.c        **** 					endTime *= 1000000;
 2975              		.loc 1 763 0
 2976 2163 488B4590 		movq	-112(%rbp), %rax
 2977 2167 4869C040 		imulq	$1000000, %rax, %rax
 2977      420F00
 2978 216e 48894590 		movq	%rax, -112(%rbp)
 764:main.c        **** 					endTime += tvEnd.tv_usec;
 2979              		.loc 1 764 0
 2980 2172 488B45C8 		movq	-56(%rbp), %rax
 2981 2176 48014590 		addq	%rax, -112(%rbp)
 765:main.c        **** 					totalTime = (double)(endTime - startTime);
 2982              		.loc 1 765 0
 2983 217a 488B4590 		movq	-112(%rbp), %rax
 2984 217e 482B4588 		subq	-120(%rbp), %rax
 2985 2182 660FEFC0 		pxor	%xmm0, %xmm0
 2986 2186 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2986      C0
 2987 218b F20F1145 		movsd	%xmm0, -104(%rbp)
 2987      98
 766:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 2988              		.loc 1 766 0
 2989 2190 F20F1045 		movsd	-104(%rbp), %xmm0
 2989      98
 2990 2195 F20F100D 		movsd	.LC19(%rip), %xmm1
 2990      00000000 
 2991 219d F20F5EC1 		divsd	%xmm1, %xmm0
 2992 21a1 F20F1145 		movsd	%xmm0, -104(%rbp)
 2992      98
 767:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 2993              		.loc 1 767 0
 2994 21a6 488B8538 		movq	-200(%rbp), %rax
 2994      FFFFFF
 2995 21ad 4885C0   		testq	%rax, %rax
 2996 21b0 780B     		js	.L176
 2997 21b2 660FEFC0 		pxor	%xmm0, %xmm0
 2998 21b6 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2998      C0
 2999 21bb EB19     		jmp	.L177
 3000              	.L176:
 3001 21bd 4889C2   		movq	%rax, %rdx
 3002 21c0 48D1EA   		shrq	%rdx
 3003 21c3 83E001   		andl	$1, %eax
 3004 21c6 4809C2   		orq	%rax, %rdx
 3005 21c9 660FEFC0 		pxor	%xmm0, %xmm0
 3006 21cd F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 3006      C2
 3007 21d2 F20F58C0 		addsd	%xmm0, %xmm0
 3008              	.L177:
 3009 21d6 F20F1055 		movsd	-104(%rbp), %xmm2
 3009      98
 3010 21db F20F100D 		movsd	.LC20(%rip), %xmm1
 3010      00000000 
 3011 21e3 F20F59CA 		mulsd	%xmm2, %xmm1
 3012 21e7 F20F5EC1 		divsd	%xmm1, %xmm0
 3013 21eb F20F1145 		movsd	%xmm0, -96(%rbp)
 3013      A0
 768:main.c        **** 				#endif
 769:main.c        **** 				if ( enableBenchmarking ) {
 3014              		.loc 1 769 0
 3015 21f0 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 3015      000000
 3016 21f7 84C0     		testb	%al, %al
 3017 21f9 744C     		je	.L178
 770:main.c        **** 					printf(
 771:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 772:main.c        **** 						length, calcChecksum(data, length), chan, speed);
 3018              		.loc 1 772 0
 3019 21fb 488B9538 		movq	-200(%rbp), %rdx
 3019      FFFFFF
 3020 2202 488B8548 		movq	-184(%rbp), %rax
 3020      FFFFFF
 3021 2209 4889D6   		movq	%rdx, %rsi
 3022 220c 4889C7   		movq	%rax, %rdi
 3023 220f E80AECFF 		call	calcChecksum
 3023      FF
 770:main.c        **** 					printf(
 3024              		.loc 1 770 0
 3025 2214 0FB7D0   		movzwl	%ax, %edx
 3026 2217 488B8538 		movq	-200(%rbp), %rax
 3026      FFFFFF
 3027 221e 488B75A0 		movq	-96(%rbp), %rsi
 3028 2222 488B4D80 		movq	-128(%rbp), %rcx
 3029 2226 4889B5F0 		movq	%rsi, -272(%rbp)
 3029      FEFFFF
 3030 222d F20F1085 		movsd	-272(%rbp), %xmm0
 3030      F0FEFFFF 
 3031 2235 4889C6   		movq	%rax, %rsi
 3032 2238 BF000000 		movl	$.LC23, %edi
 3032      00
 3033 223d B8010000 		movl	$1, %eax
 3033      00
 3034 2242 E8000000 		call	printf
 3034      00
 3035              	.L178:
 773:main.c        **** 				}
 774:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3036              		.loc 1 774 0
 3037 2247 83BD24FF 		cmpl	$0, -220(%rbp)
 3037      FFFF00
 3038 224e 740F     		je	.L179
 3039              		.loc 1 774 0 is_stmt 0 discriminator 1
 3040 2250 C78514FF 		movl	$1, -236(%rbp)
 3040      FFFF0100 
 3040      0000
 3041 225a E96C0100 		jmp	.L117
 3041      00
 3042              	.L179:
 775:main.c        **** 				free(data);
 3043              		.loc 1 775 0 is_stmt 1
 3044 225f 488B8548 		movq	-184(%rbp), %rax
 3044      FFFFFF
 3045 2266 4889C7   		movq	%rax, %rdi
 3046 2269 E8000000 		call	free
 3046      00
 776:main.c        **** 				data = NULL;
 3047              		.loc 1 776 0
 3048 226e 48C78548 		movq	$0, -184(%rbp)
 3048      FFFFFF00 
 3048      000000
 3049              	.LBE27:
 777:main.c        **** 			} else {
 778:main.c        **** 				FAIL(FLP_ILL_CHAR, cleanup);
 779:main.c        **** 			}
 780:main.c        **** 			break;
 3050              		.loc 1 780 0
 3051 2279 E90C0100 		jmp	.L150
 3051      00
 3052              	.L170:
 778:main.c        **** 			}
 3053              		.loc 1 778 0
 3054 227e C78514FF 		movl	$5, -236(%rbp)
 3054      FFFF0500 
 3054      0000
 3055 2288 90       		nop
 3056 2289 E93D0100 		jmp	.L117
 3056      00
 3057              	.L123:
 3058              	.LBE25:
 3059              	.LBB28:
 781:main.c        **** 		}
 782:main.c        **** 		case '+':{
 783:main.c        **** 			uint32 conduit;
 784:main.c        **** 			char *end;
 785:main.c        **** 			ptr++;
 3060              		.loc 1 785 0
 3061 228e 488B0500 		movq	ptr(%rip), %rax
 3061      000000
 3062 2295 4883C001 		addq	$1, %rax
 3063 2299 48890500 		movq	%rax, ptr(%rip)
 3063      000000
 786:main.c        **** 
 787:main.c        **** 			// Get the conduit
 788:main.c        **** 			errno = 0;
 3064              		.loc 1 788 0
 3065 22a0 E8000000 		call	__errno_location
 3065      00
 3066 22a5 C7000000 		movl	$0, (%rax)
 3066      0000
 789:main.c        **** 			conduit = (uint32)strtoul(ptr, &end, 16);
 3067              		.loc 1 789 0
 3068 22ab 488B0500 		movq	ptr(%rip), %rax
 3068      000000
 3069 22b2 488D8D40 		leaq	-192(%rbp), %rcx
 3069      FFFFFF
 3070 22b9 BA100000 		movl	$16, %edx
 3070      00
 3071 22be 4889CE   		movq	%rcx, %rsi
 3072 22c1 4889C7   		movq	%rax, %rdi
 3073 22c4 E8000000 		call	strtoul
 3073      00
 3074 22c9 89852CFF 		movl	%eax, -212(%rbp)
 3074      FFFF
 790:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 3075              		.loc 1 790 0
 3076 22cf E8000000 		call	__errno_location
 3076      00
 3077 22d4 8B00     		movl	(%rax), %eax
 3078 22d6 85C0     		testl	%eax, %eax
 3079 22d8 740F     		je	.L180
 3080              		.loc 1 790 0 is_stmt 0 discriminator 1
 3081 22da C78514FF 		movl	$2, -236(%rbp)
 3081      FFFF0200 
 3081      0000
 3082 22e4 E9E20000 		jmp	.L117
 3082      00
 3083              	.L180:
 791:main.c        **** 
 792:main.c        **** 			// Ensure that it's 0-127
 793:main.c        **** 			CHECK_STATUS(conduit > 255, FLP_CONDUIT_RANGE, cleanup);
 3084              		.loc 1 793 0 is_stmt 1
 3085 22e9 81BD2CFF 		cmpl	$255, -212(%rbp)
 3085      FFFFFF00 
 3085      0000
 3086 22f3 760F     		jbe	.L182
 3087              		.loc 1 793 0 is_stmt 0 discriminator 1
 3088 22f5 C78514FF 		movl	$4, -236(%rbp)
 3088      FFFF0400 
 3088      0000
 3089 22ff E9C70000 		jmp	.L117
 3089      00
 3090              	.L182:
 794:main.c        **** 			ptr = end;
 3091              		.loc 1 794 0 is_stmt 1
 3092 2304 488B8540 		movq	-192(%rbp), %rax
 3092      FFFFFF
 3093 230b 48890500 		movq	%rax, ptr(%rip)
 3093      000000
 795:main.c        **** 
 796:main.c        **** 			// Only two valid chars at this point:
 797:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';', FLP_ILL_CHAR, cleanup);
 3094              		.loc 1 797 0
 3095 2312 488B0500 		movq	ptr(%rip), %rax
 3095      000000
 3096 2319 0FB600   		movzbl	(%rax), %eax
 3097 231c 84C0     		testb	%al, %al
 3098 231e 741D     		je	.L183
 3099              		.loc 1 797 0 is_stmt 0 discriminator 1
 3100 2320 488B0500 		movq	ptr(%rip), %rax
 3100      000000
 3101 2327 0FB600   		movzbl	(%rax), %eax
 3102 232a 3C3B     		cmpb	$59, %al
 3103 232c 740F     		je	.L183
 3104              		.loc 1 797 0 discriminator 2
 3105 232e C78514FF 		movl	$5, -236(%rbp)
 3105      FFFF0500 
 3105      0000
 3106 2338 E98E0000 		jmp	.L117
 3106      00
 3107              	.L183:
 798:main.c        **** 
 799:main.c        **** 			fStatus = flSelectConduit(handle, (uint8)conduit, error);
 3108              		.loc 1 799 0 is_stmt 1
 3109 233d 8B852CFF 		movl	-212(%rbp), %eax
 3109      FFFF
 3110 2343 0FB6C8   		movzbl	%al, %ecx
 3111 2346 488B95F8 		movq	-264(%rbp), %rdx
 3111      FEFFFF
 3112 234d 488B8508 		movq	-248(%rbp), %rax
 3112      FFFFFF
 3113 2354 89CE     		movl	%ecx, %esi
 3114 2356 4889C7   		movq	%rax, %rdi
 3115 2359 E8000000 		call	flSelectConduit
 3115      00
 3116 235e 898524FF 		movl	%eax, -220(%rbp)
 3116      FFFF
 800:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3117              		.loc 1 800 0
 3118 2364 83BD24FF 		cmpl	$0, -220(%rbp)
 3118      FFFF00
 3119 236b 741C     		je	.L195
 3120              		.loc 1 800 0 is_stmt 0 discriminator 1
 3121 236d C78514FF 		movl	$1, -236(%rbp)
 3121      FFFF0100 
 3121      0000
 3122 2377 90       		nop
 3123 2378 EB51     		jmp	.L117
 3124              	.L193:
 3125              	.LBE28:
 801:main.c        **** 			break;
 802:main.c        **** 		}
 803:main.c        **** 		default:
 804:main.c        **** 			FAIL(FLP_ILL_CHAR, cleanup);
 3126              		.loc 1 804 0 is_stmt 1
 3127 237a C78514FF 		movl	$5, -236(%rbp)
 3127      FFFF0500 
 3127      0000
 3128 2384 EB45     		jmp	.L117
 3129              	.L194:
 3130              	.LBB29:
 656:main.c        **** 		}
 3131              		.loc 1 656 0
 3132 2386 90       		nop
 3133 2387 EB01     		jmp	.L150
 3134              	.L195:
 3135              	.LBE29:
 3136              	.LBB30:
 801:main.c        **** 			break;
 3137              		.loc 1 801 0
 3138 2389 90       		nop
 3139              	.L150:
 3140              	.LBE30:
 805:main.c        **** 		}
 806:main.c        **** 	} while ( *ptr == ';' );
 3141              		.loc 1 806 0
 3142 238a 488B0500 		movq	ptr(%rip), %rax
 3142      000000
 3143 2391 0FB600   		movzbl	(%rax), %eax
 3144 2394 3C3B     		cmpb	$59, %al
 3145 2396 0F8451F1 		je	.L118
 3145      FFFF
 807:main.c        **** 	CHECK_STATUS(*ptr != '\0', FLP_ILL_CHAR, cleanup);
 3146              		.loc 1 807 0
 3147 239c 488B0500 		movq	ptr(%rip), %rax
 3147      000000
 3148 23a3 0FB600   		movzbl	(%rax), %eax
 3149 23a6 84C0     		testb	%al, %al
 3150 23a8 740C     		je	.L186
 3151              		.loc 1 807 0 is_stmt 0 discriminator 1
 3152 23aa C78514FF 		movl	$5, -236(%rbp)
 3152      FFFF0500 
 3152      0000
 3153 23b4 EB15     		jmp	.L117
 3154              	.L186:
 808:main.c        **** 
 809:main.c        **** 	dump(0x00000000, dataFromFPGA.data, dataFromFPGA.length);
 3155              		.loc 1 809 0 is_stmt 1
 3156 23b6 488B55D8 		movq	-40(%rbp), %rdx
 3157 23ba 488B45D0 		movq	-48(%rbp), %rax
 3158 23be 4889C6   		movq	%rax, %rsi
 3159 23c1 BF000000 		movl	$0, %edi
 3159      00
 3160 23c6 E8000000 		call	dump
 3160      00
 3161              	.L117:
 810:main.c        **** 
 811:main.c        **** cleanup:
 812:main.c        **** 	bufDestroy(&dataFromFPGA);
 3162              		.loc 1 812 0
 3163 23cb 488D45D0 		leaq	-48(%rbp), %rax
 3164 23cf 4889C7   		movq	%rax, %rdi
 3165 23d2 E8000000 		call	bufDestroy
 3165      00
 813:main.c        **** 	if ( file ) {
 3166              		.loc 1 813 0
 3167 23d7 4883BD58 		cmpq	$0, -168(%rbp)
 3167      FFFFFF00 
 3168 23df 740F     		je	.L187
 814:main.c        **** 		fclose(file);
 3169              		.loc 1 814 0
 3170 23e1 488B8558 		movq	-168(%rbp), %rax
 3170      FFFFFF
 3171 23e8 4889C7   		movq	%rax, %rdi
 3172 23eb E8000000 		call	fclose
 3172      00
 3173              	.L187:
 815:main.c        **** 	}
 816:main.c        **** 	free(fileName);
 3174              		.loc 1 816 0
 3175 23f0 488B8550 		movq	-176(%rbp), %rax
 3175      FFFFFF
 3176 23f7 4889C7   		movq	%rax, %rdi
 3177 23fa E8000000 		call	free
 3177      00
 817:main.c        **** 	free(data);
 3178              		.loc 1 817 0
 3179 23ff 488B8548 		movq	-184(%rbp), %rax
 3179      FFFFFF
 3180 2406 4889C7   		movq	%rax, %rdi
 3181 2409 E8000000 		call	free
 3181      00
 818:main.c        **** 	if ( retVal > FLP_LIBERR ) {
 3182              		.loc 1 818 0
 3183 240e 83BD14FF 		cmpl	$1, -236(%rbp)
 3183      FFFF01
 3184 2415 0F86A700 		jbe	.L188
 3184      0000
 3185              	.LBB31:
 819:main.c        **** 		const int column = (int)(ptr - line);
 3186              		.loc 1 819 0
 3187 241b 488B0500 		movq	ptr(%rip), %rax
 3187      000000
 3188 2422 4889C2   		movq	%rax, %rdx
 3189 2425 488B8500 		movq	-256(%rbp), %rax
 3189      FFFFFF
 3190 242c 4829C2   		subq	%rax, %rdx
 3191 242f 4889D0   		movq	%rdx, %rax
 3192 2432 898534FF 		movl	%eax, -204(%rbp)
 3192      FFFF
 820:main.c        **** 		int i;
 821:main.c        **** 		fprintf(stderr, "%s at column %d\n  %s\n  ", errMessages[retVal], column, line);
 3193              		.loc 1 821 0
 3194 2438 8B8514FF 		movl	-236(%rbp), %eax
 3194      FFFF
 3195 243e 488B14C5 		movq	errMessages(,%rax,8), %rdx
 3195      00000000 
 3196 2446 488B0500 		movq	stderr(%rip), %rax
 3196      000000
 3197 244d 488BB500 		movq	-256(%rbp), %rsi
 3197      FFFFFF
 3198 2454 8B8D34FF 		movl	-204(%rbp), %ecx
 3198      FFFF
 3199 245a 4989F0   		movq	%rsi, %r8
 3200 245d BE000000 		movl	$.LC24, %esi
 3200      00
 3201 2462 4889C7   		movq	%rax, %rdi
 3202 2465 B8000000 		movl	$0, %eax
 3202      00
 3203 246a E8000000 		call	fprintf
 3203      00
 822:main.c        **** 		for ( i = 0; i < column; i++ ) {
 3204              		.loc 1 822 0
 3205 246f C7851CFF 		movl	$0, -228(%rbp)
 3205      FFFF0000 
 3205      0000
 3206 2479 EB1B     		jmp	.L189
 3207              	.L190:
 823:main.c        **** 			fprintf(stderr, " ");
 3208              		.loc 1 823 0 discriminator 3
 3209 247b 488B0500 		movq	stderr(%rip), %rax
 3209      000000
 3210 2482 4889C6   		movq	%rax, %rsi
 3211 2485 BF200000 		movl	$32, %edi
 3211      00
 3212 248a E8000000 		call	fputc
 3212      00
 822:main.c        **** 		for ( i = 0; i < column; i++ ) {
 3213              		.loc 1 822 0 discriminator 3
 3214 248f 83851CFF 		addl	$1, -228(%rbp)
 3214      FFFF01
 3215              	.L189:
 822:main.c        **** 		for ( i = 0; i < column; i++ ) {
 3216              		.loc 1 822 0 is_stmt 0 discriminator 1
 3217 2496 8B851CFF 		movl	-228(%rbp), %eax
 3217      FFFF
 3218 249c 3B8534FF 		cmpl	-204(%rbp), %eax
 3218      FFFF
 3219 24a2 7CD7     		jl	.L190
 824:main.c        **** 		}
 825:main.c        **** 		fprintf(stderr, "^\n");
 3220              		.loc 1 825 0 is_stmt 1
 3221 24a4 488B0500 		movq	stderr(%rip), %rax
 3221      000000
 3222 24ab 4889C1   		movq	%rax, %rcx
 3223 24ae BA020000 		movl	$2, %edx
 3223      00
 3224 24b3 BE010000 		movl	$1, %esi
 3224      00
 3225 24b8 BF000000 		movl	$.LC25, %edi
 3225      00
 3226 24bd E8000000 		call	fwrite
 3226      00
 3227              	.L188:
 3228              	.LBE31:
 826:main.c        **** 	}
 827:main.c        **** 	return retVal;
 3229              		.loc 1 827 0
 3230 24c2 8B8514FF 		movl	-236(%rbp), %eax
 3230      FFFF
 828:main.c        **** }
 3231              		.loc 1 828 0
 3232 24c8 488B4DF8 		movq	-8(%rbp), %rcx
 3233 24cc 6448330C 		xorq	%fs:40, %rcx
 3233      25280000 
 3233      00
 3234 24d5 7405     		je	.L192
 3235 24d7 E8000000 		call	__stack_chk_fail
 3235      00
 3236              	.L192:
 3237 24dc C9       		leave
 3238              		.cfi_def_cfa 7, 8
 3239 24dd C3       		ret
 3240              		.cfi_endproc
 3241              	.LFE19:
 3243              		.section	.rodata
 3244              	.LC26:
 3245 0239 30303030 		.string	"0000"
 3245      00
 3246              	.LC27:
 3247 023e 30303031 		.string	"0001"
 3247      00
 3248              	.LC28:
 3249 0243 30303130 		.string	"0010"
 3249      00
 3250              	.LC29:
 3251 0248 30303131 		.string	"0011"
 3251      00
 3252              	.LC30:
 3253 024d 30313030 		.string	"0100"
 3253      00
 3254              	.LC31:
 3255 0252 30313031 		.string	"0101"
 3255      00
 3256              	.LC32:
 3257 0257 30313130 		.string	"0110"
 3257      00
 3258              	.LC33:
 3259 025c 30313131 		.string	"0111"
 3259      00
 3260              	.LC34:
 3261 0261 31303030 		.string	"1000"
 3261      00
 3262              	.LC35:
 3263 0266 31303031 		.string	"1001"
 3263      00
 3264              	.LC36:
 3265 026b 58585858 		.string	"XXXX"
 3265      00
 3266              	.LC37:
 3267 0270 31303130 		.string	"1010"
 3267      00
 3268              	.LC38:
 3269 0275 31303131 		.string	"1011"
 3269      00
 3270              	.LC39:
 3271 027a 31313030 		.string	"1100"
 3271      00
 3272              	.LC40:
 3273 027f 31313031 		.string	"1101"
 3273      00
 3274              	.LC41:
 3275 0284 31313130 		.string	"1110"
 3275      00
 3276              	.LC42:
 3277 0289 31313131 		.string	"1111"
 3277      00
 3278              		.data
 3279              		.align 32
 3282              	nibbles:
 3283 0080 00000000 		.quad	.LC26
 3283      00000000 
 3284 0088 00000000 		.quad	.LC27
 3284      00000000 
 3285 0090 00000000 		.quad	.LC28
 3285      00000000 
 3286 0098 00000000 		.quad	.LC29
 3286      00000000 
 3287 00a0 00000000 		.quad	.LC30
 3287      00000000 
 3288 00a8 00000000 		.quad	.LC31
 3288      00000000 
 3289 00b0 00000000 		.quad	.LC32
 3289      00000000 
 3290 00b8 00000000 		.quad	.LC33
 3290      00000000 
 3291 00c0 00000000 		.quad	.LC34
 3291      00000000 
 3292 00c8 00000000 		.quad	.LC35
 3292      00000000 
 3293 00d0 00000000 		.quad	.LC36
 3293      00000000 
 3294 00d8 00000000 		.quad	.LC36
 3294      00000000 
 3295 00e0 00000000 		.quad	.LC36
 3295      00000000 
 3296 00e8 00000000 		.quad	.LC36
 3296      00000000 
 3297 00f0 00000000 		.quad	.LC36
 3297      00000000 
 3298 00f8 00000000 		.quad	.LC36
 3298      00000000 
 3299 0100 00000000 		.quad	.LC36
 3299      00000000 
 3300 0108 00000000 		.quad	.LC37
 3300      00000000 
 3301 0110 00000000 		.quad	.LC38
 3301      00000000 
 3302 0118 00000000 		.quad	.LC39
 3302      00000000 
 3303 0120 00000000 		.quad	.LC40
 3303      00000000 
 3304 0128 00000000 		.quad	.LC41
 3304      00000000 
 3305 0130 00000000 		.quad	.LC42
 3305      00000000 
 3306              		.section	.rodata
 3307 028e 0000     		.align 8
 3308              	.LC43:
 3309 0290 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 3309      20202020 
 3309      20202020 
 3309      76656E64 
 3309      6F722049 
 3310              	.LC44:
 3311 02c5 3C564944 		.string	"<VID:PID>"
 3311      3A504944 
 3311      3E00
 3312              	.LC45:
 3313 02cf 69767000 		.string	"ivp"
 3314              	.LC46:
 3315 02d3 6900     		.string	"i"
 3316 02d5 000000   		.align 8
 3317              	.LC47:
 3318 02d8 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 3318      20202056 
 3318      49442C20 
 3318      50494420 
 3318      616E6420 
 3319              	.LC48:
 3320 030d 3C564944 		.string	"<VID:PID[:DID]>"
 3320      3A504944 
 3320      5B3A4449 
 3320      445D3E00 
 3321              	.LC49:
 3322 031d 767000   		.string	"vp"
 3323              	.LC50:
 3324 0320 7600     		.string	"v"
 3325 0322 00000000 		.align 8
 3325      0000
 3326              	.LC51:
 3327 0328 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 3327      20202020 
 3327      6669726D 
 3327      77617265 
 3327      20746F20 
 3328              	.LC52:
 3329 0355 3C666972 		.string	"<firmware.hex>"
 3329      6D776172 
 3329      652E6865 
 3329      783E00
 3330              	.LC53:
 3331 0364 667700   		.string	"fw"
 3332              	.LC54:
 3333 0367 6600     		.string	"f"
 3334 0369 00000000 		.align 8
 3334      000000
 3335              	.LC55:
 3336 0370 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 3336      642F7772 
 3336      69746520 
 3336      64696769 
 3336      74616C20 
 3337              	.LC56:
 3338 039d 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 3338      4366675B 
 3338      2C626974 
 3338      4366675D 
 3338      2A3E00
 3339              	.LC57:
 3340 03b0 706F7274 		.string	"ports"
 3340      7300
 3341              	.LC58:
 3342 03b6 6400     		.string	"d"
 3343              	.LC59:
 3344 03b8 20202020 		.string	"         query the JTAG chain"
 3344      20202020 
 3344      20717565 
 3344      72792074 
 3344      6865204A 
 3345              	.LC60:
 3346 03d6 3C6A7461 		.string	"<jtagBits>"
 3346      67426974 
 3346      733E00
 3347              	.LC61:
 3348 03e1 71756572 		.string	"query"
 3348      7900
 3349              	.LC62:
 3350 03e7 7100     		.string	"q"
 3351              	.LC63:
 3352 03e9 20202020 		.string	"         program a device"
 3352      20202020 
 3352      2070726F 
 3352      6772616D 
 3352      20612064 
 3353              	.LC64:
 3354 0403 3C636F6E 		.string	"<config>"
 3354      6669673E 
 3354      00
 3355              	.LC65:
 3356 040c 70726F67 		.string	"program"
 3356      72616D00 
 3357              	.LC66:
 3358 0414 7000     		.string	"p"
 3359 0416 0000     		.align 8
 3360              	.LC67:
 3361 0418 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 3361      20202020 
 3361      77686963 
 3361      6820636F 
 3361      6D6D2063 
 3362              	.LC68:
 3363 044c 3C636F6E 		.string	"<conduit>"
 3363      64756974 
 3363      3E00
 3364              	.LC69:
 3365 0456 636F6E64 		.string	"conduit"
 3365      75697400 
 3366              	.LC70:
 3367 045e 6300     		.string	"c"
 3368              		.align 8
 3369              	.LC71:
 3370 0460 20202020 		.string	"    a series of CommFPGA actions"
 3370      61207365 
 3370      72696573 
 3370      206F6620 
 3370      436F6D6D 
 3371              	.LC72:
 3372 0481 3C616374 		.string	"<actionString>"
 3372      696F6E53 
 3372      7472696E 
 3372      673E00
 3373              	.LC73:
 3374 0490 61637469 		.string	"action"
 3374      6F6E00
 3375              	.LC74:
 3376 0497 6100     		.string	"a"
 3377 0499 00000000 		.align 8
 3377      000000
 3378              	.LC75:
 3379 04a0 20202020 		.string	"                    start up an interactive CommFPGA session"
 3379      20202020 
 3379      20202020 
 3379      20202020 
 3379      20202020 
 3380              	.LC76:
 3381 04dd 7368656C 		.string	"shell"
 3381      6C00
 3382              	.LC77:
 3383 04e3 7300     		.string	"s"
 3384 04e5 000000   		.align 8
 3385              	.LC78:
 3386 04e8 20202020 		.string	"                enable benchmarking & checksumming"
 3386      20202020 
 3386      20202020 
 3386      20202020 
 3386      656E6162 
 3387              	.LC79:
 3388 051b 62656E63 		.string	"benchmark"
 3388      686D6172 
 3388      6B00
 3389              	.LC80:
 3390 0525 6200     		.string	"b"
 3391 0527 00       		.align 8
 3392              	.LC81:
 3393 0528 20202020 		.string	"                    reset the bulk endpoints"
 3393      20202020 
 3393      20202020 
 3393      20202020 
 3393      20202020 
 3394              	.LC82:
 3395 0555 72657365 		.string	"reset"
 3395      7400
 3396 055b 00000000 		.align 8
 3396      00
 3397              	.LC83:
 3398 0560 20202077 		.string	"   write data from channel ch to file"
 3398      72697465 
 3398      20646174 
 3398      61206672 
 3398      6F6D2063 
 3399              	.LC84:
 3400 0586 3C63683A 		.string	"<ch:file.bin>"
 3400      66696C65 
 3400      2E62696E 
 3400      3E00
 3401              	.LC85:
 3402 0594 64756D70 		.string	"dumploop"
 3402      6C6F6F70 
 3402      00
 3403              	.LC86:
 3404 059d 6C00     		.string	"l"
 3405 059f 00       		.align 8
 3406              	.LC87:
 3407 05a0 20202020 		.string	"                     print this help and exit"
 3407      20202020 
 3407      20202020 
 3407      20202020 
 3407      20202020 
 3408              	.LC88:
 3409 05ce 68656C70 		.string	"help"
 3409      00
 3410              	.LC89:
 3411 05d3 6800     		.string	"h"
 3412 05d5 000000   		.align 8
 3413              	.LC90:
 3414 05d8 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 3414      72697465 
 3414      20666972 
 3414      6D776172 
 3414      6520746F 
 3415              	.LC91:
 3416 05ff 3C737464 		.string	"<std|fw.hex|fw.iic>"
 3416      7C66772E 
 3416      6865787C 
 3416      66772E69 
 3416      69633E00 
 3417              	.LC92:
 3418 0613 65657072 		.string	"eeprom"
 3418      6F6D00
 3419 061a 00000000 		.align 8
 3419      0000
 3420              	.LC93:
 3421 0620 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 3421      20626163 
 3421      6B757020 
 3421      46583227 
 3421      73204545 
 3422              	.LC94:
 3423 064b 3C6B6269 		.string	"<kbitSize:fw.iic>"
 3423      7453697A 
 3423      653A6677 
 3423      2E696963 
 3423      3E00
 3424              	.LC95:
 3425 065d 6261636B 		.string	"backup"
 3425      757000
 3426              	.LC96:
 3427 0664 0909636F 		.string	"\t\tcommand for the project"
 3427      6D6D616E 
 3427      6420666F 
 3427      72207468 
 3427      65207072 
 3428              	.LC97:
 3429 067e 70726F6A 		.string	"project"
 3429      65637400 
 3430              	.LC98:
 3431 0686 7A00     		.string	"z"
 3432              	.LC99:
 3433 0688 666C636C 		.string	"flcli"
 3433      6900
 3434              	.LC100:
 3435 068e 25733A20 		.string	"%s: insufficient memory\n"
 3435      696E7375 
 3435      66666963 
 3435      69656E74 
 3435      206D656D 
 3436 06a7 00       		.align 8
 3437              	.LC101:
 3438 06a8 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 3438      4C696E6B 
 3438      20436F6D 
 3438      6D616E64 
 3438      2D4C696E 
 3439              	.LC102:
 3440 06fc 0A00     		.string	"\n"
 3441 06fe 0000     		.align 8
 3442              	.LC103:
 3443 0700 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 3443      65726163 
 3443      74207769 
 3443      74682061 
 3443      6E204650 
 3444              	.LC104:
 3445 0724 2020252D 		.string	"  %-10s %s\n"
 3445      31307320 
 3445      25730A00 
 3446              		.align 8
 3447              	.LC105:
 3448 0730 54727920 		.string	"Try '%s --help' for more information.\n"
 3448      27257320 
 3448      2D2D6865 
 3448      6C702720 
 3448      666F7220 
 3449 0757 00       		.align 8
 3450              	.LC106:
 3451 0758 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 3451      6D707469 
 3451      6E672074 
 3451      6F206F70 
 3451      656E2063 
 3452              	.LC107:
 3453 0790 4C6F6164 		.string	"Loading firmware into %s...\n"
 3453      696E6720 
 3453      6669726D 
 3453      77617265 
 3453      20696E74 
 3454              	.LC108:
 3455 07ad 41776169 		.string	"Awaiting renumeration"
 3455      74696E67 
 3455      2072656E 
 3455      756D6572 
 3455      6174696F 
 3456 07c3 00000000 		.align 8
 3456      00
 3457              	.LC109:
 3458 07c8 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 3458      4C696E6B 
 3458      20646576 
 3458      69636520 
 3458      64696420 
 3459 07fb 00000000 		.align 8
 3459      00
 3460              	.LC110:
 3461 0800 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 3461      6D707469 
 3461      6E672074 
 3461      6F206F70 
 3461      656E2063 
 3462 083d 000000   		.align 8
 3463              	.LC111:
 3464 0840 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 3464      64206E6F 
 3464      74206F70 
 3464      656E2046 
 3464      5047414C 
 3465 088a 00000000 		.align 8
 3465      0000
 3466              	.LC112:
 3467 0890 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 3467      65637465 
 3467      6420746F 
 3467      20465047 
 3467      414C696E 
 3468              	.LC113:
 3469 08df 73746400 		.string	"std"
 3470 08e3 00000000 		.align 8
 3470      00
 3471              	.LC114:
 3472 08e8 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM..."
 3472      696E6720 
 3472      74686520 
 3472      7374616E 
 3472      64617264 
 3473 0926 0000     		.align 8
 3474              	.LC115:
 3475 0928 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 3475      696E6720 
 3475      63757374 
 3475      6F6D2046 
 3475      5047414C 
 3476 0969 00000000 		.align 8
 3476      000000
 3477              	.LC116:
 3478 0970 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 3478      696E7661 
 3478      6C696420 
 3478      61726775 
 3478      6D656E74 
 3479 09ab 00000000 		.align 8
 3479      00
 3480              	.LC117:
 3481 09b0 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 3481      6E672061 
 3481      20626163 
 3481      6B757020 
 3481      6F662025 
 3482              	.LC118:
 3483 09eb 436F6E66 		.string	"Configuring ports..."
 3483      69677572 
 3483      696E6720 
 3483      706F7274 
 3483      732E2E2E 
 3484              	.LC119:
 3485 0a00 25303858 		.string	"%08X"
 3485      00
 3486 0a05 000000   		.align 8
 3487              	.LC120:
 3488 0a08 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 3488      6261636B 
 3488      3A202020 
 3488      32382020 
 3488      20323420 
 3489              	.LC121:
 3490 0a48 20257300 		.string	" %s"
 3491              	.LC122:
 3492 0a4c 20202573 		.string	"  %s"
 3492      00
 3493              	.LC123:
 3494 0a51 2025730A 		.string	" %s\n"
 3494      00
 3495 0a56 0000     		.align 8
 3496              	.LC124:
 3497 0a58 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 3497      46504741 
 3497      4C696E6B 
 3497      20646576 
 3497      69636520 
 3498              	.LC125:
 3499 0a95 20203078 		.string	"  0x%08X\n"
 3499      25303858 
 3499      0A00
 3500 0a9f 00       		.align 8
 3501              	.LC126:
 3502 0aa0 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 3502      46504741 
 3502      4C696E6B 
 3502      20646576 
 3502      69636520 
 3503              		.align 8
 3504              	.LC127:
 3505 0af8 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 3505      20636861 
 3505      696E2073 
 3505      63616E20 
 3505      72657175 
 3506              	.LC128:
 3507 0b47 50726F67 		.string	"Programming device..."
 3507      72616D6D 
 3507      696E6720 
 3507      64657669 
 3507      63652E2E 
 3508 0b5d 000000   		.align 8
 3509              	.LC129:
 3510 0b60 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 3510      72616D20 
 3510      6F706572 
 3510      6174696F 
 3510      6E207265 
 3511              		.align 8
 3512              	.LC130:
 3513 0ba8 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 3513      7574696E 
 3513      6720436F 
 3513      6D6D4650 
 3513      47412061 
 3514 0bdd 000000   		.align 8
 3515              	.LC131:
 3516 0be0 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 3516      46504741 
 3516      4C696E6B 
 3516      20646576 
 3516      69636520 
 3517 0c2c 00000000 		.align 8
 3518              	.LC132:
 3519 0c30 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 3519      6F6E2072 
 3519      65717565 
 3519      73746564 
 3519      20627574 
 3520 0c6d 000000   		.align 8
 3521              	.LC133:
 3522 0c70 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 3522      696E7661 
 3522      6C696420 
 3522      61726775 
 3522      6D656E74 
 3523 0cac 00000000 		.align 8
 3524              	.LC134:
 3525 0cb0 436F7079 		.string	"Copying from channel %lu to %s"
 3525      696E6720 
 3525      66726F6D 
 3525      20636861 
 3525      6E6E656C 
 3526              	.LC135:
 3527 0ccf 0A436175 		.string	"\nCaught SIGINT, quitting..."
 3527      67687420 
 3527      53494749 
 3527      4E542C20 
 3527      71756974 
 3528 0ceb 00000000 		.align 8
 3528      00
 3529              	.LC136:
 3530 0cf0 0A456E74 		.string	"\nEntering CommFPGA command-line mode:"
 3530      6572696E 
 3530      6720436F 
 3530      6D6D4650 
 3530      47412063 
 3531              	.LC137:
 3532 0d16 3E2000   		.string	"> "
 3533 0d19 00000000 		.align 8
 3533      000000
 3534              	.LC138:
 3535 0d20 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 3535      46504741 
 3535      4C696E6B 
 3535      20646576 
 3535      69636520 
 3536 0d69 00000000 		.align 8
 3536      000000
 3537              	.LC139:
 3538 0d70 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 3538      6C207265 
 3538      71756573 
 3538      74656420 
 3538      62757420 
 3539              	.LC140:
 3540 0dac 636F6F72 		.string	"coordi -- %d %d %d %d \n"
 3540      6469202D 
 3540      2D202564 
 3540      20256420 
 3540      25642025 
 3541              	.LC141:
 3542 0dc4 436F6F72 		.string	"Coordinates -- %d \n"
 3542      64696E61 
 3542      74657320 
 3542      2D2D2025 
 3542      64200A00 
 3543              	.LC142:
 3544 0dd8 41676169 		.string	"Again send the coordinates "
 3544      6E207365 
 3544      6E642074 
 3544      68652063 
 3544      6F6F7264 
 3545              	.LC143:
 3546 0df4 41636B31 		.string	"Ack1 -- %d %d %d %d \n"
 3546      202D2D20 
 3546      25642025 
 3546      64202564 
 3546      20256420 
 3547              	.LC144:
 3548 0e0a 25640A00 		.string	"%d\n"
 3549              	.LC145:
 3550 0e0e 41636B20 		.string	"Ack recived correct"
 3550      72656369 
 3550      76656420 
 3550      636F7272 
 3550      65637400 
 3551              	.LC146:
 3552 0e22 536C6565 		.string	"Sleeping 5 seconds"
 3552      70696E67 
 3552      20352073 
 3552      65636F6E 
 3552      647300
 3553 0e35 000000   		.align 8
 3554              	.LC147:
 3555 0e38 496E6372 		.string	"Increamenting chanr to %d chanw to %d\n"
 3555      65616D65 
 3555      6E74696E 
 3555      67206368 
 3555      616E7220 
 3556              	.LC148:
 3557 0e5f 4920616D 		.string	"I am in state 2"
 3557      20696E20 
 3557      73746174 
 3557      65203200 
 3558              	.LC149:
 3559 0e6f 53656E74 		.string	"Sent Ack2  %d %d %d %d \n"
 3559      2041636B 
 3559      32202025 
 3559      64202564 
 3559      20256420 
 3560              	.LC150:
 3561 0e88 66697273 		.string	"first 32 -- %d %d %d %d \n"
 3561      74203332 
 3561      202D2D20 
 3561      25642025 
 3561      64202564 
 3562              	.LC151:
 3563 0ea2 6E657874 		.string	"next 32 -- %d %d %d %d \n"
 3563      20333220 
 3563      2D2D2025 
 3563      64202564 
 3563      20256420 
 3564              	.LC152:
 3565 0ebb 73686974 		.string	"shits -- %d %d %d %d \n"
 3565      73202D2D 
 3565      20256420 
 3565      25642025 
 3565      64202564 
 3566              	.LC153:
 3567 0ed2 55706461 		.string	"Updating csv with %d \n"
 3567      74696E67 
 3567      20637376 
 3567      20776974 
 3567      68202564 
 3568              	.LC154:
 3569 0ee9 25730A00 		.string	"%s\n"
 3570              		.text
 3571              		.globl	main
 3573              	main:
 3574              	.LFB20:
 829:main.c        **** 
 830:main.c        **** static const char *nibbles[] = {
 831:main.c        **** 	"0000",  // '0'
 832:main.c        **** 	"0001",  // '1'
 833:main.c        **** 	"0010",  // '2'
 834:main.c        **** 	"0011",  // '3'
 835:main.c        **** 	"0100",  // '4'
 836:main.c        **** 	"0101",  // '5'
 837:main.c        **** 	"0110",  // '6'
 838:main.c        **** 	"0111",  // '7'
 839:main.c        **** 	"1000",  // '8'
 840:main.c        **** 	"1001",  // '9'
 841:main.c        **** 
 842:main.c        **** 	"XXXX",  // ':'
 843:main.c        **** 	"XXXX",  // ';'
 844:main.c        **** 	"XXXX",  // '<'
 845:main.c        **** 	"XXXX",  // '='
 846:main.c        **** 	"XXXX",  // '>'
 847:main.c        **** 	"XXXX",  // '?'
 848:main.c        **** 	"XXXX",  // '@'
 849:main.c        **** 
 850:main.c        **** 	"1010",  // 'A'
 851:main.c        **** 	"1011",  // 'B'
 852:main.c        **** 	"1100",  // 'C'
 853:main.c        **** 	"1101",  // 'D'
 854:main.c        **** 	"1110",  // 'E'
 855:main.c        **** 	"1111"   // 'F'
 856:main.c        **** };
 857:main.c        **** 
 858:main.c        **** int main(int argc, char *argv[]) {
 3575              		.loc 1 858 0
 3576              		.cfi_startproc
 3577 24de 55       		pushq	%rbp
 3578              		.cfi_def_cfa_offset 16
 3579              		.cfi_offset 6, -16
 3580 24df 4889E5   		movq	%rsp, %rbp
 3581              		.cfi_def_cfa_register 6
 3582 24e2 53       		pushq	%rbx
 3583 24e3 4881ECA8 		subq	$680, %rsp
 3583      020000
 3584              		.cfi_offset 3, -24
 3585 24ea 89BD5CFD 		movl	%edi, -676(%rbp)
 3585      FFFF
 3586 24f0 4889B550 		movq	%rsi, -688(%rbp)
 3586      FDFFFF
 3587              		.loc 1 858 0
 3588 24f7 64488B04 		movq	%fs:40, %rax
 3588      25280000 
 3588      00
 3589 2500 488945E8 		movq	%rax, -24(%rbp)
 3590 2504 31C0     		xorl	%eax, %eax
 859:main.c        **** 	// unsigned  input[4]={1,2,3,4},out[4];
 860:main.c        **** 	// encrypt(input,out);
 861:main.c        **** 	// uint8 kk[4];
 862:main.c        **** 	// unsignedtouint8(out,kk,0,4);
 863:main.c        **** 	// for(int i=0;i<4;i++)printf("%d\n",kk[i] );
 864:main.c        **** 
 865:main.c        **** 
 866:main.c        **** 
 867:main.c        **** 
 868:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, pStatus;
 3591              		.loc 1 868 0
 3592 2506 C78578FD 		movl	$0, -648(%rbp)
 3592      FFFF0000 
 3592      0000
 869:main.c        **** 	struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product ID (
 3593              		.loc 1 869 0
 3594 2510 B9000000 		movl	$.LC43, %ecx
 3594      00
 3595 2515 BA000000 		movl	$.LC44, %edx
 3595      00
 3596 251a BE000000 		movl	$.LC45, %esi
 3596      00
 3597 251f BF000000 		movl	$.LC46, %edi
 3597      00
 3598 2524 E8000000 		call	arg_str0
 3598      00
 3599 2529 488985C8 		movq	%rax, -568(%rbp)
 3599      FDFFFF
 870:main.c        **** 	struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID (e
 3600              		.loc 1 870 0
 3601 2530 B9000000 		movl	$.LC47, %ecx
 3601      00
 3602 2535 BA000000 		movl	$.LC48, %edx
 3602      00
 3603 253a BE000000 		movl	$.LC49, %esi
 3603      00
 3604 253f BF000000 		movl	$.LC50, %edi
 3604      00
 3605 2544 E8000000 		call	arg_str1
 3605      00
 3606 2549 488985D0 		movq	%rax, -560(%rbp)
 3606      FDFFFF
 871:main.c        **** 	struct arg_str *fwOpt = arg_str0("f", "fw", "<firmware.hex>", "        firmware to RAM-load (or us
 3607              		.loc 1 871 0
 3608 2550 B9000000 		movl	$.LC51, %ecx
 3608      00
 3609 2555 BA000000 		movl	$.LC52, %edx
 3609      00
 3610 255a BE000000 		movl	$.LC53, %esi
 3610      00
 3611 255f BF000000 		movl	$.LC54, %edi
 3611      00
 3612 2564 E8000000 		call	arg_str0
 3612      00
 3613 2569 488985D8 		movq	%rax, -552(%rbp)
 3613      FDFFFF
 872:main.c        **** 	struct arg_str *portOpt = arg_str0("d", "ports", "<bitCfg[,bitCfg]*>", " read/write digital ports 
 3614              		.loc 1 872 0
 3615 2570 B9000000 		movl	$.LC55, %ecx
 3615      00
 3616 2575 BA000000 		movl	$.LC56, %edx
 3616      00
 3617 257a BE000000 		movl	$.LC57, %esi
 3617      00
 3618 257f BF000000 		movl	$.LC58, %edi
 3618      00
 3619 2584 E8000000 		call	arg_str0
 3619      00
 3620 2589 488985E0 		movq	%rax, -544(%rbp)
 3620      FDFFFF
 873:main.c        **** 	struct arg_str *queryOpt = arg_str0("q", "query", "<jtagBits>", "         query the JTAG chain");
 3621              		.loc 1 873 0
 3622 2590 B9000000 		movl	$.LC59, %ecx
 3622      00
 3623 2595 BA000000 		movl	$.LC60, %edx
 3623      00
 3624 259a BE000000 		movl	$.LC61, %esi
 3624      00
 3625 259f BF000000 		movl	$.LC62, %edi
 3625      00
 3626 25a4 E8000000 		call	arg_str0
 3626      00
 3627 25a9 488985E8 		movq	%rax, -536(%rbp)
 3627      FDFFFF
 874:main.c        **** 	struct arg_str *progOpt = arg_str0("p", "program", "<config>", "         program a device");
 3628              		.loc 1 874 0
 3629 25b0 B9000000 		movl	$.LC63, %ecx
 3629      00
 3630 25b5 BA000000 		movl	$.LC64, %edx
 3630      00
 3631 25ba BE000000 		movl	$.LC65, %esi
 3631      00
 3632 25bf BF000000 		movl	$.LC66, %edi
 3632      00
 3633 25c4 E8000000 		call	arg_str0
 3633      00
 3634 25c9 488985F0 		movq	%rax, -528(%rbp)
 3634      FDFFFF
 875:main.c        **** 	struct arg_uint *conOpt = arg_uint0("c", "conduit", "<conduit>", "        which comm conduit to ch
 3635              		.loc 1 875 0
 3636 25d0 B9000000 		movl	$.LC67, %ecx
 3636      00
 3637 25d5 BA000000 		movl	$.LC68, %edx
 3637      00
 3638 25da BE000000 		movl	$.LC69, %esi
 3638      00
 3639 25df BF000000 		movl	$.LC70, %edi
 3639      00
 3640 25e4 E8000000 		call	arg_uint0
 3640      00
 3641 25e9 488985F8 		movq	%rax, -520(%rbp)
 3641      FDFFFF
 876:main.c        **** 	struct arg_str *actOpt = arg_str0("a", "action", "<actionString>", "    a series of CommFPGA actio
 3642              		.loc 1 876 0
 3643 25f0 B9000000 		movl	$.LC71, %ecx
 3643      00
 3644 25f5 BA000000 		movl	$.LC72, %edx
 3644      00
 3645 25fa BE000000 		movl	$.LC73, %esi
 3645      00
 3646 25ff BF000000 		movl	$.LC74, %edi
 3646      00
 3647 2604 E8000000 		call	arg_str0
 3647      00
 3648 2609 48898500 		movq	%rax, -512(%rbp)
 3648      FEFFFF
 877:main.c        **** 	struct arg_lit *shellOpt  = arg_lit0("s", "shell", "                    start up an interactive Co
 3649              		.loc 1 877 0
 3650 2610 BA000000 		movl	$.LC75, %edx
 3650      00
 3651 2615 BE000000 		movl	$.LC76, %esi
 3651      00
 3652 261a BF000000 		movl	$.LC77, %edi
 3652      00
 3653 261f E8000000 		call	arg_lit0
 3653      00
 3654 2624 48898508 		movq	%rax, -504(%rbp)
 3654      FEFFFF
 878:main.c        **** 	struct arg_lit *benOpt  = arg_lit0("b", "benchmark", "                enable benchmarking & checks
 3655              		.loc 1 878 0
 3656 262b BA000000 		movl	$.LC78, %edx
 3656      00
 3657 2630 BE000000 		movl	$.LC79, %esi
 3657      00
 3658 2635 BF000000 		movl	$.LC80, %edi
 3658      00
 3659 263a E8000000 		call	arg_lit0
 3659      00
 3660 263f 48898510 		movq	%rax, -496(%rbp)
 3660      FEFFFF
 879:main.c        **** 	struct arg_lit *rstOpt  = arg_lit0("r", "reset", "                    reset the bulk endpoints");
 3661              		.loc 1 879 0
 3662 2646 BA000000 		movl	$.LC81, %edx
 3662      00
 3663 264b BE000000 		movl	$.LC82, %esi
 3663      00
 3664 2650 BF000000 		movl	$.LC0, %edi
 3664      00
 3665 2655 E8000000 		call	arg_lit0
 3665      00
 3666 265a 48898518 		movq	%rax, -488(%rbp)
 3666      FEFFFF
 880:main.c        **** 	struct arg_str *dumpOpt = arg_str0("l", "dumploop", "<ch:file.bin>", "   write data from channel c
 3667              		.loc 1 880 0
 3668 2661 B9000000 		movl	$.LC83, %ecx
 3668      00
 3669 2666 BA000000 		movl	$.LC84, %edx
 3669      00
 3670 266b BE000000 		movl	$.LC85, %esi
 3670      00
 3671 2670 BF000000 		movl	$.LC86, %edi
 3671      00
 3672 2675 E8000000 		call	arg_str0
 3672      00
 3673 267a 48898520 		movq	%rax, -480(%rbp)
 3673      FEFFFF
 881:main.c        **** 	struct arg_lit *helpOpt  = arg_lit0("h", "help", "                     print this help and exit");
 3674              		.loc 1 881 0
 3675 2681 BA000000 		movl	$.LC87, %edx
 3675      00
 3676 2686 BE000000 		movl	$.LC88, %esi
 3676      00
 3677 268b BF000000 		movl	$.LC89, %edi
 3677      00
 3678 2690 E8000000 		call	arg_lit0
 3678      00
 3679 2695 48898528 		movq	%rax, -472(%rbp)
 3679      FEFFFF
 882:main.c        **** 	struct arg_str *eepromOpt  = arg_str0(NULL, "eeprom", "<std|fw.hex|fw.iic>", "   write firmware to
 3680              		.loc 1 882 0
 3681 269c B9000000 		movl	$.LC90, %ecx
 3681      00
 3682 26a1 BA000000 		movl	$.LC91, %edx
 3682      00
 3683 26a6 BE000000 		movl	$.LC92, %esi
 3683      00
 3684 26ab BF000000 		movl	$0, %edi
 3684      00
 3685 26b0 E8000000 		call	arg_str0
 3685      00
 3686 26b5 48898530 		movq	%rax, -464(%rbp)
 3686      FEFFFF
 883:main.c        **** 	struct arg_str *backupOpt  = arg_str0(NULL, "backup", "<kbitSize:fw.iic>", "     backup FX2's EEPR
 3687              		.loc 1 883 0
 3688 26bc B9000000 		movl	$.LC93, %ecx
 3688      00
 3689 26c1 BA000000 		movl	$.LC94, %edx
 3689      00
 3690 26c6 BE000000 		movl	$.LC95, %esi
 3690      00
 3691 26cb BF000000 		movl	$0, %edi
 3691      00
 3692 26d0 E8000000 		call	arg_str0
 3692      00
 3693 26d5 48898538 		movq	%rax, -456(%rbp)
 3693      FEFFFF
 884:main.c        **** 	struct arg_end *endOpt   = arg_end(20);
 3694              		.loc 1 884 0
 3695 26dc BF140000 		movl	$20, %edi
 3695      00
 3696 26e1 E8000000 		call	arg_end
 3696      00
 3697 26e6 48898540 		movq	%rax, -448(%rbp)
 3697      FEFFFF
 885:main.c        **** 	struct arg_lit *project = arg_lit0("z","project","		command for the project");
 3698              		.loc 1 885 0
 3699 26ed BA000000 		movl	$.LC96, %edx
 3699      00
 3700 26f2 BE000000 		movl	$.LC97, %esi
 3700      00
 3701 26f7 BF000000 		movl	$.LC98, %edi
 3701      00
 3702 26fc E8000000 		call	arg_lit0
 3702      00
 3703 2701 48898548 		movq	%rax, -440(%rbp)
 3703      FEFFFF
 886:main.c        **** 	void *argTable[] = {
 3704              		.loc 1 886 0
 3705 2708 488B85C8 		movq	-568(%rbp), %rax
 3705      FDFFFF
 3706 270f 48898520 		movq	%rax, -224(%rbp)
 3706      FFFFFF
 3707 2716 488B85D0 		movq	-560(%rbp), %rax
 3707      FDFFFF
 3708 271d 48898528 		movq	%rax, -216(%rbp)
 3708      FFFFFF
 3709 2724 488B85D8 		movq	-552(%rbp), %rax
 3709      FDFFFF
 3710 272b 48898530 		movq	%rax, -208(%rbp)
 3710      FFFFFF
 3711 2732 488B85E0 		movq	-544(%rbp), %rax
 3711      FDFFFF
 3712 2739 48898538 		movq	%rax, -200(%rbp)
 3712      FFFFFF
 3713 2740 488B85E8 		movq	-536(%rbp), %rax
 3713      FDFFFF
 3714 2747 48898540 		movq	%rax, -192(%rbp)
 3714      FFFFFF
 3715 274e 488B85F0 		movq	-528(%rbp), %rax
 3715      FDFFFF
 3716 2755 48898548 		movq	%rax, -184(%rbp)
 3716      FFFFFF
 3717 275c 488B85F8 		movq	-520(%rbp), %rax
 3717      FDFFFF
 3718 2763 48898550 		movq	%rax, -176(%rbp)
 3718      FFFFFF
 3719 276a 488B8500 		movq	-512(%rbp), %rax
 3719      FEFFFF
 3720 2771 48898558 		movq	%rax, -168(%rbp)
 3720      FFFFFF
 3721 2778 488B8508 		movq	-504(%rbp), %rax
 3721      FEFFFF
 3722 277f 48898560 		movq	%rax, -160(%rbp)
 3722      FFFFFF
 3723 2786 488B8510 		movq	-496(%rbp), %rax
 3723      FEFFFF
 3724 278d 48898568 		movq	%rax, -152(%rbp)
 3724      FFFFFF
 3725 2794 488B8518 		movq	-488(%rbp), %rax
 3725      FEFFFF
 3726 279b 48898570 		movq	%rax, -144(%rbp)
 3726      FFFFFF
 3727 27a2 488B8520 		movq	-480(%rbp), %rax
 3727      FEFFFF
 3728 27a9 48898578 		movq	%rax, -136(%rbp)
 3728      FFFFFF
 3729 27b0 488B8528 		movq	-472(%rbp), %rax
 3729      FEFFFF
 3730 27b7 48894580 		movq	%rax, -128(%rbp)
 3731 27bb 488B8530 		movq	-464(%rbp), %rax
 3731      FEFFFF
 3732 27c2 48894588 		movq	%rax, -120(%rbp)
 3733 27c6 488B8538 		movq	-456(%rbp), %rax
 3733      FEFFFF
 3734 27cd 48894590 		movq	%rax, -112(%rbp)
 3735 27d1 488B8548 		movq	-440(%rbp), %rax
 3735      FEFFFF
 3736 27d8 48894598 		movq	%rax, -104(%rbp)
 3737 27dc 488B8540 		movq	-448(%rbp), %rax
 3737      FEFFFF
 3738 27e3 488945A0 		movq	%rax, -96(%rbp)
 887:main.c        **** 		ivpOpt, vpOpt, fwOpt, portOpt, queryOpt, progOpt, conOpt, actOpt,
 888:main.c        **** 		shellOpt, benOpt, rstOpt, dumpOpt, helpOpt, eepromOpt, backupOpt, project,endOpt
 889:main.c        **** 	};
 890:main.c        **** 	const char *progName = "flcli";
 3739              		.loc 1 890 0
 3740 27e7 48C78550 		movq	$.LC99, -432(%rbp)
 3740      FEFFFF00 
 3740      000000
 891:main.c        **** 	int numErrors;
 892:main.c        **** 	struct FLContext *handle = NULL;
 3741              		.loc 1 892 0
 3742 27f2 48C785A0 		movq	$0, -608(%rbp)
 3742      FDFFFF00 
 3742      000000
 893:main.c        **** 	FLStatus fStatus;
 894:main.c        **** 	const char *error = NULL;
 3743              		.loc 1 894 0
 3744 27fd 48C785A8 		movq	$0, -600(%rbp)
 3744      FDFFFF00 
 3744      000000
 895:main.c        **** 	const char *ivp = NULL;
 3745              		.loc 1 895 0
 3746 2808 48C78558 		movq	$0, -424(%rbp)
 3746      FEFFFF00 
 3746      000000
 896:main.c        **** 	const char *vp = NULL;
 3747              		.loc 1 896 0
 3748 2813 48C78560 		movq	$0, -416(%rbp)
 3748      FEFFFF00 
 3748      000000
 897:main.c        **** 	bool isNeroCapable, isCommCapable;
 898:main.c        **** 	uint32 numDevices, scanChain[16], i;
 899:main.c        **** 	const char *line = NULL;
 3749              		.loc 1 899 0
 3750 281e 48C785C0 		movq	$0, -576(%rbp)
 3750      FDFFFF00 
 3750      000000
 900:main.c        **** 	uint8 conduit = 0x01;
 3751              		.loc 1 900 0
 3752 2829 C6856BFD 		movb	$1, -661(%rbp)
 3752      FFFF01
 901:main.c        **** 
 902:main.c        **** 	if ( arg_nullcheck(argTable) != 0 ) {
 3753              		.loc 1 902 0
 3754 2830 488D8520 		leaq	-224(%rbp), %rax
 3754      FFFFFF
 3755 2837 4889C7   		movq	%rax, %rdi
 3756 283a E8000000 		call	arg_nullcheck
 3756      00
 3757 283f 85C0     		testl	%eax, %eax
 3758 2841 742F     		je	.L197
 903:main.c        **** 		fprintf(stderr, "%s: insufficient memory\n", progName);
 3759              		.loc 1 903 0
 3760 2843 488B0500 		movq	stderr(%rip), %rax
 3760      000000
 3761 284a 488B9550 		movq	-432(%rbp), %rdx
 3761      FEFFFF
 3762 2851 BE000000 		movl	$.LC100, %esi
 3762      00
 3763 2856 4889C7   		movq	%rax, %rdi
 3764 2859 B8000000 		movl	$0, %eax
 3764      00
 3765 285e E8000000 		call	fprintf
 3765      00
 904:main.c        **** 		FAIL(1, cleanup);
 3766              		.loc 1 904 0
 3767 2863 C78578FD 		movl	$1, -648(%rbp)
 3767      FFFF0100 
 3767      0000
 3768 286d E9331A00 		jmp	.L198
 3768      00
 3769              	.L197:
 905:main.c        **** 	}
 906:main.c        **** 
 907:main.c        **** 	numErrors = arg_parse(argc, argv, argTable);
 3770              		.loc 1 907 0
 3771 2872 488D9520 		leaq	-224(%rbp), %rdx
 3771      FFFFFF
 3772 2879 488B8D50 		movq	-688(%rbp), %rcx
 3772      FDFFFF
 3773 2880 8B855CFD 		movl	-676(%rbp), %eax
 3773      FFFF
 3774 2886 4889CE   		movq	%rcx, %rsi
 3775 2889 89C7     		movl	%eax, %edi
 3776 288b E8000000 		call	arg_parse
 3776      00
 3777 2890 898590FD 		movl	%eax, -624(%rbp)
 3777      FFFF
 908:main.c        **** 
 909:main.c        **** 	if ( helpOpt->count > 0 ) {
 3778              		.loc 1 909 0
 3779 2896 488B8528 		movq	-472(%rbp), %rax
 3779      FEFFFF
 3780 289d 8B4060   		movl	96(%rax), %eax
 3781 28a0 85C0     		testl	%eax, %eax
 3782 28a2 7E6E     		jle	.L199
 910:main.c        **** 		printf("FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s", p
 3783              		.loc 1 910 0
 3784 28a4 488B8550 		movq	-432(%rbp), %rax
 3784      FEFFFF
 3785 28ab 4889C6   		movq	%rax, %rsi
 3786 28ae BF000000 		movl	$.LC101, %edi
 3786      00
 3787 28b3 B8000000 		movl	$0, %eax
 3787      00
 3788 28b8 E8000000 		call	printf
 3788      00
 911:main.c        **** 		arg_print_syntax(stdout, argTable, "\n");
 3789              		.loc 1 911 0
 3790 28bd 488B0500 		movq	stdout(%rip), %rax
 3790      000000
 3791 28c4 488D8D20 		leaq	-224(%rbp), %rcx
 3791      FFFFFF
 3792 28cb BA000000 		movl	$.LC102, %edx
 3792      00
 3793 28d0 4889CE   		movq	%rcx, %rsi
 3794 28d3 4889C7   		movq	%rax, %rdi
 3795 28d6 E8000000 		call	arg_print_syntax
 3795      00
 912:main.c        **** 		printf("\nInteract with an FPGALink device.\n\n");
 3796              		.loc 1 912 0
 3797 28db BF000000 		movl	$.LC103, %edi
 3797      00
 3798 28e0 E8000000 		call	puts
 3798      00
 913:main.c        **** 		arg_print_glossary(stdout, argTable,"  %-10s %s\n");
 3799              		.loc 1 913 0
 3800 28e5 488B0500 		movq	stdout(%rip), %rax
 3800      000000
 3801 28ec 488D8D20 		leaq	-224(%rbp), %rcx
 3801      FFFFFF
 3802 28f3 BA000000 		movl	$.LC104, %edx
 3802      00
 3803 28f8 4889CE   		movq	%rcx, %rsi
 3804 28fb 4889C7   		movq	%rax, %rdi
 3805 28fe E8000000 		call	arg_print_glossary
 3805      00
 914:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
 3806              		.loc 1 914 0
 3807 2903 C78578FD 		movl	$0, -648(%rbp)
 3807      FFFF0000 
 3807      0000
 3808 290d E9931900 		jmp	.L198
 3808      00
 3809              	.L199:
 915:main.c        **** 	}
 916:main.c        **** 
 917:main.c        **** 	if ( numErrors > 0 ) {
 3810              		.loc 1 917 0
 3811 2912 83BD90FD 		cmpl	$0, -624(%rbp)
 3811      FFFF00
 3812 2919 7E4F     		jle	.L200
 918:main.c        **** 		arg_print_errors(stdout, endOpt, progName);
 3813              		.loc 1 918 0
 3814 291b 488B0500 		movq	stdout(%rip), %rax
 3814      000000
 3815 2922 488B9550 		movq	-432(%rbp), %rdx
 3815      FEFFFF
 3816 2929 488B8D40 		movq	-448(%rbp), %rcx
 3816      FEFFFF
 3817 2930 4889CE   		movq	%rcx, %rsi
 3818 2933 4889C7   		movq	%rax, %rdi
 3819 2936 E8000000 		call	arg_print_errors
 3819      00
 919:main.c        **** 		fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 3820              		.loc 1 919 0
 3821 293b 488B0500 		movq	stderr(%rip), %rax
 3821      000000
 3822 2942 488B9550 		movq	-432(%rbp), %rdx
 3822      FEFFFF
 3823 2949 BE000000 		movl	$.LC105, %esi
 3823      00
 3824 294e 4889C7   		movq	%rax, %rdi
 3825 2951 B8000000 		movl	$0, %eax
 3825      00
 3826 2956 E8000000 		call	fprintf
 3826      00
 920:main.c        **** 		FAIL(FLP_ARGS, cleanup);
 3827              		.loc 1 920 0
 3828 295b C78578FD 		movl	$12, -648(%rbp)
 3828      FFFF0C00 
 3828      0000
 3829 2965 E93B1900 		jmp	.L198
 3829      00
 3830              	.L200:
 921:main.c        **** 	}
 922:main.c        **** 
 923:main.c        **** 	fStatus = flInitialise(0, &error);
 3831              		.loc 1 923 0
 3832 296a 488D85A8 		leaq	-600(%rbp), %rax
 3832      FDFFFF
 3833 2971 4889C6   		movq	%rax, %rsi
 3834 2974 BF000000 		movl	$0, %edi
 3834      00
 3835 2979 E8000000 		call	flInitialise
 3835      00
 3836 297e 89857CFD 		movl	%eax, -644(%rbp)
 3836      FFFF
 924:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3837              		.loc 1 924 0
 3838 2984 83BD7CFD 		cmpl	$0, -644(%rbp)
 3838      FFFF00
 3839 298b 740F     		je	.L201
 3840              		.loc 1 924 0 is_stmt 0 discriminator 1
 3841 298d C78578FD 		movl	$1, -648(%rbp)
 3841      FFFF0100 
 3841      0000
 3842 2997 E9091900 		jmp	.L198
 3842      00
 3843              	.L201:
 925:main.c        **** 
 926:main.c        **** 	vp = vpOpt->sval[0];
 3844              		.loc 1 926 0 is_stmt 1
 3845 299c 488B85D0 		movq	-560(%rbp), %rax
 3845      FDFFFF
 3846 29a3 488B4068 		movq	104(%rax), %rax
 3847 29a7 488B00   		movq	(%rax), %rax
 3848 29aa 48898560 		movq	%rax, -416(%rbp)
 3848      FEFFFF
 927:main.c        **** 
 928:main.c        **** 	printf("Attempting to open connection to FPGALink device %s...\n", vp);
 3849              		.loc 1 928 0
 3850 29b1 488B8560 		movq	-416(%rbp), %rax
 3850      FEFFFF
 3851 29b8 4889C6   		movq	%rax, %rsi
 3852 29bb BF000000 		movl	$.LC106, %edi
 3852      00
 3853 29c0 B8000000 		movl	$0, %eax
 3853      00
 3854 29c5 E8000000 		call	printf
 3854      00
 929:main.c        **** 	fStatus = flOpen(vp, &handle, NULL);
 3855              		.loc 1 929 0
 3856 29ca 488D8DA0 		leaq	-608(%rbp), %rcx
 3856      FDFFFF
 3857 29d1 488B8560 		movq	-416(%rbp), %rax
 3857      FEFFFF
 3858 29d8 BA000000 		movl	$0, %edx
 3858      00
 3859 29dd 4889CE   		movq	%rcx, %rsi
 3860 29e0 4889C7   		movq	%rax, %rdi
 3861 29e3 E8000000 		call	flOpen
 3861      00
 3862 29e8 89857CFD 		movl	%eax, -644(%rbp)
 3862      FFFF
 930:main.c        **** 	if ( fStatus ) {
 3863              		.loc 1 930 0
 3864 29ee 83BD7CFD 		cmpl	$0, -644(%rbp)
 3864      FFFF00
 3865 29f5 0F842502 		je	.L202
 3865      0000
 931:main.c        **** 		if ( ivpOpt->count ) {
 3866              		.loc 1 931 0
 3867 29fb 488B85C8 		movq	-568(%rbp), %rax
 3867      FDFFFF
 3868 2a02 8B4060   		movl	96(%rax), %eax
 3869 2a05 85C0     		testl	%eax, %eax
 3870 2a07 0F84E401 		je	.L203
 3870      0000
 3871              	.LBB32:
 932:main.c        **** 			int count = 60;
 3872              		.loc 1 932 0
 3873 2a0d C78584FD 		movl	$60, -636(%rbp)
 3873      FFFF3C00 
 3873      0000
 933:main.c        **** 			uint8 flag;
 934:main.c        **** 			ivp = ivpOpt->sval[0];
 3874              		.loc 1 934 0
 3875 2a17 488B85C8 		movq	-568(%rbp), %rax
 3875      FDFFFF
 3876 2a1e 488B4068 		movq	104(%rax), %rax
 3877 2a22 488B00   		movq	(%rax), %rax
 3878 2a25 48898558 		movq	%rax, -424(%rbp)
 3878      FEFFFF
 935:main.c        **** 			printf("Loading firmware into %s...\n", ivp);
 3879              		.loc 1 935 0
 3880 2a2c 488B8558 		movq	-424(%rbp), %rax
 3880      FEFFFF
 3881 2a33 4889C6   		movq	%rax, %rsi
 3882 2a36 BF000000 		movl	$.LC107, %edi
 3882      00
 3883 2a3b B8000000 		movl	$0, %eax
 3883      00
 3884 2a40 E8000000 		call	printf
 3884      00
 936:main.c        **** 			if ( fwOpt->count ) {
 3885              		.loc 1 936 0
 3886 2a45 488B85D8 		movq	-552(%rbp), %rax
 3886      FDFFFF
 3887 2a4c 8B4060   		movl	96(%rax), %eax
 3888 2a4f 85C0     		testl	%eax, %eax
 3889 2a51 742F     		je	.L204
 937:main.c        **** 				fStatus = flLoadCustomFirmware(ivp, fwOpt->sval[0], &error);
 3890              		.loc 1 937 0
 3891 2a53 488B85D8 		movq	-552(%rbp), %rax
 3891      FDFFFF
 3892 2a5a 488B4068 		movq	104(%rax), %rax
 3893 2a5e 488B08   		movq	(%rax), %rcx
 3894 2a61 488D95A8 		leaq	-600(%rbp), %rdx
 3894      FDFFFF
 3895 2a68 488B8558 		movq	-424(%rbp), %rax
 3895      FEFFFF
 3896 2a6f 4889CE   		movq	%rcx, %rsi
 3897 2a72 4889C7   		movq	%rax, %rdi
 3898 2a75 E8000000 		call	flLoadCustomFirmware
 3898      00
 3899 2a7a 89857CFD 		movl	%eax, -644(%rbp)
 3899      FFFF
 3900 2a80 EB26     		jmp	.L205
 3901              	.L204:
 938:main.c        **** 			} else {
 939:main.c        **** 				fStatus = flLoadStandardFirmware(ivp, vp, &error);
 3902              		.loc 1 939 0
 3903 2a82 488D95A8 		leaq	-600(%rbp), %rdx
 3903      FDFFFF
 3904 2a89 488B8D60 		movq	-416(%rbp), %rcx
 3904      FEFFFF
 3905 2a90 488B8558 		movq	-424(%rbp), %rax
 3905      FEFFFF
 3906 2a97 4889CE   		movq	%rcx, %rsi
 3907 2a9a 4889C7   		movq	%rax, %rdi
 3908 2a9d E8000000 		call	flLoadStandardFirmware
 3908      00
 3909 2aa2 89857CFD 		movl	%eax, -644(%rbp)
 3909      FFFF
 3910              	.L205:
 940:main.c        **** 			}
 941:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3911              		.loc 1 941 0
 3912 2aa8 83BD7CFD 		cmpl	$0, -644(%rbp)
 3912      FFFF00
 3913 2aaf 740F     		je	.L206
 3914              		.loc 1 941 0 is_stmt 0 discriminator 1
 3915 2ab1 C78578FD 		movl	$1, -648(%rbp)
 3915      FFFF0100 
 3915      0000
 3916 2abb E9E51700 		jmp	.L198
 3916      00
 3917              	.L206:
 942:main.c        **** 			
 943:main.c        **** 			printf("Awaiting renumeration");
 3918              		.loc 1 943 0 is_stmt 1
 3919 2ac0 BF000000 		movl	$.LC108, %edi
 3919      00
 3920 2ac5 B8000000 		movl	$0, %eax
 3920      00
 3921 2aca E8000000 		call	printf
 3921      00
 944:main.c        **** 			flSleep(1000);
 3922              		.loc 1 944 0
 3923 2acf BFE80300 		movl	$1000, %edi
 3923      00
 3924 2ad4 E8000000 		call	flSleep
 3924      00
 3925              	.L210:
 945:main.c        **** 			do {
 946:main.c        **** 				printf(".");
 3926              		.loc 1 946 0
 3927 2ad9 BF2E0000 		movl	$46, %edi
 3927      00
 3928 2ade E8000000 		call	putchar
 3928      00
 947:main.c        **** 				fflush(stdout);
 3929              		.loc 1 947 0
 3930 2ae3 488B0500 		movq	stdout(%rip), %rax
 3930      000000
 3931 2aea 4889C7   		movq	%rax, %rdi
 3932 2aed E8000000 		call	fflush
 3932      00
 948:main.c        **** 				fStatus = flIsDeviceAvailable(vp, &flag, &error);
 3933              		.loc 1 948 0
 3934 2af2 488D95A8 		leaq	-600(%rbp), %rdx
 3934      FDFFFF
 3935 2af9 488D8DB8 		leaq	-584(%rbp), %rcx
 3935      FDFFFF
 3936 2b00 488B8560 		movq	-416(%rbp), %rax
 3936      FEFFFF
 3937 2b07 4889CE   		movq	%rcx, %rsi
 3938 2b0a 4889C7   		movq	%rax, %rdi
 3939 2b0d E8000000 		call	flIsDeviceAvailable
 3939      00
 3940 2b12 89857CFD 		movl	%eax, -644(%rbp)
 3940      FFFF
 949:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3941              		.loc 1 949 0
 3942 2b18 83BD7CFD 		cmpl	$0, -644(%rbp)
 3942      FFFF00
 3943 2b1f 740F     		je	.L208
 3944              		.loc 1 949 0 is_stmt 0 discriminator 1
 3945 2b21 C78578FD 		movl	$1, -648(%rbp)
 3945      FFFF0100 
 3945      0000
 3946 2b2b E9751700 		jmp	.L198
 3946      00
 3947              	.L208:
 950:main.c        **** 				flSleep(250);
 3948              		.loc 1 950 0 is_stmt 1
 3949 2b30 BFFA0000 		movl	$250, %edi
 3949      00
 3950 2b35 E8000000 		call	flSleep
 3950      00
 951:main.c        **** 				count--;
 3951              		.loc 1 951 0
 3952 2b3a 83AD84FD 		subl	$1, -636(%rbp)
 3952      FFFF01
 952:main.c        **** 			} while ( !flag && count );
 3953              		.loc 1 952 0
 3954 2b41 0FB685B8 		movzbl	-584(%rbp), %eax
 3954      FDFFFF
 3955 2b48 84C0     		testb	%al, %al
 3956 2b4a 7509     		jne	.L209
 3957              		.loc 1 952 0 is_stmt 0 discriminator 1
 3958 2b4c 83BD84FD 		cmpl	$0, -636(%rbp)
 3958      FFFF00
 3959 2b53 7584     		jne	.L210
 3960              	.L209:
 953:main.c        **** 			printf("\n");
 3961              		.loc 1 953 0 is_stmt 1
 3962 2b55 BF0A0000 		movl	$10, %edi
 3962      00
 3963 2b5a E8000000 		call	putchar
 3963      00
 954:main.c        **** 			if ( !flag ) {
 3964              		.loc 1 954 0
 3965 2b5f 0FB685B8 		movzbl	-584(%rbp), %eax
 3965      FDFFFF
 3966 2b66 84C0     		testb	%al, %al
 3967 2b68 752F     		jne	.L211
 955:main.c        **** 				fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 3968              		.loc 1 955 0
 3969 2b6a 488B0500 		movq	stderr(%rip), %rax
 3969      000000
 3970 2b71 488B9560 		movq	-416(%rbp), %rdx
 3970      FEFFFF
 3971 2b78 BE000000 		movl	$.LC109, %esi
 3971      00
 3972 2b7d 4889C7   		movq	%rax, %rdi
 3973 2b80 B8000000 		movl	$0, %eax
 3973      00
 3974 2b85 E8000000 		call	fprintf
 3974      00
 956:main.c        **** 				FAIL(FLP_LIBERR, cleanup);
 3975              		.loc 1 956 0
 3976 2b8a C78578FD 		movl	$1, -648(%rbp)
 3976      FFFF0100 
 3976      0000
 3977 2b94 E90C1700 		jmp	.L198
 3977      00
 3978              	.L211:
 957:main.c        **** 			}
 958:main.c        **** 
 959:main.c        **** 			printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 3979              		.loc 1 959 0
 3980 2b99 488B8560 		movq	-416(%rbp), %rax
 3980      FEFFFF
 3981 2ba0 4889C6   		movq	%rax, %rsi
 3982 2ba3 BF000000 		movl	$.LC110, %edi
 3982      00
 3983 2ba8 B8000000 		movl	$0, %eax
 3983      00
 3984 2bad E8000000 		call	printf
 3984      00
 960:main.c        **** 			fStatus = flOpen(vp, &handle, &error);
 3985              		.loc 1 960 0
 3986 2bb2 488D95A8 		leaq	-600(%rbp), %rdx
 3986      FDFFFF
 3987 2bb9 488D8DA0 		leaq	-608(%rbp), %rcx
 3987      FDFFFF
 3988 2bc0 488B8560 		movq	-416(%rbp), %rax
 3988      FEFFFF
 3989 2bc7 4889CE   		movq	%rcx, %rsi
 3990 2bca 4889C7   		movq	%rax, %rdi
 3991 2bcd E8000000 		call	flOpen
 3991      00
 3992 2bd2 89857CFD 		movl	%eax, -644(%rbp)
 3992      FFFF
 961:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3993              		.loc 1 961 0
 3994 2bd8 83BD7CFD 		cmpl	$0, -644(%rbp)
 3994      FFFF00
 3995 2bdf 743F     		je	.L202
 3996              		.loc 1 961 0 is_stmt 0 discriminator 1
 3997 2be1 C78578FD 		movl	$1, -648(%rbp)
 3997      FFFF0100 
 3997      0000
 3998 2beb 90       		nop
 3999 2bec E9B41600 		jmp	.L198
 3999      00
 4000              	.L203:
 4001              	.LBE32:
 962:main.c        **** 		} else {
 963:main.c        **** 			fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was supplied\n", vp
 4002              		.loc 1 963 0 is_stmt 1
 4003 2bf1 488B0500 		movq	stderr(%rip), %rax
 4003      000000
 4004 2bf8 488B9560 		movq	-416(%rbp), %rdx
 4004      FEFFFF
 4005 2bff BE000000 		movl	$.LC111, %esi
 4005      00
 4006 2c04 4889C7   		movq	%rax, %rdi
 4007 2c07 B8000000 		movl	$0, %eax
 4007      00
 4008 2c0c E8000000 		call	fprintf
 4008      00
 964:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4009              		.loc 1 964 0
 4010 2c11 C78578FD 		movl	$12, -648(%rbp)
 4010      FFFF0C00 
 4010      0000
 4011 2c1b E9851600 		jmp	.L198
 4011      00
 4012              	.L202:
 965:main.c        **** 		}
 966:main.c        **** 	}
 967:main.c        **** 
 968:main.c        **** 	printf(
 4013              		.loc 1 968 0
 4014 2c20 488B85A0 		movq	-608(%rbp), %rax
 4014      FDFFFF
 4015 2c27 4889C7   		movq	%rax, %rdi
 4016 2c2a E8000000 		call	flGetFirmwareVersion
 4016      00
 4017 2c2f 89C3     		movl	%eax, %ebx
 969:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 970:main.c        **** 		vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 4018              		.loc 1 970 0
 4019 2c31 488B85A0 		movq	-608(%rbp), %rax
 4019      FDFFFF
 4020 2c38 4889C7   		movq	%rax, %rdi
 4021 2c3b E8000000 		call	flGetFirmwareID
 4021      00
 968:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 4022              		.loc 1 968 0
 4023 2c40 0FB7D0   		movzwl	%ax, %edx
 4024 2c43 488B8560 		movq	-416(%rbp), %rax
 4024      FEFFFF
 4025 2c4a 89D9     		movl	%ebx, %ecx
 4026 2c4c 4889C6   		movq	%rax, %rsi
 4027 2c4f BF000000 		movl	$.LC112, %edi
 4027      00
 4028 2c54 B8000000 		movl	$0, %eax
 4028      00
 4029 2c59 E8000000 		call	printf
 4029      00
 971:main.c        **** 	);
 972:main.c        **** 
 973:main.c        **** 	if ( eepromOpt->count ) {
 4030              		.loc 1 973 0
 4031 2c5e 488B8530 		movq	-464(%rbp), %rax
 4031      FEFFFF
 4032 2c65 8B4060   		movl	96(%rax), %eax
 4033 2c68 85C0     		testl	%eax, %eax
 4034 2c6a 0F84B600 		je	.L213
 4034      0000
 974:main.c        **** 		if ( !strcmp("std", eepromOpt->sval[0]) ) {
 4035              		.loc 1 974 0
 4036 2c70 488B8530 		movq	-464(%rbp), %rax
 4036      FEFFFF
 4037 2c77 488B4068 		movq	104(%rax), %rax
 4038 2c7b 488B00   		movq	(%rax), %rax
 4039 2c7e 4889C6   		movq	%rax, %rsi
 4040 2c81 BF000000 		movl	$.LC113, %edi
 4040      00
 4041 2c86 E8000000 		call	strcmp
 4041      00
 4042 2c8b 85C0     		testl	%eax, %eax
 4043 2c8d 7532     		jne	.L214
 975:main.c        **** 			printf("Writing the standard FPGALink firmware to the FX2's EEPROM...\n");
 4044              		.loc 1 975 0
 4045 2c8f BF000000 		movl	$.LC114, %edi
 4045      00
 4046 2c94 E8000000 		call	puts
 4046      00
 976:main.c        **** 			fStatus = flFlashStandardFirmware(handle, vp, &error);
 4047              		.loc 1 976 0
 4048 2c99 488B85A0 		movq	-608(%rbp), %rax
 4048      FDFFFF
 4049 2ca0 488D95A8 		leaq	-600(%rbp), %rdx
 4049      FDFFFF
 4050 2ca7 488B8D60 		movq	-416(%rbp), %rcx
 4050      FEFFFF
 4051 2cae 4889CE   		movq	%rcx, %rsi
 4052 2cb1 4889C7   		movq	%rax, %rdi
 4053 2cb4 E8000000 		call	flFlashStandardFirmware
 4053      00
 4054 2cb9 89857CFD 		movl	%eax, -644(%rbp)
 4054      FFFF
 4055 2cbf EB4D     		jmp	.L215
 4056              	.L214:
 977:main.c        **** 		} else {
 978:main.c        **** 			printf("Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n", eepromOpt->sval[0]);
 4057              		.loc 1 978 0
 4058 2cc1 488B8530 		movq	-464(%rbp), %rax
 4058      FEFFFF
 4059 2cc8 488B4068 		movq	104(%rax), %rax
 4060 2ccc 488B00   		movq	(%rax), %rax
 4061 2ccf 4889C6   		movq	%rax, %rsi
 4062 2cd2 BF000000 		movl	$.LC115, %edi
 4062      00
 4063 2cd7 B8000000 		movl	$0, %eax
 4063      00
 4064 2cdc E8000000 		call	printf
 4064      00
 979:main.c        **** 			fStatus = flFlashCustomFirmware(handle, eepromOpt->sval[0], &error);
 4065              		.loc 1 979 0
 4066 2ce1 488B8530 		movq	-464(%rbp), %rax
 4066      FEFFFF
 4067 2ce8 488B4068 		movq	104(%rax), %rax
 4068 2cec 488B08   		movq	(%rax), %rcx
 4069 2cef 488B85A0 		movq	-608(%rbp), %rax
 4069      FDFFFF
 4070 2cf6 488D95A8 		leaq	-600(%rbp), %rdx
 4070      FDFFFF
 4071 2cfd 4889CE   		movq	%rcx, %rsi
 4072 2d00 4889C7   		movq	%rax, %rdi
 4073 2d03 E8000000 		call	flFlashCustomFirmware
 4073      00
 4074 2d08 89857CFD 		movl	%eax, -644(%rbp)
 4074      FFFF
 4075              	.L215:
 980:main.c        **** 		}
 981:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4076              		.loc 1 981 0
 4077 2d0e 83BD7CFD 		cmpl	$0, -644(%rbp)
 4077      FFFF00
 4078 2d15 740F     		je	.L213
 4079              		.loc 1 981 0 is_stmt 0 discriminator 1
 4080 2d17 C78578FD 		movl	$1, -648(%rbp)
 4080      FFFF0100 
 4080      0000
 4081 2d21 E97F1500 		jmp	.L198
 4081      00
 4082              	.L213:
 982:main.c        **** 	}
 983:main.c        **** 
 984:main.c        **** 	if ( backupOpt->count ) {
 4083              		.loc 1 984 0 is_stmt 1
 4084 2d26 488B8538 		movq	-456(%rbp), %rax
 4084      FEFFFF
 4085 2d2d 8B4060   		movl	96(%rax), %eax
 4086 2d30 85C0     		testl	%eax, %eax
 4087 2d32 0F84DA00 		je	.L216
 4087      0000
 4088              	.LBB33:
 985:main.c        **** 		const char *fileName;
 986:main.c        **** 		const uint32 kbitSize = strtoul(backupOpt->sval[0], (char**)&fileName, 0);
 4089              		.loc 1 986 0
 4090 2d38 488B8538 		movq	-456(%rbp), %rax
 4090      FEFFFF
 4091 2d3f 488B4068 		movq	104(%rax), %rax
 4092 2d43 488B00   		movq	(%rax), %rax
 4093 2d46 488D8DB8 		leaq	-584(%rbp), %rcx
 4093      FDFFFF
 4094 2d4d BA000000 		movl	$0, %edx
 4094      00
 4095 2d52 4889CE   		movq	%rcx, %rsi
 4096 2d55 4889C7   		movq	%rax, %rdi
 4097 2d58 E8000000 		call	strtoul
 4097      00
 4098 2d5d 898594FD 		movl	%eax, -620(%rbp)
 4098      FFFF
 987:main.c        **** 		if ( *fileName != ':' ) {
 4099              		.loc 1 987 0
 4100 2d63 488B85B8 		movq	-584(%rbp), %rax
 4100      FDFFFF
 4101 2d6a 0FB600   		movzbl	(%rax), %eax
 4102 2d6d 3C3A     		cmpb	$58, %al
 4103 2d6f 742F     		je	.L217
 988:main.c        **** 			fprintf(stderr, "%s: invalid argument to option --backup=<kbitSize:fw.iic>\n", progName);
 4104              		.loc 1 988 0
 4105 2d71 488B0500 		movq	stderr(%rip), %rax
 4105      000000
 4106 2d78 488B9550 		movq	-432(%rbp), %rdx
 4106      FEFFFF
 4107 2d7f BE000000 		movl	$.LC116, %esi
 4107      00
 4108 2d84 4889C7   		movq	%rax, %rdi
 4109 2d87 B8000000 		movl	$0, %eax
 4109      00
 4110 2d8c E8000000 		call	fprintf
 4110      00
 989:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4111              		.loc 1 989 0
 4112 2d91 C78578FD 		movl	$12, -648(%rbp)
 4112      FFFF0C00 
 4112      0000
 4113 2d9b E9051500 		jmp	.L198
 4113      00
 4114              	.L217:
 990:main.c        **** 		}
 991:main.c        **** 		fileName++;
 4115              		.loc 1 991 0
 4116 2da0 488B85B8 		movq	-584(%rbp), %rax
 4116      FDFFFF
 4117 2da7 4883C001 		addq	$1, %rax
 4118 2dab 488985B8 		movq	%rax, -584(%rbp)
 4118      FDFFFF
 992:main.c        **** 		printf("Saving a backup of %d kbit from the FX2's EEPROM to %s...\n", kbitSize, fileName);
 4119              		.loc 1 992 0
 4120 2db2 488B95B8 		movq	-584(%rbp), %rdx
 4120      FDFFFF
 4121 2db9 8B8594FD 		movl	-620(%rbp), %eax
 4121      FFFF
 4122 2dbf 89C6     		movl	%eax, %esi
 4123 2dc1 BF000000 		movl	$.LC117, %edi
 4123      00
 4124 2dc6 B8000000 		movl	$0, %eax
 4124      00
 4125 2dcb E8000000 		call	printf
 4125      00
 993:main.c        **** 		fStatus = flSaveFirmware(handle, kbitSize, fileName, &error);
 4126              		.loc 1 993 0
 4127 2dd0 488B95B8 		movq	-584(%rbp), %rdx
 4127      FDFFFF
 4128 2dd7 488B85A0 		movq	-608(%rbp), %rax
 4128      FDFFFF
 4129 2dde 488D8DA8 		leaq	-600(%rbp), %rcx
 4129      FDFFFF
 4130 2de5 8BB594FD 		movl	-620(%rbp), %esi
 4130      FFFF
 4131 2deb 4889C7   		movq	%rax, %rdi
 4132 2dee E8000000 		call	flSaveFirmware
 4132      00
 4133 2df3 89857CFD 		movl	%eax, -644(%rbp)
 4133      FFFF
 994:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4134              		.loc 1 994 0
 4135 2df9 83BD7CFD 		cmpl	$0, -644(%rbp)
 4135      FFFF00
 4136 2e00 7410     		je	.L216
 4137              		.loc 1 994 0 is_stmt 0 discriminator 1
 4138 2e02 C78578FD 		movl	$1, -648(%rbp)
 4138      FFFF0100 
 4138      0000
 4139 2e0c 90       		nop
 4140 2e0d E9931400 		jmp	.L198
 4140      00
 4141              	.L216:
 4142              	.LBE33:
 995:main.c        **** 	}
 996:main.c        **** 
 997:main.c        **** 	if ( rstOpt->count ) {
 4143              		.loc 1 997 0 is_stmt 1
 4144 2e12 488B8518 		movq	-488(%rbp), %rax
 4144      FEFFFF
 4145 2e19 8B4060   		movl	96(%rax), %eax
 4146 2e1c 85C0     		testl	%eax, %eax
 4147 2e1e 7437     		je	.L220
 998:main.c        **** 		// Reset the bulk endpoints (only needed in some virtualised environments)
 999:main.c        **** 		fStatus = flResetToggle(handle, &error);
 4148              		.loc 1 999 0
 4149 2e20 488B85A0 		movq	-608(%rbp), %rax
 4149      FDFFFF
 4150 2e27 488D95A8 		leaq	-600(%rbp), %rdx
 4150      FDFFFF
 4151 2e2e 4889D6   		movq	%rdx, %rsi
 4152 2e31 4889C7   		movq	%rax, %rdi
 4153 2e34 E8000000 		call	flResetToggle
 4153      00
 4154 2e39 89857CFD 		movl	%eax, -644(%rbp)
 4154      FFFF
1000:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4155              		.loc 1 1000 0
 4156 2e3f 83BD7CFD 		cmpl	$0, -644(%rbp)
 4156      FFFF00
 4157 2e46 740F     		je	.L220
 4158              		.loc 1 1000 0 is_stmt 0 discriminator 1
 4159 2e48 C78578FD 		movl	$1, -648(%rbp)
 4159      FFFF0100 
 4159      0000
 4160 2e52 E94E1400 		jmp	.L198
 4160      00
 4161              	.L220:
1001:main.c        **** 	}
1002:main.c        **** 
1003:main.c        **** 	if ( conOpt->count ) {
 4162              		.loc 1 1003 0 is_stmt 1
 4163 2e57 488B85F8 		movq	-520(%rbp), %rax
 4163      FDFFFF
 4164 2e5e 8B4060   		movl	96(%rax), %eax
 4165 2e61 85C0     		testl	%eax, %eax
 4166 2e63 7413     		je	.L221
1004:main.c        **** 		conduit = (uint8)conOpt->ival[0];
 4167              		.loc 1 1004 0
 4168 2e65 488B85F8 		movq	-520(%rbp), %rax
 4168      FDFFFF
 4169 2e6c 488B4068 		movq	104(%rax), %rax
 4170 2e70 8B00     		movl	(%rax), %eax
 4171 2e72 88856BFD 		movb	%al, -661(%rbp)
 4171      FFFF
 4172              	.L221:
1005:main.c        **** 	}
1006:main.c        **** 
1007:main.c        **** 	isNeroCapable = flIsNeroCapable(handle);
 4173              		.loc 1 1007 0
 4174 2e78 488B85A0 		movq	-608(%rbp), %rax
 4174      FDFFFF
 4175 2e7f 4889C7   		movq	%rax, %rdi
 4176 2e82 E8000000 		call	flIsNeroCapable
 4176      00
 4177 2e87 84C0     		testb	%al, %al
 4178 2e89 0F95C0   		setne	%al
 4179 2e8c 88856EFD 		movb	%al, -658(%rbp)
 4179      FFFF
1008:main.c        **** 	isCommCapable = flIsCommCapable(handle, conduit);
 4180              		.loc 1 1008 0
 4181 2e92 0FB6956B 		movzbl	-661(%rbp), %edx
 4181      FDFFFF
 4182 2e99 488B85A0 		movq	-608(%rbp), %rax
 4182      FDFFFF
 4183 2ea0 89D6     		movl	%edx, %esi
 4184 2ea2 4889C7   		movq	%rax, %rdi
 4185 2ea5 E8000000 		call	flIsCommCapable
 4185      00
 4186 2eaa 84C0     		testb	%al, %al
 4187 2eac 0F95C0   		setne	%al
 4188 2eaf 88856FFD 		movb	%al, -657(%rbp)
 4188      FFFF
1009:main.c        **** 
1010:main.c        **** 	if ( portOpt->count ) {
 4189              		.loc 1 1010 0
 4190 2eb5 488B85E0 		movq	-544(%rbp), %rax
 4190      FDFFFF
 4191 2ebc 8B4060   		movl	96(%rax), %eax
 4192 2ebf 85C0     		testl	%eax, %eax
 4193 2ec1 0F843C02 		je	.L222
 4193      0000
 4194              	.LBB34:
1011:main.c        **** 		uint32 readState;
1012:main.c        **** 		char hex[9];
1013:main.c        **** 		const uint8 *p = (const uint8 *)hex;
 4195              		.loc 1 1013 0
 4196 2ec7 488D45D0 		leaq	-48(%rbp), %rax
 4197 2ecb 48898568 		movq	%rax, -408(%rbp)
 4197      FEFFFF
1014:main.c        **** 		printf("Configuring ports...\n");
 4198              		.loc 1 1014 0
 4199 2ed2 BF000000 		movl	$.LC118, %edi
 4199      00
 4200 2ed7 E8000000 		call	puts
 4200      00
1015:main.c        **** 		fStatus = flMultiBitPortAccess(handle, portOpt->sval[0], &readState, &error);
 4201              		.loc 1 1015 0
 4202 2edc 488B85E0 		movq	-544(%rbp), %rax
 4202      FDFFFF
 4203 2ee3 488B4068 		movq	104(%rax), %rax
 4204 2ee7 488B30   		movq	(%rax), %rsi
 4205 2eea 488B85A0 		movq	-608(%rbp), %rax
 4205      FDFFFF
 4206 2ef1 488D8DA8 		leaq	-600(%rbp), %rcx
 4206      FDFFFF
 4207 2ef8 488D95B8 		leaq	-584(%rbp), %rdx
 4207      FDFFFF
 4208 2eff 4889C7   		movq	%rax, %rdi
 4209 2f02 E8000000 		call	flMultiBitPortAccess
 4209      00
 4210 2f07 89857CFD 		movl	%eax, -644(%rbp)
 4210      FFFF
1016:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4211              		.loc 1 1016 0
 4212 2f0d 83BD7CFD 		cmpl	$0, -644(%rbp)
 4212      FFFF00
 4213 2f14 740F     		je	.L223
 4214              		.loc 1 1016 0 is_stmt 0 discriminator 1
 4215 2f16 C78578FD 		movl	$1, -648(%rbp)
 4215      FFFF0100 
 4215      0000
 4216 2f20 E9801300 		jmp	.L198
 4216      00
 4217              	.L223:
1017:main.c        **** 		sprintf(hex, "%08X", readState);
 4218              		.loc 1 1017 0 is_stmt 1
 4219 2f25 8B95B8FD 		movl	-584(%rbp), %edx
 4219      FFFF
 4220 2f2b 488D45D0 		leaq	-48(%rbp), %rax
 4221 2f2f BE000000 		movl	$.LC119, %esi
 4221      00
 4222 2f34 4889C7   		movq	%rax, %rdi
 4223 2f37 B8000000 		movl	$0, %eax
 4223      00
 4224 2f3c E8000000 		call	sprintf
 4224      00
1018:main.c        **** 		printf("Readback:   28   24   20   16    12    8    4    0\n          %s", nibbles[*p++ - '0']);
 4225              		.loc 1 1018 0
 4226 2f41 488B8568 		movq	-408(%rbp), %rax
 4226      FEFFFF
 4227 2f48 488D5001 		leaq	1(%rax), %rdx
 4228 2f4c 48899568 		movq	%rdx, -408(%rbp)
 4228      FEFFFF
 4229 2f53 0FB600   		movzbl	(%rax), %eax
 4230 2f56 0FB6C0   		movzbl	%al, %eax
 4231 2f59 83E830   		subl	$48, %eax
 4232 2f5c 4898     		cltq
 4233 2f5e 488B04C5 		movq	nibbles(,%rax,8), %rax
 4233      00000000 
 4234 2f66 4889C6   		movq	%rax, %rsi
 4235 2f69 BF000000 		movl	$.LC120, %edi
 4235      00
 4236 2f6e B8000000 		movl	$0, %eax
 4236      00
 4237 2f73 E8000000 		call	printf
 4237      00
1019:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 4238              		.loc 1 1019 0
 4239 2f78 488B8568 		movq	-408(%rbp), %rax
 4239      FEFFFF
 4240 2f7f 488D5001 		leaq	1(%rax), %rdx
 4241 2f83 48899568 		movq	%rdx, -408(%rbp)
 4241      FEFFFF
 4242 2f8a 0FB600   		movzbl	(%rax), %eax
 4243 2f8d 0FB6C0   		movzbl	%al, %eax
 4244 2f90 83E830   		subl	$48, %eax
 4245 2f93 4898     		cltq
 4246 2f95 488B04C5 		movq	nibbles(,%rax,8), %rax
 4246      00000000 
 4247 2f9d 4889C6   		movq	%rax, %rsi
 4248 2fa0 BF000000 		movl	$.LC121, %edi
 4248      00
 4249 2fa5 B8000000 		movl	$0, %eax
 4249      00
 4250 2faa E8000000 		call	printf
 4250      00
1020:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 4251              		.loc 1 1020 0
 4252 2faf 488B8568 		movq	-408(%rbp), %rax
 4252      FEFFFF
 4253 2fb6 488D5001 		leaq	1(%rax), %rdx
 4254 2fba 48899568 		movq	%rdx, -408(%rbp)
 4254      FEFFFF
 4255 2fc1 0FB600   		movzbl	(%rax), %eax
 4256 2fc4 0FB6C0   		movzbl	%al, %eax
 4257 2fc7 83E830   		subl	$48, %eax
 4258 2fca 4898     		cltq
 4259 2fcc 488B04C5 		movq	nibbles(,%rax,8), %rax
 4259      00000000 
 4260 2fd4 4889C6   		movq	%rax, %rsi
 4261 2fd7 BF000000 		movl	$.LC121, %edi
 4261      00
 4262 2fdc B8000000 		movl	$0, %eax
 4262      00
 4263 2fe1 E8000000 		call	printf
 4263      00
1021:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 4264              		.loc 1 1021 0
 4265 2fe6 488B8568 		movq	-408(%rbp), %rax
 4265      FEFFFF
 4266 2fed 488D5001 		leaq	1(%rax), %rdx
 4267 2ff1 48899568 		movq	%rdx, -408(%rbp)
 4267      FEFFFF
 4268 2ff8 0FB600   		movzbl	(%rax), %eax
 4269 2ffb 0FB6C0   		movzbl	%al, %eax
 4270 2ffe 83E830   		subl	$48, %eax
 4271 3001 4898     		cltq
 4272 3003 488B04C5 		movq	nibbles(,%rax,8), %rax
 4272      00000000 
 4273 300b 4889C6   		movq	%rax, %rsi
 4274 300e BF000000 		movl	$.LC121, %edi
 4274      00
 4275 3013 B8000000 		movl	$0, %eax
 4275      00
 4276 3018 E8000000 		call	printf
 4276      00
1022:main.c        **** 		printf("  %s", nibbles[*p++ - '0']);
 4277              		.loc 1 1022 0
 4278 301d 488B8568 		movq	-408(%rbp), %rax
 4278      FEFFFF
 4279 3024 488D5001 		leaq	1(%rax), %rdx
 4280 3028 48899568 		movq	%rdx, -408(%rbp)
 4280      FEFFFF
 4281 302f 0FB600   		movzbl	(%rax), %eax
 4282 3032 0FB6C0   		movzbl	%al, %eax
 4283 3035 83E830   		subl	$48, %eax
 4284 3038 4898     		cltq
 4285 303a 488B04C5 		movq	nibbles(,%rax,8), %rax
 4285      00000000 
 4286 3042 4889C6   		movq	%rax, %rsi
 4287 3045 BF000000 		movl	$.LC122, %edi
 4287      00
 4288 304a B8000000 		movl	$0, %eax
 4288      00
 4289 304f E8000000 		call	printf
 4289      00
1023:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 4290              		.loc 1 1023 0
 4291 3054 488B8568 		movq	-408(%rbp), %rax
 4291      FEFFFF
 4292 305b 488D5001 		leaq	1(%rax), %rdx
 4293 305f 48899568 		movq	%rdx, -408(%rbp)
 4293      FEFFFF
 4294 3066 0FB600   		movzbl	(%rax), %eax
 4295 3069 0FB6C0   		movzbl	%al, %eax
 4296 306c 83E830   		subl	$48, %eax
 4297 306f 4898     		cltq
 4298 3071 488B04C5 		movq	nibbles(,%rax,8), %rax
 4298      00000000 
 4299 3079 4889C6   		movq	%rax, %rsi
 4300 307c BF000000 		movl	$.LC121, %edi
 4300      00
 4301 3081 B8000000 		movl	$0, %eax
 4301      00
 4302 3086 E8000000 		call	printf
 4302      00
1024:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 4303              		.loc 1 1024 0
 4304 308b 488B8568 		movq	-408(%rbp), %rax
 4304      FEFFFF
 4305 3092 488D5001 		leaq	1(%rax), %rdx
 4306 3096 48899568 		movq	%rdx, -408(%rbp)
 4306      FEFFFF
 4307 309d 0FB600   		movzbl	(%rax), %eax
 4308 30a0 0FB6C0   		movzbl	%al, %eax
 4309 30a3 83E830   		subl	$48, %eax
 4310 30a6 4898     		cltq
 4311 30a8 488B04C5 		movq	nibbles(,%rax,8), %rax
 4311      00000000 
 4312 30b0 4889C6   		movq	%rax, %rsi
 4313 30b3 BF000000 		movl	$.LC121, %edi
 4313      00
 4314 30b8 B8000000 		movl	$0, %eax
 4314      00
 4315 30bd E8000000 		call	printf
 4315      00
1025:main.c        **** 		printf(" %s\n", nibbles[*p++ - '0']);
 4316              		.loc 1 1025 0
 4317 30c2 488B8568 		movq	-408(%rbp), %rax
 4317      FEFFFF
 4318 30c9 488D5001 		leaq	1(%rax), %rdx
 4319 30cd 48899568 		movq	%rdx, -408(%rbp)
 4319      FEFFFF
 4320 30d4 0FB600   		movzbl	(%rax), %eax
 4321 30d7 0FB6C0   		movzbl	%al, %eax
 4322 30da 83E830   		subl	$48, %eax
 4323 30dd 4898     		cltq
 4324 30df 488B04C5 		movq	nibbles(,%rax,8), %rax
 4324      00000000 
 4325 30e7 4889C6   		movq	%rax, %rsi
 4326 30ea BF000000 		movl	$.LC123, %edi
 4326      00
 4327 30ef B8000000 		movl	$0, %eax
 4327      00
 4328 30f4 E8000000 		call	printf
 4328      00
1026:main.c        **** 		flSleep(100);
 4329              		.loc 1 1026 0
 4330 30f9 BF640000 		movl	$100, %edi
 4330      00
 4331 30fe E8000000 		call	flSleep
 4331      00
 4332              	.L222:
 4333              	.LBE34:
1027:main.c        **** 	}
1028:main.c        **** 
1029:main.c        **** 	if ( queryOpt->count ) {
 4334              		.loc 1 1029 0
 4335 3103 488B85E8 		movq	-536(%rbp), %rax
 4335      FDFFFF
 4336 310a 8B4060   		movl	96(%rax), %eax
 4337 310d 85C0     		testl	%eax, %eax
 4338 310f 0F844D01 		je	.L224
 4338      0000
1030:main.c        **** 		if ( isNeroCapable ) {
 4339              		.loc 1 1030 0
 4340 3115 80BD6EFD 		cmpb	$0, -658(%rbp)
 4340      FFFF00
 4341 311c 0F841101 		je	.L225
 4341      0000
1031:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 4342              		.loc 1 1031 0
 4343 3122 488B85A0 		movq	-608(%rbp), %rax
 4343      FDFFFF
 4344 3129 488D95A8 		leaq	-600(%rbp), %rdx
 4344      FDFFFF
 4345 3130 BE000000 		movl	$0, %esi
 4345      00
 4346 3135 4889C7   		movq	%rax, %rdi
 4347 3138 E8000000 		call	flSelectConduit
 4347      00
 4348 313d 89857CFD 		movl	%eax, -644(%rbp)
 4348      FFFF
1032:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4349              		.loc 1 1032 0
 4350 3143 83BD7CFD 		cmpl	$0, -644(%rbp)
 4350      FFFF00
 4351 314a 740F     		je	.L226
 4352              		.loc 1 1032 0 is_stmt 0 discriminator 1
 4353 314c C78578FD 		movl	$1, -648(%rbp)
 4353      FFFF0100 
 4353      0000
 4354 3156 E94A1100 		jmp	.L198
 4354      00
 4355              	.L226:
1033:main.c        **** 			fStatus = jtagScanChain(handle, queryOpt->sval[0], &numDevices, scanChain, 16, &error);
 4356              		.loc 1 1033 0 is_stmt 1
 4357 315b 488B85E8 		movq	-536(%rbp), %rax
 4357      FDFFFF
 4358 3162 488B4068 		movq	104(%rax), %rax
 4359 3166 488B30   		movq	(%rax), %rsi
 4360 3169 488B85A0 		movq	-608(%rbp), %rax
 4360      FDFFFF
 4361 3170 488DBDA8 		leaq	-600(%rbp), %rdi
 4361      FDFFFF
 4362 3177 488D8DE0 		leaq	-288(%rbp), %rcx
 4362      FEFFFF
 4363 317e 488D9570 		leaq	-656(%rbp), %rdx
 4363      FDFFFF
 4364 3185 4989F9   		movq	%rdi, %r9
 4365 3188 41B81000 		movl	$16, %r8d
 4365      0000
 4366 318e 4889C7   		movq	%rax, %rdi
 4367 3191 E8000000 		call	jtagScanChain
 4367      00
 4368 3196 89857CFD 		movl	%eax, -644(%rbp)
 4368      FFFF
1034:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4369              		.loc 1 1034 0
 4370 319c 83BD7CFD 		cmpl	$0, -644(%rbp)
 4370      FFFF00
 4371 31a3 740F     		je	.L227
 4372              		.loc 1 1034 0 is_stmt 0 discriminator 1
 4373 31a5 C78578FD 		movl	$1, -648(%rbp)
 4373      FFFF0100 
 4373      0000
 4374 31af E9F11000 		jmp	.L198
 4374      00
 4375              	.L227:
1035:main.c        **** 			if ( numDevices ) {
 4376              		.loc 1 1035 0 is_stmt 1
 4377 31b4 8B8570FD 		movl	-656(%rbp), %eax
 4377      FFFF
 4378 31ba 85C0     		testl	%eax, %eax
 4379 31bc 745A     		je	.L228
1036:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain, yielding:\n", vp);
 4380              		.loc 1 1036 0
 4381 31be 488B8560 		movq	-416(%rbp), %rax
 4381      FEFFFF
 4382 31c5 4889C6   		movq	%rax, %rsi
 4383 31c8 BF000000 		movl	$.LC124, %edi
 4383      00
 4384 31cd B8000000 		movl	$0, %eax
 4384      00
 4385 31d2 E8000000 		call	printf
 4385      00
1037:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 4386              		.loc 1 1037 0
 4387 31d7 C78580FD 		movl	$0, -640(%rbp)
 4387      FFFF0000 
 4387      0000
 4388 31e1 EB25     		jmp	.L229
 4389              	.L230:
1038:main.c        **** 					printf("  0x%08X\n", scanChain[i]);
 4390              		.loc 1 1038 0 discriminator 3
 4391 31e3 8B8580FD 		movl	-640(%rbp), %eax
 4391      FFFF
 4392 31e9 8B8485E0 		movl	-288(%rbp,%rax,4), %eax
 4392      FEFFFF
 4393 31f0 89C6     		movl	%eax, %esi
 4394 31f2 BF000000 		movl	$.LC125, %edi
 4394      00
 4395 31f7 B8000000 		movl	$0, %eax
 4395      00
 4396 31fc E8000000 		call	printf
 4396      00
1037:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 4397              		.loc 1 1037 0 discriminator 3
 4398 3201 838580FD 		addl	$1, -640(%rbp)
 4398      FFFF01
 4399              	.L229:
1037:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 4400              		.loc 1 1037 0 is_stmt 0 discriminator 1
 4401 3208 8B8570FD 		movl	-656(%rbp), %eax
 4401      FFFF
 4402 320e 398580FD 		cmpl	%eax, -640(%rbp)
 4402      FFFF
 4403 3214 72CD     		jb	.L230
 4404 3216 EB4A     		jmp	.L224
 4405              	.L228:
1039:main.c        **** 				}
1040:main.c        **** 			} else {
1041:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\
 4406              		.loc 1 1041 0 is_stmt 1
 4407 3218 488B8560 		movq	-416(%rbp), %rax
 4407      FEFFFF
 4408 321f 4889C6   		movq	%rax, %rsi
 4409 3222 BF000000 		movl	$.LC126, %edi
 4409      00
 4410 3227 B8000000 		movl	$0, %eax
 4410      00
 4411 322c E8000000 		call	printf
 4411      00
 4412 3231 EB2F     		jmp	.L224
 4413              	.L225:
1042:main.c        **** 			}
1043:main.c        **** 		} else {
1044:main.c        **** 			fprintf(stderr, "JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n
 4414              		.loc 1 1044 0
 4415 3233 488B0500 		movq	stderr(%rip), %rax
 4415      000000
 4416 323a 488B9560 		movq	-416(%rbp), %rdx
 4416      FEFFFF
 4417 3241 BE000000 		movl	$.LC127, %esi
 4417      00
 4418 3246 4889C7   		movq	%rax, %rdi
 4419 3249 B8000000 		movl	$0, %eax
 4419      00
 4420 324e E8000000 		call	fprintf
 4420      00
1045:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4421              		.loc 1 1045 0
 4422 3253 C78578FD 		movl	$12, -648(%rbp)
 4422      FFFF0C00 
 4422      0000
 4423 325d E9431000 		jmp	.L198
 4423      00
 4424              	.L224:
1046:main.c        **** 		}
1047:main.c        **** 	}
1048:main.c        **** 
1049:main.c        **** 	if ( progOpt->count ) {
 4425              		.loc 1 1049 0
 4426 3262 488B85F0 		movq	-528(%rbp), %rax
 4426      FDFFFF
 4427 3269 8B4060   		movl	96(%rax), %eax
 4428 326c 85C0     		testl	%eax, %eax
 4429 326e 0F84C900 		je	.L232
 4429      0000
1050:main.c        **** 		printf("Programming device...\n");
 4430              		.loc 1 1050 0
 4431 3274 BF000000 		movl	$.LC128, %edi
 4431      00
 4432 3279 E8000000 		call	puts
 4432      00
1051:main.c        **** 		if ( isNeroCapable ) {
 4433              		.loc 1 1051 0
 4434 327e 80BD6EFD 		cmpb	$0, -658(%rbp)
 4434      FFFF00
 4435 3285 0F848300 		je	.L233
 4435      0000
1052:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 4436              		.loc 1 1052 0
 4437 328b 488B85A0 		movq	-608(%rbp), %rax
 4437      FDFFFF
 4438 3292 488D95A8 		leaq	-600(%rbp), %rdx
 4438      FDFFFF
 4439 3299 BE000000 		movl	$0, %esi
 4439      00
 4440 329e 4889C7   		movq	%rax, %rdi
 4441 32a1 E8000000 		call	flSelectConduit
 4441      00
 4442 32a6 89857CFD 		movl	%eax, -644(%rbp)
 4442      FFFF
1053:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4443              		.loc 1 1053 0
 4444 32ac 83BD7CFD 		cmpl	$0, -644(%rbp)
 4444      FFFF00
 4445 32b3 740F     		je	.L234
 4446              		.loc 1 1053 0 is_stmt 0 discriminator 1
 4447 32b5 C78578FD 		movl	$1, -648(%rbp)
 4447      FFFF0100 
 4447      0000
 4448 32bf E9E10F00 		jmp	.L198
 4448      00
 4449              	.L234:
1054:main.c        **** 			fStatus = flProgram(handle, progOpt->sval[0], NULL, &error);
 4450              		.loc 1 1054 0 is_stmt 1
 4451 32c4 488B85F0 		movq	-528(%rbp), %rax
 4451      FDFFFF
 4452 32cb 488B4068 		movq	104(%rax), %rax
 4453 32cf 488B30   		movq	(%rax), %rsi
 4454 32d2 488B85A0 		movq	-608(%rbp), %rax
 4454      FDFFFF
 4455 32d9 488D95A8 		leaq	-600(%rbp), %rdx
 4455      FDFFFF
 4456 32e0 4889D1   		movq	%rdx, %rcx
 4457 32e3 BA000000 		movl	$0, %edx
 4457      00
 4458 32e8 4889C7   		movq	%rax, %rdi
 4459 32eb E8000000 		call	flProgram
 4459      00
 4460 32f0 89857CFD 		movl	%eax, -644(%rbp)
 4460      FFFF
1055:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4461              		.loc 1 1055 0
 4462 32f6 83BD7CFD 		cmpl	$0, -644(%rbp)
 4462      FFFF00
 4463 32fd 743E     		je	.L232
 4464              		.loc 1 1055 0 is_stmt 0 discriminator 1
 4465 32ff C78578FD 		movl	$1, -648(%rbp)
 4465      FFFF0100 
 4465      0000
 4466 3309 E9970F00 		jmp	.L198
 4466      00
 4467              	.L233:
1056:main.c        **** 		} else {
1057:main.c        **** 			fprintf(stderr, "Program operation requested but device at %s does not support NeroProg\n", vp);
 4468              		.loc 1 1057 0 is_stmt 1
 4469 330e 488B0500 		movq	stderr(%rip), %rax
 4469      000000
 4470 3315 488B9560 		movq	-416(%rbp), %rdx
 4470      FEFFFF
 4471 331c BE000000 		movl	$.LC129, %esi
 4471      00
 4472 3321 4889C7   		movq	%rax, %rdi
 4473 3324 B8000000 		movl	$0, %eax
 4473      00
 4474 3329 E8000000 		call	fprintf
 4474      00
1058:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4475              		.loc 1 1058 0
 4476 332e C78578FD 		movl	$12, -648(%rbp)
 4476      FFFF0C00 
 4476      0000
 4477 3338 E9680F00 		jmp	.L198
 4477      00
 4478              	.L232:
1059:main.c        **** 		}
1060:main.c        **** 	}
1061:main.c        **** 
1062:main.c        **** 	if ( benOpt->count ) {
 4479              		.loc 1 1062 0
 4480 333d 488B8510 		movq	-496(%rbp), %rax
 4480      FEFFFF
 4481 3344 8B4060   		movl	96(%rax), %eax
 4482 3347 85C0     		testl	%eax, %eax
 4483 3349 7407     		je	.L235
1063:main.c        **** 		enableBenchmarking = true;
 4484              		.loc 1 1063 0
 4485 334b C6050000 		movb	$1, enableBenchmarking(%rip)
 4485      000001
 4486              	.L235:
1064:main.c        **** 	}
1065:main.c        **** 	
1066:main.c        **** 	if ( actOpt->count ) {
 4487              		.loc 1 1066 0
 4488 3352 488B8500 		movq	-512(%rbp), %rax
 4488      FEFFFF
 4489 3359 8B4060   		movl	96(%rax), %eax
 4490 335c 85C0     		testl	%eax, %eax
 4491 335e 0F845201 		je	.L236
 4491      0000
1067:main.c        **** 		printf("Executing CommFPGA actions on FPGALink device %s...\n", vp);
 4492              		.loc 1 1067 0
 4493 3364 488B8560 		movq	-416(%rbp), %rax
 4493      FEFFFF
 4494 336b 4889C6   		movq	%rax, %rsi
 4495 336e BF000000 		movl	$.LC130, %edi
 4495      00
 4496 3373 B8000000 		movl	$0, %eax
 4496      00
 4497 3378 E8000000 		call	printf
 4497      00
1068:main.c        **** 		if ( isCommCapable ) {
 4498              		.loc 1 1068 0
 4499 337d 80BD6FFD 		cmpb	$0, -657(%rbp)
 4499      FFFF00
 4500 3384 0F84FD00 		je	.L237
 4500      0000
 4501              	.LBB35:
1069:main.c        **** 			uint8 isRunning;
1070:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 4502              		.loc 1 1070 0
 4503 338a 0FB68D6B 		movzbl	-661(%rbp), %ecx
 4503      FDFFFF
 4504 3391 488B85A0 		movq	-608(%rbp), %rax
 4504      FDFFFF
 4505 3398 488D95A8 		leaq	-600(%rbp), %rdx
 4505      FDFFFF
 4506 339f 89CE     		movl	%ecx, %esi
 4507 33a1 4889C7   		movq	%rax, %rdi
 4508 33a4 E8000000 		call	flSelectConduit
 4508      00
 4509 33a9 89857CFD 		movl	%eax, -644(%rbp)
 4509      FFFF
1071:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4510              		.loc 1 1071 0
 4511 33af 83BD7CFD 		cmpl	$0, -644(%rbp)
 4511      FFFF00
 4512 33b6 740F     		je	.L238
 4513              		.loc 1 1071 0 is_stmt 0 discriminator 1
 4514 33b8 C78578FD 		movl	$1, -648(%rbp)
 4514      FFFF0100 
 4514      0000
 4515 33c2 E9DE0E00 		jmp	.L198
 4515      00
 4516              	.L238:
1072:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4517              		.loc 1 1072 0 is_stmt 1
 4518 33c7 488B85A0 		movq	-608(%rbp), %rax
 4518      FDFFFF
 4519 33ce 488D95A8 		leaq	-600(%rbp), %rdx
 4519      FDFFFF
 4520 33d5 488D8DB8 		leaq	-584(%rbp), %rcx
 4520      FDFFFF
 4521 33dc 4889CE   		movq	%rcx, %rsi
 4522 33df 4889C7   		movq	%rax, %rdi
 4523 33e2 E8000000 		call	flIsFPGARunning
 4523      00
 4524 33e7 89857CFD 		movl	%eax, -644(%rbp)
 4524      FFFF
1073:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4525              		.loc 1 1073 0
 4526 33ed 83BD7CFD 		cmpl	$0, -644(%rbp)
 4526      FFFF00
 4527 33f4 740F     		je	.L240
 4528              		.loc 1 1073 0 is_stmt 0 discriminator 1
 4529 33f6 C78578FD 		movl	$1, -648(%rbp)
 4529      FFFF0100 
 4529      0000
 4530 3400 E9A00E00 		jmp	.L198
 4530      00
 4531              	.L240:
1074:main.c        **** 			if ( isRunning ) {
 4532              		.loc 1 1074 0 is_stmt 1
 4533 3405 0FB685B8 		movzbl	-584(%rbp), %eax
 4533      FDFFFF
 4534 340c 84C0     		testb	%al, %al
 4535 340e 7447     		je	.L241
1075:main.c        **** 				pStatus = parseLine(handle, actOpt->sval[0], &error);
 4536              		.loc 1 1075 0
 4537 3410 488B8500 		movq	-512(%rbp), %rax
 4537      FEFFFF
 4538 3417 488B4068 		movq	104(%rax), %rax
 4539 341b 488B08   		movq	(%rax), %rcx
 4540 341e 488B85A0 		movq	-608(%rbp), %rax
 4540      FDFFFF
 4541 3425 488D95A8 		leaq	-600(%rbp), %rdx
 4541      FDFFFF
 4542 342c 4889CE   		movq	%rcx, %rsi
 4543 342f 4889C7   		movq	%rax, %rdi
 4544 3432 E8DCDFFF 		call	parseLine
 4544      FF
 4545 3437 898598FD 		movl	%eax, -616(%rbp)
 4545      FFFF
1076:main.c        **** 				CHECK_STATUS(pStatus, pStatus, cleanup);
 4546              		.loc 1 1076 0
 4547 343d 83BD98FD 		cmpl	$0, -616(%rbp)
 4547      FFFF00
 4548 3444 7470     		je	.L236
 4549              		.loc 1 1076 0 is_stmt 0 discriminator 1
 4550 3446 8B8598FD 		movl	-616(%rbp), %eax
 4550      FFFF
 4551 344c 898578FD 		movl	%eax, -648(%rbp)
 4551      FFFF
 4552 3452 E94E0E00 		jmp	.L198
 4552      00
 4553              	.L241:
1077:main.c        **** 			} else {
1078:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 4554              		.loc 1 1078 0 is_stmt 1
 4555 3457 488B0500 		movq	stderr(%rip), %rax
 4555      000000
 4556 345e 488B9560 		movq	-416(%rbp), %rdx
 4556      FEFFFF
 4557 3465 BE000000 		movl	$.LC131, %esi
 4557      00
 4558 346a 4889C7   		movq	%rax, %rdi
 4559 346d B8000000 		movl	$0, %eax
 4559      00
 4560 3472 E8000000 		call	fprintf
 4560      00
1079:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 4561              		.loc 1 1079 0
 4562 3477 C78578FD 		movl	$12, -648(%rbp)
 4562      FFFF0C00 
 4562      0000
 4563 3481 90       		nop
 4564 3482 E91E0E00 		jmp	.L198
 4564      00
 4565              	.L237:
 4566              	.LBE35:
1080:main.c        **** 			}
1081:main.c        **** 		} else {
1082:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 4567              		.loc 1 1082 0
 4568 3487 488B0500 		movq	stderr(%rip), %rax
 4568      000000
 4569 348e 488B9560 		movq	-416(%rbp), %rdx
 4569      FEFFFF
 4570 3495 BE000000 		movl	$.LC132, %esi
 4570      00
 4571 349a 4889C7   		movq	%rax, %rdi
 4572 349d B8000000 		movl	$0, %eax
 4572      00
 4573 34a2 E8000000 		call	fprintf
 4573      00
1083:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4574              		.loc 1 1083 0
 4575 34a7 C78578FD 		movl	$12, -648(%rbp)
 4575      FFFF0C00 
 4575      0000
 4576 34b1 E9EF0D00 		jmp	.L198
 4576      00
 4577              	.L236:
1084:main.c        **** 		}
1085:main.c        **** 	}
1086:main.c        **** 
1087:main.c        **** 	if ( dumpOpt->count ) {
 4578              		.loc 1 1087 0
 4579 34b6 488B8520 		movq	-480(%rbp), %rax
 4579      FEFFFF
 4580 34bd 8B4060   		movl	96(%rax), %eax
 4581 34c0 85C0     		testl	%eax, %eax
 4582 34c2 0F84D002 		je	.L243
 4582      0000
 4583              	.LBB36:
1088:main.c        **** 		const char *fileName;
1089:main.c        **** 		unsigned long chan = strtoul(dumpOpt->sval[0], (char**)&fileName, 10);
 4584              		.loc 1 1089 0
 4585 34c8 488B8520 		movq	-480(%rbp), %rax
 4585      FEFFFF
 4586 34cf 488B4068 		movq	104(%rax), %rax
 4587 34d3 488B00   		movq	(%rax), %rax
 4588 34d6 488D8DB0 		leaq	-592(%rbp), %rcx
 4588      FDFFFF
 4589 34dd BA0A0000 		movl	$10, %edx
 4589      00
 4590 34e2 4889CE   		movq	%rcx, %rsi
 4591 34e5 4889C7   		movq	%rax, %rdi
 4592 34e8 E8000000 		call	strtoul
 4592      00
 4593 34ed 48898570 		movq	%rax, -400(%rbp)
 4593      FEFFFF
1090:main.c        **** 		FILE *file = NULL;
 4594              		.loc 1 1090 0
 4595 34f4 48C78578 		movq	$0, -392(%rbp)
 4595      FEFFFF00 
 4595      000000
1091:main.c        **** 		const uint8 *recvData;
1092:main.c        **** 		uint32 actualLength;
1093:main.c        **** 		if ( *fileName != ':' ) {
 4596              		.loc 1 1093 0
 4597 34ff 488B85B0 		movq	-592(%rbp), %rax
 4597      FDFFFF
 4598 3506 0FB600   		movzbl	(%rax), %eax
 4599 3509 3C3A     		cmpb	$58, %al
 4600 350b 742F     		je	.L244
1094:main.c        **** 			fprintf(stderr, "%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n", progName);
 4601              		.loc 1 1094 0
 4602 350d 488B0500 		movq	stderr(%rip), %rax
 4602      000000
 4603 3514 488B9550 		movq	-432(%rbp), %rdx
 4603      FEFFFF
 4604 351b BE000000 		movl	$.LC133, %esi
 4604      00
 4605 3520 4889C7   		movq	%rax, %rdi
 4606 3523 B8000000 		movl	$0, %eax
 4606      00
 4607 3528 E8000000 		call	fprintf
 4607      00
1095:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4608              		.loc 1 1095 0
 4609 352d C78578FD 		movl	$12, -648(%rbp)
 4609      FFFF0C00 
 4609      0000
 4610 3537 E9690D00 		jmp	.L198
 4610      00
 4611              	.L244:
1096:main.c        **** 		}
1097:main.c        **** 		fileName++;
 4612              		.loc 1 1097 0
 4613 353c 488B85B0 		movq	-592(%rbp), %rax
 4613      FDFFFF
 4614 3543 4883C001 		addq	$1, %rax
 4615 3547 488985B0 		movq	%rax, -592(%rbp)
 4615      FDFFFF
1098:main.c        **** 		printf("Copying from channel %lu to %s", chan, fileName);
 4616              		.loc 1 1098 0
 4617 354e 488B95B0 		movq	-592(%rbp), %rdx
 4617      FDFFFF
 4618 3555 488B8570 		movq	-400(%rbp), %rax
 4618      FEFFFF
 4619 355c 4889C6   		movq	%rax, %rsi
 4620 355f BF000000 		movl	$.LC134, %edi
 4620      00
 4621 3564 B8000000 		movl	$0, %eax
 4621      00
 4622 3569 E8000000 		call	printf
 4622      00
1099:main.c        **** 		file = fopen(fileName, "wb");
 4623              		.loc 1 1099 0
 4624 356e 488B85B0 		movq	-592(%rbp), %rax
 4624      FDFFFF
 4625 3575 BE000000 		movl	$.LC18, %esi
 4625      00
 4626 357a 4889C7   		movq	%rax, %rdi
 4627 357d E8000000 		call	fopen
 4627      00
 4628 3582 48898578 		movq	%rax, -392(%rbp)
 4628      FEFFFF
1100:main.c        **** 		CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 4629              		.loc 1 1100 0
 4630 3589 4883BD78 		cmpq	$0, -392(%rbp)
 4630      FEFFFF00 
 4631 3591 750F     		jne	.L246
 4632              		.loc 1 1100 0 is_stmt 0 discriminator 1
 4633 3593 C78578FD 		movl	$11, -648(%rbp)
 4633      FFFF0B00 
 4633      0000
 4634 359d E9030D00 		jmp	.L198
 4634      00
 4635              	.L246:
1101:main.c        **** 		sigRegisterHandler();
 4636              		.loc 1 1101 0 is_stmt 1
 4637 35a2 E8000000 		call	sigRegisterHandler
 4637      00
1102:main.c        **** 		fStatus = flSelectConduit(handle, conduit, &error);
 4638              		.loc 1 1102 0
 4639 35a7 0FB68D6B 		movzbl	-661(%rbp), %ecx
 4639      FDFFFF
 4640 35ae 488B85A0 		movq	-608(%rbp), %rax
 4640      FDFFFF
 4641 35b5 488D95A8 		leaq	-600(%rbp), %rdx
 4641      FDFFFF
 4642 35bc 89CE     		movl	%ecx, %esi
 4643 35be 4889C7   		movq	%rax, %rdi
 4644 35c1 E8000000 		call	flSelectConduit
 4644      00
 4645 35c6 89857CFD 		movl	%eax, -644(%rbp)
 4645      FFFF
1103:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4646              		.loc 1 1103 0
 4647 35cc 83BD7CFD 		cmpl	$0, -644(%rbp)
 4647      FFFF00
 4648 35d3 740F     		je	.L247
 4649              		.loc 1 1103 0 is_stmt 0 discriminator 1
 4650 35d5 C78578FD 		movl	$1, -648(%rbp)
 4650      FFFF0100 
 4650      0000
 4651 35df E9C10C00 		jmp	.L198
 4651      00
 4652              	.L247:
1104:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 4653              		.loc 1 1104 0 is_stmt 1
 4654 35e4 488B8570 		movq	-400(%rbp), %rax
 4654      FEFFFF
 4655 35eb 0FB6F0   		movzbl	%al, %esi
 4656 35ee 488B85A0 		movq	-608(%rbp), %rax
 4656      FDFFFF
 4657 35f5 488D95A8 		leaq	-600(%rbp), %rdx
 4657      FDFFFF
 4658 35fc 4989D0   		movq	%rdx, %r8
 4659 35ff B9000000 		movl	$0, %ecx
 4659      00
 4660 3604 BA005800 		movl	$22528, %edx
 4660      00
 4661 3609 4889C7   		movq	%rax, %rdi
 4662 360c E8000000 		call	flReadChannelAsyncSubmit
 4662      00
 4663 3611 89857CFD 		movl	%eax, -644(%rbp)
 4663      FFFF
1105:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4664              		.loc 1 1105 0
 4665 3617 83BD7CFD 		cmpl	$0, -644(%rbp)
 4665      FFFF00
 4666 361e 740F     		je	.L248
 4667              		.loc 1 1105 0 is_stmt 0 discriminator 1
 4668 3620 C78578FD 		movl	$1, -648(%rbp)
 4668      FFFF0100 
 4668      0000
 4669 362a E9760C00 		jmp	.L198
 4669      00
 4670              	.L248:
1106:main.c        **** 		do {
1107:main.c        **** 			fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 4671              		.loc 1 1107 0 is_stmt 1
 4672 362f 488B8570 		movq	-400(%rbp), %rax
 4672      FEFFFF
 4673 3636 0FB6F0   		movzbl	%al, %esi
 4674 3639 488B85A0 		movq	-608(%rbp), %rax
 4674      FDFFFF
 4675 3640 488D95A8 		leaq	-600(%rbp), %rdx
 4675      FDFFFF
 4676 3647 4989D0   		movq	%rdx, %r8
 4677 364a B9000000 		movl	$0, %ecx
 4677      00
 4678 364f BA005800 		movl	$22528, %edx
 4678      00
 4679 3654 4889C7   		movq	%rax, %rdi
 4680 3657 E8000000 		call	flReadChannelAsyncSubmit
 4680      00
 4681 365c 89857CFD 		movl	%eax, -644(%rbp)
 4681      FFFF
1108:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4682              		.loc 1 1108 0
 4683 3662 83BD7CFD 		cmpl	$0, -644(%rbp)
 4683      FFFF00
 4684 3669 740F     		je	.L249
 4685              		.loc 1 1108 0 is_stmt 0 discriminator 1
 4686 366b C78578FD 		movl	$1, -648(%rbp)
 4686      FFFF0100 
 4686      0000
 4687 3675 E92B0C00 		jmp	.L198
 4687      00
 4688              	.L249:
1109:main.c        **** 			fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 4689              		.loc 1 1109 0 is_stmt 1
 4690 367a 488B85A0 		movq	-608(%rbp), %rax
 4690      FDFFFF
 4691 3681 488DBDA8 		leaq	-600(%rbp), %rdi
 4691      FDFFFF
 4692 3688 488D8D74 		leaq	-652(%rbp), %rcx
 4692      FDFFFF
 4693 368f 488D9574 		leaq	-652(%rbp), %rdx
 4693      FDFFFF
 4694 3696 488DB5B8 		leaq	-584(%rbp), %rsi
 4694      FDFFFF
 4695 369d 4989F8   		movq	%rdi, %r8
 4696 36a0 4889C7   		movq	%rax, %rdi
 4697 36a3 E8000000 		call	flReadChannelAsyncAwait
 4697      00
 4698 36a8 89857CFD 		movl	%eax, -644(%rbp)
 4698      FFFF
1110:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4699              		.loc 1 1110 0
 4700 36ae 83BD7CFD 		cmpl	$0, -644(%rbp)
 4700      FFFF00
 4701 36b5 740F     		je	.L250
 4702              		.loc 1 1110 0 is_stmt 0 discriminator 1
 4703 36b7 C78578FD 		movl	$1, -648(%rbp)
 4703      FFFF0100 
 4703      0000
 4704 36c1 E9DF0B00 		jmp	.L198
 4704      00
 4705              	.L250:
1111:main.c        **** 			fwrite(recvData, 1, actualLength, file);
 4706              		.loc 1 1111 0 is_stmt 1
 4707 36c6 8B8574FD 		movl	-652(%rbp), %eax
 4707      FFFF
 4708 36cc 89C6     		movl	%eax, %esi
 4709 36ce 488B85B8 		movq	-584(%rbp), %rax
 4709      FDFFFF
 4710 36d5 488B9578 		movq	-392(%rbp), %rdx
 4710      FEFFFF
 4711 36dc 4889D1   		movq	%rdx, %rcx
 4712 36df 4889F2   		movq	%rsi, %rdx
 4713 36e2 BE010000 		movl	$1, %esi
 4713      00
 4714 36e7 4889C7   		movq	%rax, %rdi
 4715 36ea E8000000 		call	fwrite
 4715      00
1112:main.c        **** 			printf(".");
 4716              		.loc 1 1112 0
 4717 36ef BF2E0000 		movl	$46, %edi
 4717      00
 4718 36f4 E8000000 		call	putchar
 4718      00
1113:main.c        **** 		} while ( !sigIsRaised() );
 4719              		.loc 1 1113 0
 4720 36f9 E8000000 		call	sigIsRaised
 4720      00
 4721 36fe 83F001   		xorl	$1, %eax
 4722 3701 84C0     		testb	%al, %al
 4723 3703 0F8526FF 		jne	.L248
 4723      FFFF
1114:main.c        **** 		printf("\nCaught SIGINT, quitting...\n");
 4724              		.loc 1 1114 0
 4725 3709 BF000000 		movl	$.LC135, %edi
 4725      00
 4726 370e E8000000 		call	puts
 4726      00
1115:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 4727              		.loc 1 1115 0
 4728 3713 488B85A0 		movq	-608(%rbp), %rax
 4728      FDFFFF
 4729 371a 488DBDA8 		leaq	-600(%rbp), %rdi
 4729      FDFFFF
 4730 3721 488D8D74 		leaq	-652(%rbp), %rcx
 4730      FDFFFF
 4731 3728 488D9574 		leaq	-652(%rbp), %rdx
 4731      FDFFFF
 4732 372f 488DB5B8 		leaq	-584(%rbp), %rsi
 4732      FDFFFF
 4733 3736 4989F8   		movq	%rdi, %r8
 4734 3739 4889C7   		movq	%rax, %rdi
 4735 373c E8000000 		call	flReadChannelAsyncAwait
 4735      00
 4736 3741 89857CFD 		movl	%eax, -644(%rbp)
 4736      FFFF
1116:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4737              		.loc 1 1116 0
 4738 3747 83BD7CFD 		cmpl	$0, -644(%rbp)
 4738      FFFF00
 4739 374e 7410     		je	.L251
 4740              		.loc 1 1116 0 is_stmt 0 discriminator 1
 4741 3750 C78578FD 		movl	$1, -648(%rbp)
 4741      FFFF0100 
 4741      0000
 4742 375a 90       		nop
 4743 375b E9450B00 		jmp	.L198
 4743      00
 4744              	.L251:
1117:main.c        **** 		fwrite(recvData, 1, actualLength, file);
 4745              		.loc 1 1117 0 is_stmt 1
 4746 3760 8B8574FD 		movl	-652(%rbp), %eax
 4746      FFFF
 4747 3766 89C6     		movl	%eax, %esi
 4748 3768 488B85B8 		movq	-584(%rbp), %rax
 4748      FDFFFF
 4749 376f 488B9578 		movq	-392(%rbp), %rdx
 4749      FEFFFF
 4750 3776 4889D1   		movq	%rdx, %rcx
 4751 3779 4889F2   		movq	%rsi, %rdx
 4752 377c BE010000 		movl	$1, %esi
 4752      00
 4753 3781 4889C7   		movq	%rax, %rdi
 4754 3784 E8000000 		call	fwrite
 4754      00
1118:main.c        **** 		fclose(file);
 4755              		.loc 1 1118 0
 4756 3789 488B8578 		movq	-392(%rbp), %rax
 4756      FEFFFF
 4757 3790 4889C7   		movq	%rax, %rdi
 4758 3793 E8000000 		call	fclose
 4758      00
 4759              	.L243:
 4760              	.LBE36:
1119:main.c        **** 	}
1120:main.c        **** 
1121:main.c        **** 	if ( shellOpt->count ) {
 4761              		.loc 1 1121 0
 4762 3798 488B8508 		movq	-504(%rbp), %rax
 4762      FEFFFF
 4763 379f 8B4060   		movl	96(%rax), %eax
 4764 37a2 85C0     		testl	%eax, %eax
 4765 37a4 0F84CB01 		je	.L252
 4765      0000
1122:main.c        **** 		printf("\nEntering CommFPGA command-line mode:\n");
 4766              		.loc 1 1122 0
 4767 37aa BF000000 		movl	$.LC136, %edi
 4767      00
 4768 37af E8000000 		call	puts
 4768      00
1123:main.c        **** 		if ( isCommCapable ) {
 4769              		.loc 1 1123 0
 4770 37b4 80BD6FFD 		cmpb	$0, -657(%rbp)
 4770      FFFF00
 4771 37bb 0F848501 		je	.L253
 4771      0000
 4772              	.LBB37:
1124:main.c        **** 		   uint8 isRunning;
1125:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 4773              		.loc 1 1125 0
 4774 37c1 0FB68D6B 		movzbl	-661(%rbp), %ecx
 4774      FDFFFF
 4775 37c8 488B85A0 		movq	-608(%rbp), %rax
 4775      FDFFFF
 4776 37cf 488D95A8 		leaq	-600(%rbp), %rdx
 4776      FDFFFF
 4777 37d6 89CE     		movl	%ecx, %esi
 4778 37d8 4889C7   		movq	%rax, %rdi
 4779 37db E8000000 		call	flSelectConduit
 4779      00
 4780 37e0 89857CFD 		movl	%eax, -644(%rbp)
 4780      FFFF
1126:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4781              		.loc 1 1126 0
 4782 37e6 83BD7CFD 		cmpl	$0, -644(%rbp)
 4782      FFFF00
 4783 37ed 740F     		je	.L254
 4784              		.loc 1 1126 0 is_stmt 0 discriminator 1
 4785 37ef C78578FD 		movl	$1, -648(%rbp)
 4785      FFFF0100 
 4785      0000
 4786 37f9 E9A70A00 		jmp	.L198
 4786      00
 4787              	.L254:
1127:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4788              		.loc 1 1127 0 is_stmt 1
 4789 37fe 488B85A0 		movq	-608(%rbp), %rax
 4789      FDFFFF
 4790 3805 488D95A8 		leaq	-600(%rbp), %rdx
 4790      FDFFFF
 4791 380c 488D8DB8 		leaq	-584(%rbp), %rcx
 4791      FDFFFF
 4792 3813 4889CE   		movq	%rcx, %rsi
 4793 3816 4889C7   		movq	%rax, %rdi
 4794 3819 E8000000 		call	flIsFPGARunning
 4794      00
 4795 381e 89857CFD 		movl	%eax, -644(%rbp)
 4795      FFFF
1128:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4796              		.loc 1 1128 0
 4797 3824 83BD7CFD 		cmpl	$0, -644(%rbp)
 4797      FFFF00
 4798 382b 740F     		je	.L256
 4799              		.loc 1 1128 0 is_stmt 0 discriminator 1
 4800 382d C78578FD 		movl	$1, -648(%rbp)
 4800      FFFF0100 
 4800      0000
 4801 3837 E9690A00 		jmp	.L198
 4801      00
 4802              	.L256:
1129:main.c        **** 			if ( isRunning ) {
 4803              		.loc 1 1129 0 is_stmt 1
 4804 383c 0FB685B8 		movzbl	-584(%rbp), %eax
 4804      FDFFFF
 4805 3843 84C0     		testb	%al, %al
 4806 3845 0F84CB00 		je	.L257
 4806      0000
 4807              	.L259:
1130:main.c        **** 				do {
1131:main.c        **** 					do {
1132:main.c        **** 						line = readline("> ");
 4808              		.loc 1 1132 0 discriminator 2
 4809 384b BF000000 		movl	$.LC137, %edi
 4809      00
 4810 3850 E8000000 		call	readline
 4810      00
 4811 3855 488985C0 		movq	%rax, -576(%rbp)
 4811      FDFFFF
1133:main.c        **** 					} while ( line && !line[0] );
 4812              		.loc 1 1133 0 discriminator 2
 4813 385c 4883BDC0 		cmpq	$0, -576(%rbp)
 4813      FDFFFF00 
 4814 3864 740E     		je	.L258
 4815              		.loc 1 1133 0 is_stmt 0 discriminator 1
 4816 3866 488B85C0 		movq	-576(%rbp), %rax
 4816      FDFFFF
 4817 386d 0FB600   		movzbl	(%rax), %eax
 4818 3870 84C0     		testb	%al, %al
 4819 3872 74D7     		je	.L259
 4820              	.L258:
1134:main.c        **** 					if ( line && line[0] && line[0] != 'q' ) {
 4821              		.loc 1 1134 0 is_stmt 1
 4822 3874 4883BDC0 		cmpq	$0, -576(%rbp)
 4822      FDFFFF00 
 4823 387c 747A     		je	.L260
 4824              		.loc 1 1134 0 is_stmt 0 discriminator 1
 4825 387e 488B85C0 		movq	-576(%rbp), %rax
 4825      FDFFFF
 4826 3885 0FB600   		movzbl	(%rax), %eax
 4827 3888 84C0     		testb	%al, %al
 4828 388a 746C     		je	.L260
 4829              		.loc 1 1134 0 discriminator 2
 4830 388c 488B85C0 		movq	-576(%rbp), %rax
 4830      FDFFFF
 4831 3893 0FB600   		movzbl	(%rax), %eax
 4832 3896 3C71     		cmpb	$113, %al
 4833 3898 745E     		je	.L260
1135:main.c        **** 						add_history(line);
 4834              		.loc 1 1135 0 is_stmt 1
 4835 389a 488B85C0 		movq	-576(%rbp), %rax
 4835      FDFFFF
 4836 38a1 4889C7   		movq	%rax, %rdi
 4837 38a4 E8000000 		call	add_history
 4837      00
1136:main.c        **** 						pStatus = parseLine(handle, line, &error);
 4838              		.loc 1 1136 0
 4839 38a9 488B85A0 		movq	-608(%rbp), %rax
 4839      FDFFFF
 4840 38b0 488D95A8 		leaq	-600(%rbp), %rdx
 4840      FDFFFF
 4841 38b7 488B8DC0 		movq	-576(%rbp), %rcx
 4841      FDFFFF
 4842 38be 4889CE   		movq	%rcx, %rsi
 4843 38c1 4889C7   		movq	%rax, %rdi
 4844 38c4 E84ADBFF 		call	parseLine
 4844      FF
 4845 38c9 898598FD 		movl	%eax, -616(%rbp)
 4845      FFFF
1137:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 4846              		.loc 1 1137 0
 4847 38cf 83BD98FD 		cmpl	$0, -616(%rbp)
 4847      FFFF00
 4848 38d6 7411     		je	.L261
 4849              		.loc 1 1137 0 is_stmt 0 discriminator 1
 4850 38d8 8B8598FD 		movl	-616(%rbp), %eax
 4850      FFFF
 4851 38de 898578FD 		movl	%eax, -648(%rbp)
 4851      FFFF
 4852 38e4 E9BC0900 		jmp	.L198
 4852      00
 4853              	.L261:
1138:main.c        **** 						free((void*)line);
 4854              		.loc 1 1138 0 is_stmt 1
 4855 38e9 488B85C0 		movq	-576(%rbp), %rax
 4855      FDFFFF
 4856 38f0 4889C7   		movq	%rax, %rdi
 4857 38f3 E8000000 		call	free
 4857      00
 4858              	.L260:
1139:main.c        **** 					}
1140:main.c        **** 				} while ( line && line[0] != 'q' );
 4859              		.loc 1 1140 0
 4860 38f8 4883BDC0 		cmpq	$0, -576(%rbp)
 4860      FDFFFF00 
 4861 3900 7473     		je	.L252
 4862              		.loc 1 1140 0 is_stmt 0 discriminator 1
 4863 3902 488B85C0 		movq	-576(%rbp), %rax
 4863      FDFFFF
 4864 3909 0FB600   		movzbl	(%rax), %eax
 4865 390c 3C71     		cmpb	$113, %al
 4866 390e 0F8537FF 		jne	.L259
 4866      FFFF
 4867 3914 EB5F     		jmp	.L252
 4868              	.L257:
1141:main.c        **** 			} else {
1142:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 4869              		.loc 1 1142 0 is_stmt 1
 4870 3916 488B0500 		movq	stderr(%rip), %rax
 4870      000000
 4871 391d 488B9560 		movq	-416(%rbp), %rdx
 4871      FEFFFF
 4872 3924 BE000000 		movl	$.LC138, %esi
 4872      00
 4873 3929 4889C7   		movq	%rax, %rdi
 4874 392c B8000000 		movl	$0, %eax
 4874      00
 4875 3931 E8000000 		call	fprintf
 4875      00
1143:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 4876              		.loc 1 1143 0
 4877 3936 C78578FD 		movl	$12, -648(%rbp)
 4877      FFFF0C00 
 4877      0000
 4878 3940 90       		nop
 4879 3941 E95F0900 		jmp	.L198
 4879      00
 4880              	.L253:
 4881              	.LBE37:
1144:main.c        **** 			}
1145:main.c        **** 		} else {
1146:main.c        **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 4882              		.loc 1 1146 0
 4883 3946 488B0500 		movq	stderr(%rip), %rax
 4883      000000
 4884 394d 488B9560 		movq	-416(%rbp), %rdx
 4884      FEFFFF
 4885 3954 BE000000 		movl	$.LC139, %esi
 4885      00
 4886 3959 4889C7   		movq	%rax, %rdi
 4887 395c B8000000 		movl	$0, %eax
 4887      00
 4888 3961 E8000000 		call	fprintf
 4888      00
1147:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4889              		.loc 1 1147 0
 4890 3966 C78578FD 		movl	$12, -648(%rbp)
 4890      FFFF0C00 
 4890      0000
 4891 3970 E9300900 		jmp	.L198
 4891      00
 4892              	.L252:
1148:main.c        **** 		}
1149:main.c        **** 	}
1150:main.c        **** 
1151:main.c        **** 	if(project->count){
 4893              		.loc 1 1151 0
 4894 3975 488B8548 		movq	-440(%rbp), %rax
 4894      FEFFFF
 4895 397c 8B4060   		movl	96(%rax), %eax
 4896 397f 85C0     		testl	%eax, %eax
 4897 3981 0F841E09 		je	.L198
 4897      0000
1152:main.c        **** 		printf("\nEntering CommFPGA command-line mode:\n");
 4898              		.loc 1 1152 0
 4899 3987 BF000000 		movl	$.LC136, %edi
 4899      00
 4900 398c E8000000 		call	puts
 4900      00
1153:main.c        **** 		if ( isCommCapable ) {
 4901              		.loc 1 1153 0
 4902 3991 80BD6FFD 		cmpb	$0, -657(%rbp)
 4902      FFFF00
 4903 3998 0F84DC08 		je	.L263
 4903      0000
 4904              	.LBB38:
1154:main.c        **** 		   uint8 isRunning;
1155:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 4905              		.loc 1 1155 0
 4906 399e 0FB68D6B 		movzbl	-661(%rbp), %ecx
 4906      FDFFFF
 4907 39a5 488B85A0 		movq	-608(%rbp), %rax
 4907      FDFFFF
 4908 39ac 488D95A8 		leaq	-600(%rbp), %rdx
 4908      FDFFFF
 4909 39b3 89CE     		movl	%ecx, %esi
 4910 39b5 4889C7   		movq	%rax, %rdi
 4911 39b8 E8000000 		call	flSelectConduit
 4911      00
 4912 39bd 89857CFD 		movl	%eax, -644(%rbp)
 4912      FFFF
1156:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4913              		.loc 1 1156 0
 4914 39c3 83BD7CFD 		cmpl	$0, -644(%rbp)
 4914      FFFF00
 4915 39ca 740F     		je	.L264
 4916              		.loc 1 1156 0 is_stmt 0 discriminator 1
 4917 39cc C78578FD 		movl	$1, -648(%rbp)
 4917      FFFF0100 
 4917      0000
 4918 39d6 E9CA0800 		jmp	.L198
 4918      00
 4919              	.L264:
1157:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4920              		.loc 1 1157 0 is_stmt 1
 4921 39db 488B85A0 		movq	-608(%rbp), %rax
 4921      FDFFFF
 4922 39e2 488D95A8 		leaq	-600(%rbp), %rdx
 4922      FDFFFF
 4923 39e9 488D8DB8 		leaq	-584(%rbp), %rcx
 4923      FDFFFF
 4924 39f0 4889CE   		movq	%rcx, %rsi
 4925 39f3 4889C7   		movq	%rax, %rdi
 4926 39f6 E8000000 		call	flIsFPGARunning
 4926      00
 4927 39fb 89857CFD 		movl	%eax, -644(%rbp)
 4927      FFFF
1158:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4928              		.loc 1 1158 0
 4929 3a01 83BD7CFD 		cmpl	$0, -644(%rbp)
 4929      FFFF00
 4930 3a08 740F     		je	.L266
 4931              		.loc 1 1158 0 is_stmt 0 discriminator 1
 4932 3a0a C78578FD 		movl	$1, -648(%rbp)
 4932      FFFF0100 
 4932      0000
 4933 3a14 E98C0800 		jmp	.L198
 4933      00
 4934              	.L266:
1159:main.c        **** 			if ( isRunning ) {
 4935              		.loc 1 1159 0 is_stmt 1
 4936 3a19 0FB685B8 		movzbl	-584(%rbp), %eax
 4936      FDFFFF
 4937 3a20 84C0     		testb	%al, %al
 4938 3a22 0F842508 		je	.L267
 4938      0000
 4939              	.LBB39:
1160:main.c        **** 				uint8 chanr=0,chanw=1;
 4940              		.loc 1 1160 0
 4941 3a28 C6856CFD 		movb	$0, -660(%rbp)
 4941      FFFF00
 4942 3a2f C6856DFD 		movb	$1, -659(%rbp)
 4942      FFFF01
1161:main.c        **** 				// uint32 length = 4;
1162:main.c        **** 				uint8 input[4],output[4];
1163:main.c        **** 				unsigned input1[4],output1[4];
1164:main.c        **** 				unsigned Ackn2[4]={1,1,1,1};
 4943              		.loc 1 1164 0
 4944 3a36 C785A0FE 		movl	$1, -352(%rbp)
 4944      FFFF0100 
 4944      0000
 4945 3a40 C785A4FE 		movl	$1, -348(%rbp)
 4945      FFFF0100 
 4945      0000
 4946 3a4a C785A8FE 		movl	$1, -344(%rbp)
 4946      FFFF0100 
 4946      0000
 4947 3a54 C785ACFE 		movl	$1, -340(%rbp)
 4947      FFFF0100 
 4947      0000
1165:main.c        **** 				encrypt(Ackn2,input1);
 4948              		.loc 1 1165 0
 4949 3a5e 488D9580 		leaq	-384(%rbp), %rdx
 4949      FEFFFF
 4950 3a65 488D85A0 		leaq	-352(%rbp), %rax
 4950      FEFFFF
 4951 3a6c 4889D6   		movq	%rdx, %rsi
 4952 3a6f 4889C7   		movq	%rax, %rdi
 4953 3a72 E8000000 		call	encrypt
 4953      00
1166:main.c        **** 				uint8 Ack2[4];
1167:main.c        **** 				unsignedtouint8(input1,Ack2);
 4954              		.loc 1 1167 0
 4955 3a77 488D55D0 		leaq	-48(%rbp), %rdx
 4956 3a7b 488D8580 		leaq	-384(%rbp), %rax
 4956      FEFFFF
 4957 3a82 4889D6   		movq	%rdx, %rsi
 4958 3a85 4889C7   		movq	%rax, %rdi
 4959 3a88 E8000000 		call	unsignedtouint8
 4959      00
1168:main.c        **** 				unsigned infoin8[8];
1169:main.c        **** 				unsigned Ack1[4] ={65,145,37,69};
 4960              		.loc 1 1169 0
 4961 3a8d C785B0FE 		movl	$65, -336(%rbp)
 4961      FFFF4100 
 4961      0000
 4962 3a97 C785B4FE 		movl	$145, -332(%rbp)
 4962      FFFF9100 
 4962      0000
 4963 3aa1 C785B8FE 		movl	$37, -328(%rbp)
 4963      FFFF2500 
 4963      0000
 4964 3aab C785BCFE 		movl	$69, -324(%rbp)
 4964      FFFF4500 
 4964      0000
1170:main.c        **** 				unsigned coordinates;
1171:main.c        **** 				unsigned wait=32;
 4965              		.loc 1 1171 0
 4966 3ab5 C7859CFD 		movl	$32, -612(%rbp)
 4966      FFFF2000 
 4966      0000
1172:main.c        **** 				unsigned state=0;
 4967              		.loc 1 1172 0
 4968 3abf C7858CFD 		movl	$0, -628(%rbp)
 4968      FFFF0000 
 4968      0000
 4969              	.L275:
1173:main.c        **** 				while(1){
1174:main.c        **** 					if(state == 0){
 4970              		.loc 1 1174 0
 4971 3ac9 83BD8CFD 		cmpl	$0, -628(%rbp)
 4971      FFFF00
 4972 3ad0 751A     		jne	.L268
1175:main.c        **** 						chanr = 0;
 4973              		.loc 1 1175 0
 4974 3ad2 C6856CFD 		movb	$0, -660(%rbp)
 4974      FFFF00
1176:main.c        **** 						chanw = 1;
 4975              		.loc 1 1176 0
 4976 3ad9 C6856DFD 		movb	$1, -659(%rbp)
 4976      FFFF01
1177:main.c        **** 						state = 1;
 4977              		.loc 1 1177 0
 4978 3ae0 C7858CFD 		movl	$1, -628(%rbp)
 4978      FFFF0100 
 4978      0000
 4979 3aea EBDD     		jmp	.L275
 4980              	.L268:
1178:main.c        **** 					}else if(state== 1){
 4981              		.loc 1 1178 0
 4982 3aec 83BD8CFD 		cmpl	$1, -628(%rbp)
 4982      FFFF01
 4983 3af3 0F851D03 		jne	.L270
 4983      0000
1179:main.c        **** 						flReadChannel(handle,chanr,4,&input,&error);// Reads the coordinates
 4984              		.loc 1 1179 0
 4985 3af9 0FB6B56C 		movzbl	-660(%rbp), %esi
 4985      FDFFFF
 4986 3b00 488B85A0 		movq	-608(%rbp), %rax
 4986      FDFFFF
 4987 3b07 488D8DA8 		leaq	-600(%rbp), %rcx
 4987      FDFFFF
 4988 3b0e 488D55B0 		leaq	-80(%rbp), %rdx
 4989 3b12 4989C8   		movq	%rcx, %r8
 4990 3b15 4889D1   		movq	%rdx, %rcx
 4991 3b18 BA040000 		movl	$4, %edx
 4991      00
 4992 3b1d 4889C7   		movq	%rax, %rdi
 4993 3b20 E8000000 		call	flReadChannel
 4993      00
1180:main.c        **** 						uint8tounsigned(input,input1);
 4994              		.loc 1 1180 0
 4995 3b25 488D9580 		leaq	-384(%rbp), %rdx
 4995      FEFFFF
 4996 3b2c 488D45B0 		leaq	-80(%rbp), %rax
 4997 3b30 4889D6   		movq	%rdx, %rsi
 4998 3b33 4889C7   		movq	%rax, %rdi
 4999 3b36 E8000000 		call	uint8tounsigned
 4999      00
1181:main.c        **** 						printf("coordi -- %d %d %d %d \n",input[0],input[1],input[2],input[3]);
 5000              		.loc 1 1181 0
 5001 3b3b 0FB645B3 		movzbl	-77(%rbp), %eax
 5002 3b3f 0FB6F0   		movzbl	%al, %esi
 5003 3b42 0FB645B2 		movzbl	-78(%rbp), %eax
 5004 3b46 0FB6C8   		movzbl	%al, %ecx
 5005 3b49 0FB645B1 		movzbl	-79(%rbp), %eax
 5006 3b4d 0FB6D0   		movzbl	%al, %edx
 5007 3b50 0FB645B0 		movzbl	-80(%rbp), %eax
 5008 3b54 0FB6C0   		movzbl	%al, %eax
 5009 3b57 4189F0   		movl	%esi, %r8d
 5010 3b5a 89C6     		movl	%eax, %esi
 5011 3b5c BF000000 		movl	$.LC140, %edi
 5011      00
 5012 3b61 B8000000 		movl	$0, %eax
 5012      00
 5013 3b66 E8000000 		call	printf
 5013      00
1182:main.c        **** 						decrypt(input1,output1);
 5014              		.loc 1 1182 0
 5015 3b6b 488D9590 		leaq	-368(%rbp), %rdx
 5015      FEFFFF
 5016 3b72 488D8580 		leaq	-384(%rbp), %rax
 5016      FEFFFF
 5017 3b79 4889D6   		movq	%rdx, %rsi
 5018 3b7c 4889C7   		movq	%rax, %rdi
 5019 3b7f E8000000 		call	decrypt
 5019      00
1183:main.c        **** 						coordinates = output1[0]; 
 5020              		.loc 1 1183 0
 5021 3b84 8B8590FE 		movl	-368(%rbp), %eax
 5021      FFFF
 5022 3b8a 898588FD 		movl	%eax, -632(%rbp)
 5022      FFFF
1184:main.c        **** 						printf("coordi -- %d %d %d %d \n",output1[0],output1[1],output1[2],output1[3]);
 5023              		.loc 1 1184 0
 5024 3b90 8BB59CFE 		movl	-356(%rbp), %esi
 5024      FFFF
 5025 3b96 8B8D98FE 		movl	-360(%rbp), %ecx
 5025      FFFF
 5026 3b9c 8B9594FE 		movl	-364(%rbp), %edx
 5026      FFFF
 5027 3ba2 8B8590FE 		movl	-368(%rbp), %eax
 5027      FFFF
 5028 3ba8 4189F0   		movl	%esi, %r8d
 5029 3bab 89C6     		movl	%eax, %esi
 5030 3bad BF000000 		movl	$.LC140, %edi
 5030      00
 5031 3bb2 B8000000 		movl	$0, %eax
 5031      00
 5032 3bb7 E8000000 		call	printf
 5032      00
1185:main.c        **** 						printf("Coordinates -- %d \n",coordinates);
 5033              		.loc 1 1185 0
 5034 3bbc 8B8588FD 		movl	-632(%rbp), %eax
 5034      FFFF
 5035 3bc2 89C6     		movl	%eax, %esi
 5036 3bc4 BF000000 		movl	$.LC141, %edi
 5036      00
 5037 3bc9 B8000000 		movl	$0, %eax
 5037      00
 5038 3bce E8000000 		call	printf
 5038      00
1186:main.c        **** 						unsignedtouint8(output1,output);
 5039              		.loc 1 1186 0
 5040 3bd3 488D55C0 		leaq	-64(%rbp), %rdx
 5041 3bd7 488D8590 		leaq	-368(%rbp), %rax
 5041      FEFFFF
 5042 3bde 4889D6   		movq	%rdx, %rsi
 5043 3be1 4889C7   		movq	%rax, %rdi
 5044 3be4 E8000000 		call	unsignedtouint8
 5044      00
1187:main.c        **** 						flWriteChannel(handle,chanw,4,&input,&error);//send the coordinates again
 5045              		.loc 1 1187 0
 5046 3be9 0FB6B56D 		movzbl	-659(%rbp), %esi
 5046      FDFFFF
 5047 3bf0 488B85A0 		movq	-608(%rbp), %rax
 5047      FDFFFF
 5048 3bf7 488D8DA8 		leaq	-600(%rbp), %rcx
 5048      FDFFFF
 5049 3bfe 488D55B0 		leaq	-80(%rbp), %rdx
 5050 3c02 4989C8   		movq	%rcx, %r8
 5051 3c05 4889D1   		movq	%rdx, %rcx
 5052 3c08 BA040000 		movl	$4, %edx
 5052      00
 5053 3c0d 4889C7   		movq	%rax, %rdi
 5054 3c10 E8000000 		call	flWriteChannel
 5054      00
1188:main.c        **** 						printf("Again send the coordinates \n");
 5055              		.loc 1 1188 0
 5056 3c15 BF000000 		movl	$.LC142, %edi
 5056      00
 5057 3c1a E8000000 		call	puts
 5057      00
1189:main.c        **** 						flReadChannel(handle,chanr,4,&input,&error);// Reads Ack1
 5058              		.loc 1 1189 0
 5059 3c1f 0FB6B56C 		movzbl	-660(%rbp), %esi
 5059      FDFFFF
 5060 3c26 488B85A0 		movq	-608(%rbp), %rax
 5060      FDFFFF
 5061 3c2d 488D8DA8 		leaq	-600(%rbp), %rcx
 5061      FDFFFF
 5062 3c34 488D55B0 		leaq	-80(%rbp), %rdx
 5063 3c38 4989C8   		movq	%rcx, %r8
 5064 3c3b 4889D1   		movq	%rdx, %rcx
 5065 3c3e BA040000 		movl	$4, %edx
 5065      00
 5066 3c43 4889C7   		movq	%rax, %rdi
 5067 3c46 E8000000 		call	flReadChannel
 5067      00
1190:main.c        **** 						uint8tounsigned(input,input1);
 5068              		.loc 1 1190 0
 5069 3c4b 488D9580 		leaq	-384(%rbp), %rdx
 5069      FEFFFF
 5070 3c52 488D45B0 		leaq	-80(%rbp), %rax
 5071 3c56 4889D6   		movq	%rdx, %rsi
 5072 3c59 4889C7   		movq	%rax, %rdi
 5073 3c5c E8000000 		call	uint8tounsigned
 5073      00
1191:main.c        **** 						decrypt(input1,output1);
 5074              		.loc 1 1191 0
 5075 3c61 488D9590 		leaq	-368(%rbp), %rdx
 5075      FEFFFF
 5076 3c68 488D8580 		leaq	-384(%rbp), %rax
 5076      FEFFFF
 5077 3c6f 4889D6   		movq	%rdx, %rsi
 5078 3c72 4889C7   		movq	%rax, %rdi
 5079 3c75 E8000000 		call	decrypt
 5079      00
1192:main.c        **** 						printf("Ack1 -- %d %d %d %d \n",output1[0],output1[1],output1[2],output1[3]);
 5080              		.loc 1 1192 0
 5081 3c7a 8BB59CFE 		movl	-356(%rbp), %esi
 5081      FFFF
 5082 3c80 8B8D98FE 		movl	-360(%rbp), %ecx
 5082      FFFF
 5083 3c86 8B9594FE 		movl	-364(%rbp), %edx
 5083      FFFF
 5084 3c8c 8B8590FE 		movl	-368(%rbp), %eax
 5084      FFFF
 5085 3c92 4189F0   		movl	%esi, %r8d
 5086 3c95 89C6     		movl	%eax, %esi
 5087 3c97 BF000000 		movl	$.LC143, %edi
 5087      00
 5088 3c9c B8000000 		movl	$0, %eax
 5088      00
 5089 3ca1 E8000000 		call	printf
 5089      00
1193:main.c        **** 						printf("Ack1 -- %d %d %d %d \n",Ack1[0],Ack1[1],Ack1[2],Ack1[3]);
 5090              		.loc 1 1193 0
 5091 3ca6 8BB5BCFE 		movl	-324(%rbp), %esi
 5091      FFFF
 5092 3cac 8B8DB8FE 		movl	-328(%rbp), %ecx
 5092      FFFF
 5093 3cb2 8B95B4FE 		movl	-332(%rbp), %edx
 5093      FFFF
 5094 3cb8 8B85B0FE 		movl	-336(%rbp), %eax
 5094      FFFF
 5095 3cbe 4189F0   		movl	%esi, %r8d
 5096 3cc1 89C6     		movl	%eax, %esi
 5097 3cc3 BF000000 		movl	$.LC143, %edi
 5097      00
 5098 3cc8 B8000000 		movl	$0, %eax
 5098      00
 5099 3ccd E8000000 		call	printf
 5099      00
1194:main.c        **** 						printf("%d\n",equal(Ack1,output1));
 5100              		.loc 1 1194 0
 5101 3cd2 488D9590 		leaq	-368(%rbp), %rdx
 5101      FEFFFF
 5102 3cd9 488D85B0 		leaq	-336(%rbp), %rax
 5102      FEFFFF
 5103 3ce0 4889D6   		movq	%rdx, %rsi
 5104 3ce3 4889C7   		movq	%rax, %rdi
 5105 3ce6 E8000000 		call	equal
 5105      00
 5106 3ceb 0FB6C0   		movzbl	%al, %eax
 5107 3cee 89C6     		movl	%eax, %esi
 5108 3cf0 BF000000 		movl	$.LC144, %edi
 5108      00
 5109 3cf5 B8000000 		movl	$0, %eax
 5109      00
 5110 3cfa E8000000 		call	printf
 5110      00
1195:main.c        **** 						if(equal(Ack1,output1)){
 5111              		.loc 1 1195 0
 5112 3cff 488D9590 		leaq	-368(%rbp), %rdx
 5112      FEFFFF
 5113 3d06 488D85B0 		leaq	-336(%rbp), %rax
 5113      FEFFFF
 5114 3d0d 4889D6   		movq	%rdx, %rsi
 5115 3d10 4889C7   		movq	%rax, %rdi
 5116 3d13 E8000000 		call	equal
 5116      00
 5117 3d18 84C0     		testb	%al, %al
 5118 3d1a 7419     		je	.L271
1196:main.c        **** 							printf("Ack recived correct\n");
 5119              		.loc 1 1196 0
 5120 3d1c BF000000 		movl	$.LC145, %edi
 5120      00
 5121 3d21 E8000000 		call	puts
 5121      00
1197:main.c        **** 							state = 2;
 5122              		.loc 1 1197 0
 5123 3d26 C7858CFD 		movl	$2, -628(%rbp)
 5123      FFFF0200 
 5123      0000
 5124 3d30 E994FDFF 		jmp	.L275
 5124      FF
 5125              	.L271:
1198:main.c        **** 						}else{
1199:main.c        **** 							printf("Sleeping 5 seconds\n");
 5126              		.loc 1 1199 0
 5127 3d35 BF000000 		movl	$.LC146, %edi
 5127      00
 5128 3d3a E8000000 		call	puts
 5128      00
1200:main.c        **** 							sleep(5);
 5129              		.loc 1 1200 0
 5130 3d3f BF050000 		movl	$5, %edi
 5130      00
 5131 3d44 E8000000 		call	sleep
 5131      00
1201:main.c        **** 							flReadChannel(handle,chanr,4,&input,&error);// Reads Ack1
 5132              		.loc 1 1201 0
 5133 3d49 0FB6B56C 		movzbl	-660(%rbp), %esi
 5133      FDFFFF
 5134 3d50 488B85A0 		movq	-608(%rbp), %rax
 5134      FDFFFF
 5135 3d57 488D8DA8 		leaq	-600(%rbp), %rcx
 5135      FDFFFF
 5136 3d5e 488D55B0 		leaq	-80(%rbp), %rdx
 5137 3d62 4989C8   		movq	%rcx, %r8
 5138 3d65 4889D1   		movq	%rdx, %rcx
 5139 3d68 BA040000 		movl	$4, %edx
 5139      00
 5140 3d6d 4889C7   		movq	%rax, %rdi
 5141 3d70 E8000000 		call	flReadChannel
 5141      00
1202:main.c        **** 							uint8tounsigned(input,input1);
 5142              		.loc 1 1202 0
 5143 3d75 488D9580 		leaq	-384(%rbp), %rdx
 5143      FEFFFF
 5144 3d7c 488D45B0 		leaq	-80(%rbp), %rax
 5145 3d80 4889D6   		movq	%rdx, %rsi
 5146 3d83 4889C7   		movq	%rax, %rdi
 5147 3d86 E8000000 		call	uint8tounsigned
 5147      00
1203:main.c        **** 							decrypt(input1,output1);
 5148              		.loc 1 1203 0
 5149 3d8b 488D9590 		leaq	-368(%rbp), %rdx
 5149      FEFFFF
 5150 3d92 488D8580 		leaq	-384(%rbp), %rax
 5150      FEFFFF
 5151 3d99 4889D6   		movq	%rdx, %rsi
 5152 3d9c 4889C7   		movq	%rax, %rdi
 5153 3d9f E8000000 		call	decrypt
 5153      00
1204:main.c        **** 							if(equal(Ack1,output1)){
 5154              		.loc 1 1204 0
 5155 3da4 488D9590 		leaq	-368(%rbp), %rdx
 5155      FEFFFF
 5156 3dab 488D85B0 		leaq	-336(%rbp), %rax
 5156      FEFFFF
 5157 3db2 4889D6   		movq	%rdx, %rsi
 5158 3db5 4889C7   		movq	%rax, %rdi
 5159 3db8 E8000000 		call	equal
 5159      00
 5160 3dbd 84C0     		testb	%al, %al
 5161 3dbf 7419     		je	.L273
1205:main.c        **** 								state = 2;
 5162              		.loc 1 1205 0
 5163 3dc1 C7858CFD 		movl	$2, -628(%rbp)
 5163      FFFF0200 
 5163      0000
1206:main.c        **** 								printf("Ack recived correct\n");
 5164              		.loc 1 1206 0
 5165 3dcb BF000000 		movl	$.LC145, %edi
 5165      00
 5166 3dd0 E8000000 		call	puts
 5166      00
 5167 3dd5 E9EFFCFF 		jmp	.L275
 5167      FF
 5168              	.L273:
1207:main.c        **** 							}else{
1208:main.c        **** 								state = 1;
 5169              		.loc 1 1208 0
 5170 3dda C7858CFD 		movl	$1, -628(%rbp)
 5170      FFFF0100 
 5170      0000
1209:main.c        **** 								chanr+=2;
 5171              		.loc 1 1209 0
 5172 3de4 80856CFD 		addb	$2, -660(%rbp)
 5172      FFFF02
1210:main.c        **** 								chanw+=2;
 5173              		.loc 1 1210 0
 5174 3deb 80856DFD 		addb	$2, -659(%rbp)
 5174      FFFF02
1211:main.c        **** 								printf("Increamenting chanr to %d chanw to %d\n",chanr,chanw);
 5175              		.loc 1 1211 0
 5176 3df2 0FB6956D 		movzbl	-659(%rbp), %edx
 5176      FDFFFF
 5177 3df9 0FB6856C 		movzbl	-660(%rbp), %eax
 5177      FDFFFF
 5178 3e00 89C6     		movl	%eax, %esi
 5179 3e02 BF000000 		movl	$.LC147, %edi
 5179      00
 5180 3e07 B8000000 		movl	$0, %eax
 5180      00
 5181 3e0c E8000000 		call	printf
 5181      00
 5182 3e11 E9B3FCFF 		jmp	.L275
 5182      FF
 5183              	.L270:
1212:main.c        **** 							}
1213:main.c        **** 						}
1214:main.c        **** 
1215:main.c        **** 					}else if(state == 2){
 5184              		.loc 1 1215 0
 5185 3e16 83BD8CFD 		cmpl	$2, -628(%rbp)
 5185      FFFF02
 5186 3e1d 0F85A6FC 		jne	.L275
 5186      FFFF
1216:main.c        **** 						printf("I am in state 2");
 5187              		.loc 1 1216 0
 5188 3e23 BF000000 		movl	$.LC148, %edi
 5188      00
 5189 3e28 B8000000 		movl	$0, %eax
 5189      00
 5190 3e2d E8000000 		call	printf
 5190      00
1217:main.c        **** 						flWriteChannel(handle,chanw,4,&Ack2,&error);//Send Ack2 TODO--Encrypt and send
 5191              		.loc 1 1217 0
 5192 3e32 0FB6B56D 		movzbl	-659(%rbp), %esi
 5192      FDFFFF
 5193 3e39 488B85A0 		movq	-608(%rbp), %rax
 5193      FDFFFF
 5194 3e40 488D8DA8 		leaq	-600(%rbp), %rcx
 5194      FDFFFF
 5195 3e47 488D55D0 		leaq	-48(%rbp), %rdx
 5196 3e4b 4989C8   		movq	%rcx, %r8
 5197 3e4e 4889D1   		movq	%rdx, %rcx
 5198 3e51 BA040000 		movl	$4, %edx
 5198      00
 5199 3e56 4889C7   		movq	%rax, %rdi
 5200 3e59 E8000000 		call	flWriteChannel
 5200      00
1218:main.c        **** 						printf("Sent Ack2  %d %d %d %d \n",Ack2[0],Ack2[1],Ack2[2],Ack2[3]);
 5201              		.loc 1 1218 0
 5202 3e5e 0FB645D3 		movzbl	-45(%rbp), %eax
 5203 3e62 0FB6F0   		movzbl	%al, %esi
 5204 3e65 0FB645D2 		movzbl	-46(%rbp), %eax
 5205 3e69 0FB6C8   		movzbl	%al, %ecx
 5206 3e6c 0FB645D1 		movzbl	-47(%rbp), %eax
 5207 3e70 0FB6D0   		movzbl	%al, %edx
 5208 3e73 0FB645D0 		movzbl	-48(%rbp), %eax
 5209 3e77 0FB6C0   		movzbl	%al, %eax
 5210 3e7a 4189F0   		movl	%esi, %r8d
 5211 3e7d 89C6     		movl	%eax, %esi
 5212 3e7f BF000000 		movl	$.LC149, %edi
 5212      00
 5213 3e84 B8000000 		movl	$0, %eax
 5213      00
 5214 3e89 E8000000 		call	printf
 5214      00
1219:main.c        **** 						csvlooker(coordinates,infoin8);
 5215              		.loc 1 1219 0
 5216 3e8e 488D95C0 		leaq	-320(%rbp), %rdx
 5216      FEFFFF
 5217 3e95 8B8588FD 		movl	-632(%rbp), %eax
 5217      FFFF
 5218 3e9b 4889D6   		movq	%rdx, %rsi
 5219 3e9e 89C7     		movl	%eax, %edi
 5220 3ea0 E8000000 		call	csvlooker
 5220      00
1220:main.c        **** 						printf("first 32 -- %d %d %d %d \n",infoin8[0],infoin8[1],infoin8[2],infoin8[3]);
 5221              		.loc 1 1220 0
 5222 3ea5 8BB5CCFE 		movl	-308(%rbp), %esi
 5222      FFFF
 5223 3eab 8B8DC8FE 		movl	-312(%rbp), %ecx
 5223      FFFF
 5224 3eb1 8B95C4FE 		movl	-316(%rbp), %edx
 5224      FFFF
 5225 3eb7 8B85C0FE 		movl	-320(%rbp), %eax
 5225      FFFF
 5226 3ebd 4189F0   		movl	%esi, %r8d
 5227 3ec0 89C6     		movl	%eax, %esi
 5228 3ec2 BF000000 		movl	$.LC150, %edi
 5228      00
 5229 3ec7 B8000000 		movl	$0, %eax
 5229      00
 5230 3ecc E8000000 		call	printf
 5230      00
1221:main.c        **** 
1222:main.c        **** 						encrypt(infoin8,input1);
 5231              		.loc 1 1222 0
 5232 3ed1 488D9580 		leaq	-384(%rbp), %rdx
 5232      FEFFFF
 5233 3ed8 488D85C0 		leaq	-320(%rbp), %rax
 5233      FEFFFF
 5234 3edf 4889D6   		movq	%rdx, %rsi
 5235 3ee2 4889C7   		movq	%rax, %rdi
 5236 3ee5 E8000000 		call	encrypt
 5236      00
1223:main.c        **** 						unsignedtouint8(input1,output);
 5237              		.loc 1 1223 0
 5238 3eea 488D55C0 		leaq	-64(%rbp), %rdx
 5239 3eee 488D8580 		leaq	-384(%rbp), %rax
 5239      FEFFFF
 5240 3ef5 4889D6   		movq	%rdx, %rsi
 5241 3ef8 4889C7   		movq	%rax, %rdi
 5242 3efb E8000000 		call	unsignedtouint8
 5242      00
1224:main.c        **** 						flWriteChannel(handle,chanw,4,&output,&error);
 5243              		.loc 1 1224 0
 5244 3f00 0FB6B56D 		movzbl	-659(%rbp), %esi
 5244      FDFFFF
 5245 3f07 488B85A0 		movq	-608(%rbp), %rax
 5245      FDFFFF
 5246 3f0e 488D8DA8 		leaq	-600(%rbp), %rcx
 5246      FDFFFF
 5247 3f15 488D55C0 		leaq	-64(%rbp), %rdx
 5248 3f19 4989C8   		movq	%rcx, %r8
 5249 3f1c 4889D1   		movq	%rdx, %rcx
 5250 3f1f BA040000 		movl	$4, %edx
 5250      00
 5251 3f24 4889C7   		movq	%rax, %rdi
 5252 3f27 E8000000 		call	flWriteChannel
 5252      00
1225:main.c        **** 
1226:main.c        **** 						flReadChannel(handle,chanr,4,&input,&error);//TODO , recives Ac1
 5253              		.loc 1 1226 0
 5254 3f2c 0FB6B56C 		movzbl	-660(%rbp), %esi
 5254      FDFFFF
 5255 3f33 488B85A0 		movq	-608(%rbp), %rax
 5255      FDFFFF
 5256 3f3a 488D8DA8 		leaq	-600(%rbp), %rcx
 5256      FDFFFF
 5257 3f41 488D55B0 		leaq	-80(%rbp), %rdx
 5258 3f45 4989C8   		movq	%rcx, %r8
 5259 3f48 4889D1   		movq	%rdx, %rcx
 5260 3f4b BA040000 		movl	$4, %edx
 5260      00
 5261 3f50 4889C7   		movq	%rax, %rdi
 5262 3f53 E8000000 		call	flReadChannel
 5262      00
1227:main.c        **** 						uint8tounsigned(input,input1);
 5263              		.loc 1 1227 0
 5264 3f58 488D9580 		leaq	-384(%rbp), %rdx
 5264      FEFFFF
 5265 3f5f 488D45B0 		leaq	-80(%rbp), %rax
 5266 3f63 4889D6   		movq	%rdx, %rsi
 5267 3f66 4889C7   		movq	%rax, %rdi
 5268 3f69 E8000000 		call	uint8tounsigned
 5268      00
1228:main.c        **** 						decrypt(input1,output1);
 5269              		.loc 1 1228 0
 5270 3f6e 488D9590 		leaq	-368(%rbp), %rdx
 5270      FEFFFF
 5271 3f75 488D8580 		leaq	-384(%rbp), %rax
 5271      FEFFFF
 5272 3f7c 4889D6   		movq	%rdx, %rsi
 5273 3f7f 4889C7   		movq	%rax, %rdi
 5274 3f82 E8000000 		call	decrypt
 5274      00
1229:main.c        **** 						unsignedtouint8(output1,output);
 5275              		.loc 1 1229 0
 5276 3f87 488D55C0 		leaq	-64(%rbp), %rdx
 5277 3f8b 488D8590 		leaq	-368(%rbp), %rax
 5277      FEFFFF
 5278 3f92 4889D6   		movq	%rdx, %rsi
 5279 3f95 4889C7   		movq	%rax, %rdi
 5280 3f98 E8000000 		call	unsignedtouint8
 5280      00
1230:main.c        **** 						printf("Ack1 -- %d %d %d %d \n",output[0],output[1],output[2],output[3]);
 5281              		.loc 1 1230 0
 5282 3f9d 0FB645C3 		movzbl	-61(%rbp), %eax
 5283 3fa1 0FB6F0   		movzbl	%al, %esi
 5284 3fa4 0FB645C2 		movzbl	-62(%rbp), %eax
 5285 3fa8 0FB6C8   		movzbl	%al, %ecx
 5286 3fab 0FB645C1 		movzbl	-63(%rbp), %eax
 5287 3faf 0FB6D0   		movzbl	%al, %edx
 5288 3fb2 0FB645C0 		movzbl	-64(%rbp), %eax
 5289 3fb6 0FB6C0   		movzbl	%al, %eax
 5290 3fb9 4189F0   		movl	%esi, %r8d
 5291 3fbc 89C6     		movl	%eax, %esi
 5292 3fbe BF000000 		movl	$.LC143, %edi
 5292      00
 5293 3fc3 B8000000 		movl	$0, %eax
 5293      00
 5294 3fc8 E8000000 		call	printf
 5294      00
1231:main.c        **** 
1232:main.c        **** 						encrypt(infoin8+4,output1);
 5295              		.loc 1 1232 0
 5296 3fcd 488D85C0 		leaq	-320(%rbp), %rax
 5296      FEFFFF
 5297 3fd4 4883C010 		addq	$16, %rax
 5298 3fd8 488D9590 		leaq	-368(%rbp), %rdx
 5298      FEFFFF
 5299 3fdf 4889D6   		movq	%rdx, %rsi
 5300 3fe2 4889C7   		movq	%rax, %rdi
 5301 3fe5 E8000000 		call	encrypt
 5301      00
1233:main.c        **** 						printf("next 32 -- %d %d %d %d \n",infoin8[4],infoin8[5],infoin8[6],infoin8[7]);
 5302              		.loc 1 1233 0
 5303 3fea 8BB5DCFE 		movl	-292(%rbp), %esi
 5303      FFFF
 5304 3ff0 8B8DD8FE 		movl	-296(%rbp), %ecx
 5304      FFFF
 5305 3ff6 8B95D4FE 		movl	-300(%rbp), %edx
 5305      FFFF
 5306 3ffc 8B85D0FE 		movl	-304(%rbp), %eax
 5306      FFFF
 5307 4002 4189F0   		movl	%esi, %r8d
 5308 4005 89C6     		movl	%eax, %esi
 5309 4007 BF000000 		movl	$.LC151, %edi
 5309      00
 5310 400c B8000000 		movl	$0, %eax
 5310      00
 5311 4011 E8000000 		call	printf
 5311      00
1234:main.c        **** 
1235:main.c        **** 						unsignedtouint8(output1,output);
 5312              		.loc 1 1235 0
 5313 4016 488D55C0 		leaq	-64(%rbp), %rdx
 5314 401a 488D8590 		leaq	-368(%rbp), %rax
 5314      FEFFFF
 5315 4021 4889D6   		movq	%rdx, %rsi
 5316 4024 4889C7   		movq	%rax, %rdi
 5317 4027 E8000000 		call	unsignedtouint8
 5317      00
1236:main.c        **** 						flWriteChannel(handle,chanw,4,&output,&error);//Sends last 32 bits
 5318              		.loc 1 1236 0
 5319 402c 0FB6B56D 		movzbl	-659(%rbp), %esi
 5319      FDFFFF
 5320 4033 488B85A0 		movq	-608(%rbp), %rax
 5320      FDFFFF
 5321 403a 488D8DA8 		leaq	-600(%rbp), %rcx
 5321      FDFFFF
 5322 4041 488D55C0 		leaq	-64(%rbp), %rdx
 5323 4045 4989C8   		movq	%rcx, %r8
 5324 4048 4889D1   		movq	%rdx, %rcx
 5325 404b BA040000 		movl	$4, %edx
 5325      00
 5326 4050 4889C7   		movq	%rax, %rdi
 5327 4053 E8000000 		call	flWriteChannel
 5327      00
1237:main.c        **** 
1238:main.c        **** 						flReadChannel(handle,chanr,4,&input,&error);//TODO , recives Ac1
 5328              		.loc 1 1238 0
 5329 4058 0FB6B56C 		movzbl	-660(%rbp), %esi
 5329      FDFFFF
 5330 405f 488B85A0 		movq	-608(%rbp), %rax
 5330      FDFFFF
 5331 4066 488D8DA8 		leaq	-600(%rbp), %rcx
 5331      FDFFFF
 5332 406d 488D55B0 		leaq	-80(%rbp), %rdx
 5333 4071 4989C8   		movq	%rcx, %r8
 5334 4074 4889D1   		movq	%rdx, %rcx
 5335 4077 BA040000 		movl	$4, %edx
 5335      00
 5336 407c 4889C7   		movq	%rax, %rdi
 5337 407f E8000000 		call	flReadChannel
 5337      00
1239:main.c        **** 						uint8tounsigned(input,input1);
 5338              		.loc 1 1239 0
 5339 4084 488D9580 		leaq	-384(%rbp), %rdx
 5339      FEFFFF
 5340 408b 488D45B0 		leaq	-80(%rbp), %rax
 5341 408f 4889D6   		movq	%rdx, %rsi
 5342 4092 4889C7   		movq	%rax, %rdi
 5343 4095 E8000000 		call	uint8tounsigned
 5343      00
1240:main.c        **** 						decrypt(input1,output1);
 5344              		.loc 1 1240 0
 5345 409a 488D9590 		leaq	-368(%rbp), %rdx
 5345      FEFFFF
 5346 40a1 488D8580 		leaq	-384(%rbp), %rax
 5346      FEFFFF
 5347 40a8 4889D6   		movq	%rdx, %rsi
 5348 40ab 4889C7   		movq	%rax, %rdi
 5349 40ae E8000000 		call	decrypt
 5349      00
1241:main.c        **** 						unsignedtouint8(output1,output);
 5350              		.loc 1 1241 0
 5351 40b3 488D55C0 		leaq	-64(%rbp), %rdx
 5352 40b7 488D8590 		leaq	-368(%rbp), %rax
 5352      FEFFFF
 5353 40be 4889D6   		movq	%rdx, %rsi
 5354 40c1 4889C7   		movq	%rax, %rdi
 5355 40c4 E8000000 		call	unsignedtouint8
 5355      00
1242:main.c        **** 						printf("Ack1 -- %d %d %d %d \n",output[0],output[1],output[2],output[3]);
 5356              		.loc 1 1242 0
 5357 40c9 0FB645C3 		movzbl	-61(%rbp), %eax
 5358 40cd 0FB6F0   		movzbl	%al, %esi
 5359 40d0 0FB645C2 		movzbl	-62(%rbp), %eax
 5360 40d4 0FB6C8   		movzbl	%al, %ecx
 5361 40d7 0FB645C1 		movzbl	-63(%rbp), %eax
 5362 40db 0FB6D0   		movzbl	%al, %edx
 5363 40de 0FB645C0 		movzbl	-64(%rbp), %eax
 5364 40e2 0FB6C0   		movzbl	%al, %eax
 5365 40e5 4189F0   		movl	%esi, %r8d
 5366 40e8 89C6     		movl	%eax, %esi
 5367 40ea BF000000 		movl	$.LC143, %edi
 5367      00
 5368 40ef B8000000 		movl	$0, %eax
 5368      00
 5369 40f4 E8000000 		call	printf
 5369      00
1243:main.c        **** 
1244:main.c        **** 
1245:main.c        **** 						flWriteChannel(handle,chanw,4,&Ack2,&error);//Send Ack2
 5370              		.loc 1 1245 0
 5371 40f9 0FB6B56D 		movzbl	-659(%rbp), %esi
 5371      FDFFFF
 5372 4100 488B85A0 		movq	-608(%rbp), %rax
 5372      FDFFFF
 5373 4107 488D8DA8 		leaq	-600(%rbp), %rcx
 5373      FDFFFF
 5374 410e 488D55D0 		leaq	-48(%rbp), %rdx
 5375 4112 4989C8   		movq	%rcx, %r8
 5376 4115 4889D1   		movq	%rdx, %rcx
 5377 4118 BA040000 		movl	$4, %edx
 5377      00
 5378 411d 4889C7   		movq	%rax, %rdi
 5379 4120 E8000000 		call	flWriteChannel
 5379      00
1246:main.c        **** 						// sleep(20);
1247:main.c        **** 						flReadChannel(handle,chanr,4,&input,&error);//TODO , recives shits		
 5380              		.loc 1 1247 0
 5381 4125 0FB6B56C 		movzbl	-660(%rbp), %esi
 5381      FDFFFF
 5382 412c 488B85A0 		movq	-608(%rbp), %rax
 5382      FDFFFF
 5383 4133 488D8DA8 		leaq	-600(%rbp), %rcx
 5383      FDFFFF
 5384 413a 488D55B0 		leaq	-80(%rbp), %rdx
 5385 413e 4989C8   		movq	%rcx, %r8
 5386 4141 4889D1   		movq	%rdx, %rcx
 5387 4144 BA040000 		movl	$4, %edx
 5387      00
 5388 4149 4889C7   		movq	%rax, %rdi
 5389 414c E8000000 		call	flReadChannel
 5389      00
1248:main.c        **** 						printf("shits -- %d %d %d %d \n",input[0],input[1],input[2],input[3]);				
 5390              		.loc 1 1248 0
 5391 4151 0FB645B3 		movzbl	-77(%rbp), %eax
 5392 4155 0FB6F0   		movzbl	%al, %esi
 5393 4158 0FB645B2 		movzbl	-78(%rbp), %eax
 5394 415c 0FB6C8   		movzbl	%al, %ecx
 5395 415f 0FB645B1 		movzbl	-79(%rbp), %eax
 5396 4163 0FB6D0   		movzbl	%al, %edx
 5397 4166 0FB645B0 		movzbl	-80(%rbp), %eax
 5398 416a 0FB6C0   		movzbl	%al, %eax
 5399 416d 4189F0   		movl	%esi, %r8d
 5400 4170 89C6     		movl	%eax, %esi
 5401 4172 BF000000 		movl	$.LC152, %edi
 5401      00
 5402 4177 B8000000 		movl	$0, %eax
 5402      00
 5403 417c E8000000 		call	printf
 5403      00
1249:main.c        **** 						uint8tounsigned(input,input1);
 5404              		.loc 1 1249 0
 5405 4181 488D9580 		leaq	-384(%rbp), %rdx
 5405      FEFFFF
 5406 4188 488D45B0 		leaq	-80(%rbp), %rax
 5407 418c 4889D6   		movq	%rdx, %rsi
 5408 418f 4889C7   		movq	%rax, %rdi
 5409 4192 E8000000 		call	uint8tounsigned
 5409      00
1250:main.c        **** 						printf("shits -- %d %d %d %d \n",input1[0],input1[1],input1[2],input1[3]);
 5410              		.loc 1 1250 0
 5411 4197 8BB58CFE 		movl	-372(%rbp), %esi
 5411      FFFF
 5412 419d 8B8D88FE 		movl	-376(%rbp), %ecx
 5412      FFFF
 5413 41a3 8B9584FE 		movl	-380(%rbp), %edx
 5413      FFFF
 5414 41a9 8B8580FE 		movl	-384(%rbp), %eax
 5414      FFFF
 5415 41af 4189F0   		movl	%esi, %r8d
 5416 41b2 89C6     		movl	%eax, %esi
 5417 41b4 BF000000 		movl	$.LC152, %edi
 5417      00
 5418 41b9 B8000000 		movl	$0, %eax
 5418      00
 5419 41be E8000000 		call	printf
 5419      00
1251:main.c        **** 						decrypt(input1,output1);
 5420              		.loc 1 1251 0
 5421 41c3 488D9590 		leaq	-368(%rbp), %rdx
 5421      FEFFFF
 5422 41ca 488D8580 		leaq	-384(%rbp), %rax
 5422      FEFFFF
 5423 41d1 4889D6   		movq	%rdx, %rsi
 5424 41d4 4889C7   		movq	%rax, %rdi
 5425 41d7 E8000000 		call	decrypt
 5425      00
1252:main.c        **** 						printf("shits -- %d %d %d %d \n",output1[0],output1[1],output1[2],output1[3]);
 5426              		.loc 1 1252 0
 5427 41dc 8BB59CFE 		movl	-356(%rbp), %esi
 5427      FFFF
 5428 41e2 8B8D98FE 		movl	-360(%rbp), %ecx
 5428      FFFF
 5429 41e8 8B9594FE 		movl	-364(%rbp), %edx
 5429      FFFF
 5430 41ee 8B8590FE 		movl	-368(%rbp), %eax
 5430      FFFF
 5431 41f4 4189F0   		movl	%esi, %r8d
 5432 41f7 89C6     		movl	%eax, %esi
 5433 41f9 BF000000 		movl	$.LC152, %edi
 5433      00
 5434 41fe B8000000 		movl	$0, %eax
 5434      00
 5435 4203 E8000000 		call	printf
 5435      00
1253:main.c        **** 						if(output1[1]==0){
 5436              		.loc 1 1253 0
 5437 4208 8B8594FE 		movl	-364(%rbp), %eax
 5437      FFFF
 5438 420e 85C0     		testl	%eax, %eax
 5439 4210 752C     		jne	.L274
1254:main.c        **** 							csvupdater(coordinates,output1[0]);
 5440              		.loc 1 1254 0
 5441 4212 8B9590FE 		movl	-368(%rbp), %edx
 5441      FFFF
 5442 4218 8B8588FD 		movl	-632(%rbp), %eax
 5442      FFFF
 5443 421e 89D6     		movl	%edx, %esi
 5444 4220 89C7     		movl	%eax, %edi
 5445 4222 E8000000 		call	csvupdater
 5445      00
1255:main.c        **** 							printf("Updating csv with %d \n",output1[0]);
 5446              		.loc 1 1255 0
 5447 4227 8B8590FE 		movl	-368(%rbp), %eax
 5447      FFFF
 5448 422d 89C6     		movl	%eax, %esi
 5449 422f BF000000 		movl	$.LC153, %edi
 5449      00
 5450 4234 B8000000 		movl	$0, %eax
 5450      00
 5451 4239 E8000000 		call	printf
 5451      00
 5452              	.L274:
1256:main.c        **** 						}else{
1257:main.c        **** 							
1258:main.c        **** 						}
1259:main.c        **** 						
1260:main.c        **** 						state = 0;	
 5453              		.loc 1 1260 0
 5454 423e C7858CFD 		movl	$0, -628(%rbp)
 5454      FFFF0000 
 5454      0000
1261:main.c        **** 					}
1262:main.c        **** 				}
 5455              		.loc 1 1262 0
 5456 4248 E97CF8FF 		jmp	.L275
 5456      FF
 5457              	.L267:
 5458              	.LBE39:
1263:main.c        **** 			} else {
1264:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 5459              		.loc 1 1264 0
 5460 424d 488B0500 		movq	stderr(%rip), %rax
 5460      000000
 5461 4254 488B9560 		movq	-416(%rbp), %rdx
 5461      FEFFFF
 5462 425b BE000000 		movl	$.LC138, %esi
 5462      00
 5463 4260 4889C7   		movq	%rax, %rdi
 5464 4263 B8000000 		movl	$0, %eax
 5464      00
 5465 4268 E8000000 		call	fprintf
 5465      00
1265:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 5466              		.loc 1 1265 0
 5467 426d C78578FD 		movl	$12, -648(%rbp)
 5467      FFFF0C00 
 5467      0000
 5468 4277 90       		nop
 5469 4278 EB2B     		jmp	.L198
 5470              	.L263:
 5471              	.LBE38:
1266:main.c        **** 			}
1267:main.c        **** 		} else {
1268:main.c        **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 5472              		.loc 1 1268 0
 5473 427a 488B0500 		movq	stderr(%rip), %rax
 5473      000000
 5474 4281 488B9560 		movq	-416(%rbp), %rdx
 5474      FEFFFF
 5475 4288 BE000000 		movl	$.LC139, %esi
 5475      00
 5476 428d 4889C7   		movq	%rax, %rdi
 5477 4290 B8000000 		movl	$0, %eax
 5477      00
 5478 4295 E8000000 		call	fprintf
 5478      00
1269:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5479              		.loc 1 1269 0
 5480 429a C78578FD 		movl	$12, -648(%rbp)
 5480      FFFF0C00 
 5480      0000
 5481 42a4 90       		nop
 5482              	.L198:
1270:main.c        **** 		}
1271:main.c        **** 	}
1272:main.c        **** 
1273:main.c        **** 
1274:main.c        **** cleanup:
1275:main.c        **** 	free((void*)line);
 5483              		.loc 1 1275 0
 5484 42a5 488B85C0 		movq	-576(%rbp), %rax
 5484      FDFFFF
 5485 42ac 4889C7   		movq	%rax, %rdi
 5486 42af E8000000 		call	free
 5486      00
1276:main.c        **** 	flClose(handle);
 5487              		.loc 1 1276 0
 5488 42b4 488B85A0 		movq	-608(%rbp), %rax
 5488      FDFFFF
 5489 42bb 4889C7   		movq	%rax, %rdi
 5490 42be E8000000 		call	flClose
 5490      00
1277:main.c        **** 	if ( error ) {
 5491              		.loc 1 1277 0
 5492 42c3 488B85A8 		movq	-600(%rbp), %rax
 5492      FDFFFF
 5493 42ca 4885C0   		testq	%rax, %rax
 5494 42cd 742F     		je	.L276
1278:main.c        **** 		fprintf(stderr, "%s\n", error);
 5495              		.loc 1 1278 0
 5496 42cf 488B95A8 		movq	-600(%rbp), %rdx
 5496      FDFFFF
 5497 42d6 488B0500 		movq	stderr(%rip), %rax
 5497      000000
 5498 42dd BE000000 		movl	$.LC154, %esi
 5498      00
 5499 42e2 4889C7   		movq	%rax, %rdi
 5500 42e5 B8000000 		movl	$0, %eax
 5500      00
 5501 42ea E8000000 		call	fprintf
 5501      00
1279:main.c        **** 		flFreeError(error);
 5502              		.loc 1 1279 0
 5503 42ef 488B85A8 		movq	-600(%rbp), %rax
 5503      FDFFFF
 5504 42f6 4889C7   		movq	%rax, %rdi
 5505 42f9 E8000000 		call	flFreeError
 5505      00
 5506              	.L276:
1280:main.c        **** 	}
1281:main.c        **** 	return retVal;
 5507              		.loc 1 1281 0
 5508 42fe 8B8578FD 		movl	-648(%rbp), %eax
 5508      FFFF
1282:main.c        **** }
 5509              		.loc 1 1282 0
 5510 4304 488B5DE8 		movq	-24(%rbp), %rbx
 5511 4308 6448331C 		xorq	%fs:40, %rbx
 5511      25280000 
 5511      00
 5512 4311 7405     		je	.L278
 5513 4313 E8000000 		call	__stack_chk_fail
 5513      00
 5514              	.L278:
 5515 4318 4881C4A8 		addq	$680, %rsp
 5515      020000
 5516 431f 5B       		popq	%rbx
 5517 4320 5D       		popq	%rbp
 5518              		.cfi_def_cfa 7, 8
 5519 4321 C3       		ret
 5520              		.cfi_endproc
 5521              	.LFE20:
 5523              		.section	.rodata
 5524 0eed 000000   		.align 8
 5525              	.LC19:
 5526 0ef0 00000000 		.long	0
 5527 0ef4 80842E41 		.long	1093567616
 5528              		.align 8
 5529              	.LC20:
 5530 0ef8 00000000 		.long	0
 5531 0efc 00003041 		.long	1093664768
 5532              		.text
 5533              	.Letext0:
 5534              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h"
 5535              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 5536              		.file 4 "/usr/include/stdio.h"
 5537              		.file 5 "/usr/include/libio.h"
 5538              		.file 6 "/home/aditya/Desktop/20140524/makestuff/common/makestuff.h"
 5539              		.file 7 "/home/aditya/Desktop/20140524/makestuff/libs/libfpgalink/libfpgalink.h"
 5540              		.file 8 "/home/aditya/Desktop/20140524/makestuff/libs/libbuffer/libbuffer.h"
 5541              		.file 9 "/home/aditya/Desktop/20140524/makestuff/libs/libargtable2/argtable2.h"
 5542              		.file 10 "/usr/include/x86_64-linux-gnu/bits/time.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccp3Yzoa.s:6      .text:0000000000000000 pow
     /tmp/ccp3Yzoa.s:33     .text:000000000000001a unsignedtouint8
     /tmp/ccp3Yzoa.s:77     .text:0000000000000062 uint8tounsigned
     /tmp/ccp3Yzoa.s:134    .text:00000000000000ad csvupdater
     /tmp/ccp3Yzoa.s:494    .text:0000000000000505 csvlooker
     /tmp/ccp3Yzoa.s:832    .text:00000000000009a9 equal
     /tmp/ccp3Yzoa.s:898    .data:0000000000000000 key
     /tmp/ccp3Yzoa.s:934    .text:0000000000000a1e encrypt
     /tmp/ccp3Yzoa.s:1125   .text:0000000000000bd9 decrypt
     /tmp/ccp3Yzoa.s:1318   .bss:0000000000000000 ptr
     /tmp/ccp3Yzoa.s:1318   .bss:0000000000000008 enableBenchmarking
     /tmp/ccp3Yzoa.s:1322   .text:0000000000000d97 isHexDigit
     /tmp/ccp3Yzoa.s:1375   .text:0000000000000dd5 fun
     /tmp/ccp3Yzoa.s:1416   .text:0000000000000e1e calcChecksum
     /tmp/ccp3Yzoa.s:1456   .text:0000000000000e5f getHexNibble
     /tmp/ccp3Yzoa.s:1524   .text:0000000000000ed3 getHexByte
     /tmp/ccp3Yzoa.s:1620   .rodata:0000000000000120 errMessages
     /tmp/ccp3Yzoa.s:1638   .text:0000000000000f77 doRead
     /tmp/ccp3Yzoa.s:1886   .text:000000000000121f doWrite
     /tmp/ccp3Yzoa.s:2035   .text:0000000000001413 parseLine
     /tmp/ccp3Yzoa.s:3282   .data:0000000000000080 nibbles
     /tmp/ccp3Yzoa.s:3573   .text:00000000000024de main

UNDEFINED SYMBOLS
fopen
fputs
fgets
fclose
remove
rename
__stack_chk_fail
printf
flReadChannelAsyncSubmit
errPrefix
flReadChannelAsyncAwait
fwrite
fread
flWriteChannelAsync
flAwaitAsyncWrites
bufInitialise
__errno_location
strtoul
malloc
strncpy
free
gettimeofday
bufAppendConst
flReadChannel
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
fprintf
fputc
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
arg_parse
stdout
arg_print_syntax
puts
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flLoadStandardFirmware
flSleep
putchar
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
strcmp
flFlashStandardFirmware
flFlashCustomFirmware
flSaveFirmware
flResetToggle
flIsNeroCapable
flIsCommCapable
flMultiBitPortAccess
sprintf
jtagScanChain
flProgram
flIsFPGARunning
sigRegisterHandler
sigIsRaised
readline
add_history
sleep
flClose
flFreeError
